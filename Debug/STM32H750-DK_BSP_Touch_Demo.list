
STM32H750-DK_BSP_Touch_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6ac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024c0  0800c950  0800c950  0000d950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee10  0800ee10  0000fe10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee18  0800ee18  0000fe18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ee1c  0800ee1c  0000fe1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000022c  24000000  0800ee20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000010b8  2400022c  0800f04c  0001022c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240012e4  0800f04c  000102e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022c03  00000000  00000000  0001025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047ff  00000000  00000000  00032e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d78  00000000  00000000  00037660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016c1  00000000  00000000  000393d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009253  00000000  00000000  0003aa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000274d5  00000000  00000000  00043cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00193970  00000000  00000000  0006b1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001feb31  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008bc0  00000000  00000000  001feb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  00207734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400022c 	.word	0x2400022c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c934 	.word	0x0800c934

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000230 	.word	0x24000230
 80002dc:	0800c934 	.word	0x0800c934

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d103      	bne.n	80003a8 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80003a0:	f04f 33ff 	mov.w	r3, #4294967295
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e02c      	b.n	8000402 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	891a      	ldrh	r2, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	691a      	ldr	r2, [r3, #16]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a0c      	ldr	r2, [pc, #48]	@ (800040c <FT5336_RegisterBusIO+0x7c>)
 80003dc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <FT5336_RegisterBusIO+0x80>)
 80003e2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d004      	beq.n	80003fc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4798      	blx	r3
 80003f8:	60f8      	str	r0, [r7, #12]
 80003fa:	e002      	b.n	8000402 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000400:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	08000809 	.word	0x08000809
 8000410:	0800083d 	.word	0x0800083d

08000414 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	2201      	movs	r2, #1
 8000422:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	2201      	movs	r2, #1
 8000428:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	2205      	movs	r2, #5
 800042e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000436:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800043e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b084      	sub	sp, #16
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000460:	2b00      	cmp	r3, #0
 8000462:	d10d      	bne.n	8000480 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f000 f987 	bl	800077e <FT5336_DisableIT>
 8000470:	4602      	mov	r2, r0
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800048c:	68fb      	ldr	r3, [r7, #12]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d103      	bne.n	80004b4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 80004b4:	68fb      	ldr	r3, [r7, #12]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f103 0218 	add.w	r2, r3, #24
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	4619      	mov	r1, r3
 80004da:	4610      	mov	r0, r2
 80004dc:	f000 fa25 	bl	800092a <ft5336_radian_value>
 80004e0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f103 0218 	add.w	r2, r3, #24
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	4610      	mov	r0, r2
 80004f2:	f000 fa2b 	bl	800094c <ft5336_offset_left_right>
 80004f6:	4602      	mov	r2, r0
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f103 0218 	add.w	r2, r3, #24
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	4610      	mov	r0, r2
 800050e:	f000 fa2e 	bl	800096e <ft5336_offset_up_down>
 8000512:	4602      	mov	r2, r0
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4413      	add	r3, r2
 8000518:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f103 0218 	add.w	r2, r3, #24
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4619      	mov	r1, r3
 8000528:	4610      	mov	r0, r2
 800052a:	f000 fa31 	bl	8000990 <ft5336_disatnce_left_right>
 800052e:	4602      	mov	r2, r0
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f103 0218 	add.w	r2, r3, #24
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	4610      	mov	r0, r2
 8000546:	f000 fa34 	bl	80009b2 <ft5336_distance_up_down>
 800054a:	4602      	mov	r2, r0
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4413      	add	r3, r2
 8000550:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f103 0218 	add.w	r2, r3, #24
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	4610      	mov	r0, r2
 8000562:	f000 fa37 	bl	80009d4 <ft5336_distance_zoom>
 8000566:	4602      	mov	r2, r0
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4413      	add	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3318      	adds	r3, #24
 8000592:	6839      	ldr	r1, [r7, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fa3f 	bl	8000a18 <ft5336_chip_id>
 800059a:	4603      	mov	r3, r0
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f908 	bl	80007c8 <FT5336_DetectTouch>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f103 0018 	add.w	r0, r3, #24
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	2304      	movs	r3, #4
 80005cc:	2103      	movs	r1, #3
 80005ce:	f000 f94f 	bl	8000870 <ft5336_read_reg>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d003      	beq.n	80005e0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e00f      	b.n	8000600 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80005e0:	7a3b      	ldrb	r3, [r7, #8]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80005e8:	7a7a      	ldrb	r2, [r7, #9]
 80005ea:	431a      	orrs	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80005f0:	7abb      	ldrb	r3, [r7, #10]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80005f8:	7afa      	ldrb	r2, [r7, #11]
 80005fa:	431a      	orrs	r2, r3
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8000600:	68fb      	ldr	r3, [r7, #12]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b08c      	sub	sp, #48	@ 0x30
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f8d5 	bl	80007c8 <FT5336_DetectTouch>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f103 0018 	add.w	r0, r3, #24
 800062c:	f107 0208 	add.w	r2, r7, #8
 8000630:	231e      	movs	r3, #30
 8000632:	2103      	movs	r1, #3
 8000634:	f000 f91c 	bl	8000870 <ft5336_read_reg>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000644:	e077      	b.n	8000736 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800064a:	e071      	b.n	8000730 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800064c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	3330      	adds	r3, #48	@ 0x30
 8000658:	443b      	add	r3, r7
 800065a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8000664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	3301      	adds	r3, #1
 8000670:	3330      	adds	r3, #48	@ 0x30
 8000672:	443b      	add	r3, r7
 8000674:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000678:	ea41 0203 	orr.w	r2, r1, r3
 800067c:	6839      	ldr	r1, [r7, #0]
 800067e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	440b      	add	r3, r1
 8000684:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	3302      	adds	r3, #2
 8000692:	3330      	adds	r3, #48	@ 0x30
 8000694:	443b      	add	r3, r7
 8000696:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 80006a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006a2:	4613      	mov	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4413      	add	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	3303      	adds	r3, #3
 80006ac:	3330      	adds	r3, #48	@ 0x30
 80006ae:	443b      	add	r3, r7
 80006b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80006b4:	4319      	orrs	r1, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006ba:	3206      	adds	r2, #6
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80006c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	3330      	adds	r3, #48	@ 0x30
 80006cc:	443b      	add	r3, r7
 80006ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80006d2:	099b      	lsrs	r3, r3, #6
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4619      	mov	r1, r3
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006dc:	3210      	adds	r2, #16
 80006de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80006e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	3304      	adds	r3, #4
 80006ee:	3330      	adds	r3, #48	@ 0x30
 80006f0:	443b      	add	r3, r7
 80006f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80006f6:	4619      	mov	r1, r3
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006fc:	330a      	adds	r3, #10
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	3305      	adds	r3, #5
 8000710:	3330      	adds	r3, #48	@ 0x30
 8000712:	443b      	add	r3, r7
 8000714:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000718:	091b      	lsrs	r3, r3, #4
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000722:	3314      	adds	r3, #20
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800072a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800072c:	3301      	adds	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000732:	2b04      	cmp	r3, #4
 8000734:	d98a      	bls.n	800064c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8000736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000738:	4618      	mov	r0, r3
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3318      	adds	r3, #24
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f8bb 	bl	80008cc <ft5336_gest_id>
 8000756:	4603      	mov	r3, r0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3318      	adds	r3, #24
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f941 	bl	80009f6 <ft5336_g_mode>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3318      	adds	r3, #24
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f932 	bl	80009f6 <ft5336_g_mode>
 8000792:	4603      	mov	r3, r0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3318      	adds	r3, #24
 80007d4:	f107 020b 	add.w	r2, r7, #11
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f886 	bl	80008ec <ft5336_td_status>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d003      	beq.n	80007ee <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e007      	b.n	80007fe <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80007ee:	7afb      	ldrb	r3, [r7, #11]
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	d902      	bls.n	80007fa <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e001      	b.n	80007fe <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80007fa:	7afb      	ldrb	r3, [r7, #11]
 80007fc:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	461a      	mov	r2, r3
 8000814:	460b      	mov	r3, r1
 8000816:	72fb      	strb	r3, [r7, #11]
 8000818:	4613      	mov	r3, r2
 800081a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	691c      	ldr	r4, [r3, #16]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	8918      	ldrh	r0, [r3, #8]
 8000828:	7afb      	ldrb	r3, [r7, #11]
 800082a:	b299      	uxth	r1, r3
 800082c:	893b      	ldrh	r3, [r7, #8]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	47a0      	blx	r4
 8000832:	4603      	mov	r3, r0
}
 8000834:	4618      	mov	r0, r3
 8000836:	371c      	adds	r7, #28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd90      	pop	{r4, r7, pc}

0800083c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	68dc      	ldr	r4, [r3, #12]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	8918      	ldrh	r0, [r3, #8]
 800085c:	7afb      	ldrb	r3, [r7, #11]
 800085e:	b299      	uxth	r1, r3
 8000860:	893b      	ldrh	r3, [r7, #8]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	47a0      	blx	r4
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	371c      	adds	r7, #28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd90      	pop	{r4, r7, pc}

08000870 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	72fb      	strb	r3, [r7, #11]
 8000880:	4613      	mov	r3, r2
 8000882:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	685c      	ldr	r4, [r3, #4]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	6898      	ldr	r0, [r3, #8]
 800088c:	893b      	ldrh	r3, [r7, #8]
 800088e:	7af9      	ldrb	r1, [r7, #11]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	47a0      	blx	r4
 8000894:	4603      	mov	r3, r0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}

0800089e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800089e:	b590      	push	{r4, r7, lr}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	461a      	mov	r2, r3
 80008aa:	460b      	mov	r3, r1
 80008ac:	72fb      	strb	r3, [r7, #11]
 80008ae:	4613      	mov	r3, r2
 80008b0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681c      	ldr	r4, [r3, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	6898      	ldr	r0, [r3, #8]
 80008ba:	893b      	ldrh	r3, [r7, #8]
 80008bc:	7af9      	ldrb	r1, [r7, #11]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	47a0      	blx	r4
 80008c2:	4603      	mov	r3, r0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}

080008cc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80008d6:	2301      	movs	r3, #1
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	2101      	movs	r1, #1
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ffc7 	bl	8000870 <ft5336_read_reg>
 80008e2:	4603      	mov	r3, r0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80008f6:	2301      	movs	r3, #1
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	2102      	movs	r1, #2
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffb7 	bl	8000870 <ft5336_read_reg>
 8000902:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10a      	bne.n	8000920 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	b2da      	uxtb	r2, r3
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000920:	68fb      	ldr	r3, [r7, #12]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	460b      	mov	r3, r1
 8000934:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8000936:	1cfa      	adds	r2, r7, #3
 8000938:	2301      	movs	r3, #1
 800093a:	2191      	movs	r1, #145	@ 0x91
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ffae 	bl	800089e <ft5336_write_reg>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8000958:	1cfa      	adds	r2, r7, #3
 800095a:	2301      	movs	r3, #1
 800095c:	2192      	movs	r1, #146	@ 0x92
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ff9d 	bl	800089e <ft5336_write_reg>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	460b      	mov	r3, r1
 8000978:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800097a:	1cfa      	adds	r2, r7, #3
 800097c:	2301      	movs	r3, #1
 800097e:	2193      	movs	r1, #147	@ 0x93
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff8c 	bl	800089e <ft5336_write_reg>
 8000986:	4603      	mov	r3, r0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800099c:	1cfa      	adds	r2, r7, #3
 800099e:	2301      	movs	r3, #1
 80009a0:	2194      	movs	r1, #148	@ 0x94
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ff7b 	bl	800089e <ft5336_write_reg>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80009be:	1cfa      	adds	r2, r7, #3
 80009c0:	2301      	movs	r3, #1
 80009c2:	2195      	movs	r1, #149	@ 0x95
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff6a 	bl	800089e <ft5336_write_reg>
 80009ca:	4603      	mov	r3, r0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80009e0:	1cfa      	adds	r2, r7, #3
 80009e2:	2301      	movs	r3, #1
 80009e4:	2196      	movs	r1, #150	@ 0x96
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff59 	bl	800089e <ft5336_write_reg>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8000a02:	1cfa      	adds	r2, r7, #3
 8000a04:	2301      	movs	r3, #1
 8000a06:	21a4      	movs	r1, #164	@ 0xa4
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff48 	bl	800089e <ft5336_write_reg>
 8000a0e:	4603      	mov	r3, r0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8000a22:	2301      	movs	r3, #1
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	21a8      	movs	r1, #168	@ 0xa8
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff21 	bl	8000870 <ft5336_read_reg>
 8000a2e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d107      	bne.n	8000a46 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f832 	bl	8000ad0 <MT48LC4M32B2_ClockEnable>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d128      	bne.n	8000ac4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 f8e2 	bl	8000c3c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 f84a 	bl	8000b18 <MT48LC4M32B2_Precharge>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d11c      	bne.n	8000ac4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	461a      	mov	r2, r3
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f897 	bl	8000bc8 <MT48LC4M32B2_RefreshMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d111      	bne.n	8000ac4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8000aa0:	6839      	ldr	r1, [r7, #0]
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f85c 	bl	8000b60 <MT48LC4M32B2_ModeRegConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10a      	bne.n	8000ac4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f8ad 	bl	8000c14 <MT48LC4M32B2_RefreshRate>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MT48LC4M32B2_ClockEnable+0x44>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <MT48LC4M32B2_ClockEnable+0x44>)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MT48LC4M32B2_ClockEnable+0x44>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MT48LC4M32B2_ClockEnable+0x44>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000af2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000af6:	4907      	ldr	r1, [pc, #28]	@ (8000b14 <MT48LC4M32B2_ClockEnable+0x44>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f008 fbc7 	bl	800928c <HAL_SDRAM_SendCommand>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	e000      	b.n	8000b0c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000b0a:	2300      	movs	r3, #0
  }
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24000248 	.word	0x24000248

08000b18 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MT48LC4M32B2_Precharge+0x44>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000b28:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <MT48LC4M32B2_Precharge+0x44>)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MT48LC4M32B2_Precharge+0x44>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MT48LC4M32B2_Precharge+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000b3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b3e:	4907      	ldr	r1, [pc, #28]	@ (8000b5c <MT48LC4M32B2_Precharge+0x44>)
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f008 fba3 	bl	800928c <HAL_SDRAM_SendCommand>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	e000      	b.n	8000b54 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000b52:	2300      	movs	r3, #0
  }
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000248 	.word	0x24000248

08000b60 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000b72:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000b78:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000b7e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b94:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba6:	4907      	ldr	r1, [pc, #28]	@ (8000bc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f008 fb6f 	bl	800928c <HAL_SDRAM_SendCommand>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	e000      	b.n	8000bbc <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000bba:	2300      	movs	r3, #0
  }
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000248 	.word	0x24000248

08000bc8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <MT48LC4M32B2_RefreshMode+0x48>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000bda:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <MT48LC4M32B2_RefreshMode+0x48>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MT48LC4M32B2_RefreshMode+0x48>)
 8000be2:	2208      	movs	r2, #8
 8000be4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <MT48LC4M32B2_RefreshMode+0x48>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bf0:	4907      	ldr	r1, [pc, #28]	@ (8000c10 <MT48LC4M32B2_RefreshMode+0x48>)
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f008 fb4a 	bl	800928c <HAL_SDRAM_SendCommand>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e000      	b.n	8000c06 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000c04:	2300      	movs	r3, #0
  }
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	24000248 	.word	0x24000248

08000c14 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000c1e:	6839      	ldr	r1, [r7, #0]
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f008 fb68 	bl	80092f6 <HAL_SDRAM_ProgramRefreshRate>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	e000      	b.n	8000c34 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000c32:	2300      	movs	r3, #0
  }
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000c44:	f003 fa38 	bl	80040b8 <HAL_GetTick>
 8000c48:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000c4a:	bf00      	nop
 8000c4c:	f003 fa34 	bl	80040b8 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <main>:
uint8_t data_rx[6];



int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af02      	add	r7, sp, #8
	CPU_CACHE_Enable();
 8000c6e:	f000 fb03 	bl	8001278 <CPU_CACHE_Enable>
	HAL_Init();
 8000c72:	f003 f9d1 	bl	8004018 <HAL_Init>
	SystemClock_Config();
 8000c76:	f000 f9ff 	bl	8001078 <SystemClock_Config>
	MX_GPIO_Init();
 8000c7a:	f000 fa85 	bl	8001188 <MX_GPIO_Init>
	MX_I2C4_Init();
 8000c7e:	f000 fab3 	bl	80011e8 <MX_I2C4_Init>

	BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000c82:	2101      	movs	r1, #1
 8000c84:	2000      	movs	r0, #0
 8000c86:	f001 fda7 	bl	80027d8 <BSP_LCD_Init>
	UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000c8a:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <main+0x50>)
 8000c8c:	f000 fb62 	bl	8001354 <UTIL_LCD_SetFuncDriver>
	UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 fcac 	bl	80015f0 <UTIL_LCD_Clear>
	while (1)
	{
		getAirQ();
 8000c98:	f000 f8a0 	bl	8000ddc <getAirQ>
		getUV();
 8000c9c:	f000 f818 	bl	8000cd0 <getUV>
		getTempHumi();
 8000ca0:	f000 f936 	bl	8000f10 <getTempHumi>
		Touchscreen_demo(SendBuffer1,SendBuffer2,SendBuffer3,SendBuffer4,SendBuffer5);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <main+0x54>)
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <main+0x58>)
 8000caa:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <main+0x5c>)
 8000cac:	4906      	ldr	r1, [pc, #24]	@ (8000cc8 <main+0x60>)
 8000cae:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <main+0x64>)
 8000cb0:	f003 f8c0 	bl	8003e34 <Touchscreen_demo>
		getAirQ();
 8000cb4:	bf00      	nop
 8000cb6:	e7ef      	b.n	8000c98 <main+0x30>
 8000cb8:	0800ea60 	.word	0x0800ea60
 8000cbc:	2400037c 	.word	0x2400037c
 8000cc0:	24000348 	.word	0x24000348
 8000cc4:	24000314 	.word	0x24000314
 8000cc8:	240002e0 	.word	0x240002e0
 8000ccc:	240002ac 	.word	0x240002ac

08000cd0 <getUV>:
	}
}



void getUV(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af02      	add	r7, sp, #8
	#define VEML6070_ADDR_CMD 0x38 <<1
	#define VEML6070_ADDR_DATA_LSB 0x38 << 1
	#define VEML6070_ADDR_DATA_MSB 0x39 << 1
	#define VEML6070_CMD 0x0C

	uint8_t cmd = VEML6070_CMD;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	717b      	strb	r3, [r7, #5]
	uint8_t msb;
	uint8_t lsb;
	uint8_t data;

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c4, VEML6070_ADDR_DATA_MSB, Trials, Timeout);
 8000cda:	4b35      	ldr	r3, [pc, #212]	@ (8000db0 <getUV+0xe0>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b35      	ldr	r3, [pc, #212]	@ (8000db4 <getUV+0xe4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2172      	movs	r1, #114	@ 0x72
 8000ce4:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <getUV+0xe8>)
 8000ce6:	f004 fdd9 	bl	800589c <HAL_I2C_IsDeviceReady>
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK){
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <getUV+0x30>
		snprintf(SendBuffer4, sizeof(SendBuffer4), "Device not ready");
 8000cf4:	4a31      	ldr	r2, [pc, #196]	@ (8000dbc <getUV+0xec>)
 8000cf6:	2132      	movs	r1, #50	@ 0x32
 8000cf8:	4831      	ldr	r0, [pc, #196]	@ (8000dc0 <getUV+0xf0>)
 8000cfa:	f009 fd47 	bl	800a78c <sniprintf>
	 				}
	 			}
	 		}
	 	}
	}
}
 8000cfe:	e052      	b.n	8000da6 <getUV+0xd6>
		ret = HAL_I2C_Master_Transmit(&hi2c4, VEML6070_ADDR_CMD, (uint8_t*)&cmd, 1, 1000);
 8000d00:	1d7a      	adds	r2, r7, #5
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	2170      	movs	r1, #112	@ 0x70
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <getUV+0xe8>)
 8000d0e:	f004 f9ad 	bl	800506c <HAL_I2C_Master_Transmit>
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(300);
 8000d16:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d1a:	f003 f9d9 	bl	80040d0 <HAL_Delay>
	 	if ( ret != HAL_OK ) {
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <getUV+0x60>
	 		snprintf(SendBuffer4, sizeof(SendBuffer4), "Test Not Sent");
 8000d24:	4a27      	ldr	r2, [pc, #156]	@ (8000dc4 <getUV+0xf4>)
 8000d26:	2132      	movs	r1, #50	@ 0x32
 8000d28:	4825      	ldr	r0, [pc, #148]	@ (8000dc0 <getUV+0xf0>)
 8000d2a:	f009 fd2f 	bl	800a78c <sniprintf>
}
 8000d2e:	e03a      	b.n	8000da6 <getUV+0xd6>
	 		ret = HAL_I2C_Master_Receive(&hi2c4, VEML6070_ADDR_DATA_MSB,(uint8_t*)&msb, 1, 1000);
 8000d30:	1d3a      	adds	r2, r7, #4
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2172      	movs	r1, #114	@ 0x72
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <getUV+0xe8>)
 8000d3e:	f004 fa89 	bl	8005254 <HAL_I2C_Master_Receive>
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	 		if (ret != HAL_OK){
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d005      	beq.n	8000d58 <getUV+0x88>
	 			snprintf(SendBuffer4, sizeof(SendBuffer4), "MSB missing");
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc8 <getUV+0xf8>)
 8000d4e:	2132      	movs	r1, #50	@ 0x32
 8000d50:	481b      	ldr	r0, [pc, #108]	@ (8000dc0 <getUV+0xf0>)
 8000d52:	f009 fd1b 	bl	800a78c <sniprintf>
}
 8000d56:	e026      	b.n	8000da6 <getUV+0xd6>
	 			ret = HAL_I2C_Master_Receive(&hi2c4, VEML6070_ADDR_DATA_LSB,(uint8_t*)&lsb, 1, 1000);
 8000d58:	1cfa      	adds	r2, r7, #3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2301      	movs	r3, #1
 8000d62:	2170      	movs	r1, #112	@ 0x70
 8000d64:	4814      	ldr	r0, [pc, #80]	@ (8000db8 <getUV+0xe8>)
 8000d66:	f004 fa75 	bl	8005254 <HAL_I2C_Master_Receive>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	 			if (ret != HAL_OK){
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <getUV+0xb0>
	 				snprintf(SendBuffer4, sizeof(SendBuffer4), "LSB missing");
 8000d74:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <getUV+0xfc>)
 8000d76:	2132      	movs	r1, #50	@ 0x32
 8000d78:	4811      	ldr	r0, [pc, #68]	@ (8000dc0 <getUV+0xf0>)
 8000d7a:	f009 fd07 	bl	800a78c <sniprintf>
}
 8000d7e:	e012      	b.n	8000da6 <getUV+0xd6>
	 				data = (msb << 8) | lsb;
 8000d80:	793b      	ldrb	r3, [r7, #4]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	b25a      	sxtb	r2, r3
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	71bb      	strb	r3, [r7, #6]
	 				snprintf(SendBuffer4, sizeof(SendBuffer4), "Amount of Light: %u", data);
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <getUV+0x100>)
 8000d94:	2132      	movs	r1, #50	@ 0x32
 8000d96:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <getUV+0xf0>)
 8000d98:	f009 fcf8 	bl	800a78c <sniprintf>
	 					snprintf(SendBuffer5, sizeof(SendBuffer5), "UV Index : LOW (0-2)");
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <getUV+0x104>)
 8000d9e:	2132      	movs	r1, #50	@ 0x32
 8000da0:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <getUV+0x108>)
 8000da2:	f009 fcf3 	bl	800a78c <sniprintf>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000030 	.word	0x24000030
 8000db4:	24000034 	.word	0x24000034
 8000db8:	24000258 	.word	0x24000258
 8000dbc:	0800c950 	.word	0x0800c950
 8000dc0:	24000348 	.word	0x24000348
 8000dc4:	0800c964 	.word	0x0800c964
 8000dc8:	0800c974 	.word	0x0800c974
 8000dcc:	0800c980 	.word	0x0800c980
 8000dd0:	0800c98c 	.word	0x0800c98c
 8000dd4:	0800c9a0 	.word	0x0800c9a0
 8000dd8:	2400037c 	.word	0x2400037c

08000ddc <getAirQ>:


void getAirQ(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8

	#define SGP40_ADDRESS 0x59 << 1
	 uint8_t data_rx[3];
	 uint8_t test[2] = {0x28,0x0E};
 8000de2:	f640 6328 	movw	r3, #3624	@ 0xe28
 8000de6:	813b      	strh	r3, [r7, #8]
	 uint8_t data_tx[8] = {0x26,0x0F,0x80,0x00,0xA2,0x66,0x66,0x93};
 8000de8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee4 <getAirQ+0x108>)
 8000dea:	463b      	mov	r3, r7
 8000dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df0:	e883 0003 	stmia.w	r3, {r0, r1}

	 HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c4, SGP40_ADDRESS, Trials, Timeout);
 8000df4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee8 <getAirQ+0x10c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b3c      	ldr	r3, [pc, #240]	@ (8000eec <getAirQ+0x110>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	21b2      	movs	r1, #178	@ 0xb2
 8000dfe:	483c      	ldr	r0, [pc, #240]	@ (8000ef0 <getAirQ+0x114>)
 8000e00:	f004 fd4c 	bl	800589c <HAL_I2C_IsDeviceReady>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
	 if (ret != HAL_OK){
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <getAirQ+0x3e>
		 snprintf(SendBuffer3, sizeof(SendBuffer3), "Device not ready");
 8000e0e:	4a39      	ldr	r2, [pc, #228]	@ (8000ef4 <getAirQ+0x118>)
 8000e10:	2132      	movs	r1, #50	@ 0x32
 8000e12:	4839      	ldr	r0, [pc, #228]	@ (8000ef8 <getAirQ+0x11c>)
 8000e14:	f009 fcba 	bl	800a78c <sniprintf>
					 }
				 }
			 }
		 }
	 }
 }
 8000e18:	e060      	b.n	8000edc <getAirQ+0x100>
		 ret = HAL_I2C_Master_Transmit(&hi2c4, SGP40_ADDRESS, test, 2, 1000);
 8000e1a:	f107 0208 	add.w	r2, r7, #8
 8000e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2302      	movs	r3, #2
 8000e26:	21b2      	movs	r1, #178	@ 0xb2
 8000e28:	4831      	ldr	r0, [pc, #196]	@ (8000ef0 <getAirQ+0x114>)
 8000e2a:	f004 f91f 	bl	800506c <HAL_I2C_Master_Transmit>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
		 if ( ret != HAL_OK ) {
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <getAirQ+0x68>
			 snprintf(SendBuffer3, sizeof(SendBuffer3), "Test Not Sent");
 8000e38:	4a30      	ldr	r2, [pc, #192]	@ (8000efc <getAirQ+0x120>)
 8000e3a:	2132      	movs	r1, #50	@ 0x32
 8000e3c:	482e      	ldr	r0, [pc, #184]	@ (8000ef8 <getAirQ+0x11c>)
 8000e3e:	f009 fca5 	bl	800a78c <sniprintf>
 }
 8000e42:	e04b      	b.n	8000edc <getAirQ+0x100>
			 HAL_Delay(300);
 8000e44:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e48:	f003 f942 	bl	80040d0 <HAL_Delay>
			 ret = HAL_I2C_Master_Receive(&hi2c4, SGP40_ADDRESS,(uint8_t*)&data_rx, 3, 1000);
 8000e4c:	f107 020c 	add.w	r2, r7, #12
 8000e50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2303      	movs	r3, #3
 8000e58:	21b2      	movs	r1, #178	@ 0xb2
 8000e5a:	4825      	ldr	r0, [pc, #148]	@ (8000ef0 <getAirQ+0x114>)
 8000e5c:	f004 f9fa 	bl	8005254 <HAL_I2C_Master_Receive>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
			 if (ret != HAL_OK){
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d005      	beq.n	8000e76 <getAirQ+0x9a>
				 snprintf(SendBuffer3, sizeof(SendBuffer3), "Test fail");
 8000e6a:	4a25      	ldr	r2, [pc, #148]	@ (8000f00 <getAirQ+0x124>)
 8000e6c:	2132      	movs	r1, #50	@ 0x32
 8000e6e:	4822      	ldr	r0, [pc, #136]	@ (8000ef8 <getAirQ+0x11c>)
 8000e70:	f009 fc8c 	bl	800a78c <sniprintf>
 }
 8000e74:	e032      	b.n	8000edc <getAirQ+0x100>
				 ret = HAL_I2C_Master_Transmit(&hi2c4, SGP40_ADDRESS, data_tx, 8, 1000);
 8000e76:	463a      	mov	r2, r7
 8000e78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2308      	movs	r3, #8
 8000e80:	21b2      	movs	r1, #178	@ 0xb2
 8000e82:	481b      	ldr	r0, [pc, #108]	@ (8000ef0 <getAirQ+0x114>)
 8000e84:	f004 f8f2 	bl	800506c <HAL_I2C_Master_Transmit>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
				 if ( ret != HAL_OK ) {
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <getAirQ+0xc2>
					 snprintf(SendBuffer3, sizeof(SendBuffer3), "Data Not Sent");
 8000e92:	4a1c      	ldr	r2, [pc, #112]	@ (8000f04 <getAirQ+0x128>)
 8000e94:	2132      	movs	r1, #50	@ 0x32
 8000e96:	4818      	ldr	r0, [pc, #96]	@ (8000ef8 <getAirQ+0x11c>)
 8000e98:	f009 fc78 	bl	800a78c <sniprintf>
 }
 8000e9c:	e01e      	b.n	8000edc <getAirQ+0x100>
					 HAL_Delay(300);
 8000e9e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ea2:	f003 f915 	bl	80040d0 <HAL_Delay>
					 ret = HAL_I2C_Master_Receive(&hi2c4, SGP40_ADDRESS,(uint8_t*)&data_rx, 3, 1000);
 8000ea6:	f107 020c 	add.w	r2, r7, #12
 8000eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	21b2      	movs	r1, #178	@ 0xb2
 8000eb4:	480e      	ldr	r0, [pc, #56]	@ (8000ef0 <getAirQ+0x114>)
 8000eb6:	f004 f9cd 	bl	8005254 <HAL_I2C_Master_Receive>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
					 if (ret != HAL_OK){
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <getAirQ+0xf4>
						 snprintf(SendBuffer3, sizeof(SendBuffer3), "Data not received");
 8000ec4:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <getAirQ+0x12c>)
 8000ec6:	2132      	movs	r1, #50	@ 0x32
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <getAirQ+0x11c>)
 8000eca:	f009 fc5f 	bl	800a78c <sniprintf>
 }
 8000ece:	e005      	b.n	8000edc <getAirQ+0x100>
						 snprintf(SendBuffer3, sizeof(SendBuffer3),"Air Quality(from 0 to 500): %u", data_rx[2]);
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <getAirQ+0x130>)
 8000ed4:	2132      	movs	r1, #50	@ 0x32
 8000ed6:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <getAirQ+0x11c>)
 8000ed8:	f009 fc58 	bl	800a78c <sniprintf>
 }
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0800ca08 	.word	0x0800ca08
 8000ee8:	24000030 	.word	0x24000030
 8000eec:	24000034 	.word	0x24000034
 8000ef0:	24000258 	.word	0x24000258
 8000ef4:	0800c950 	.word	0x0800c950
 8000ef8:	24000314 	.word	0x24000314
 8000efc:	0800c964 	.word	0x0800c964
 8000f00:	0800c9b8 	.word	0x0800c9b8
 8000f04:	0800c9c4 	.word	0x0800c9c4
 8000f08:	0800c9d4 	.word	0x0800c9d4
 8000f0c:	0800c9e8 	.word	0x0800c9e8

08000f10 <getTempHumi>:

 void getTempHumi(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af02      	add	r7, sp, #8

	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c4, SHT40_ADDRESS, Trials, Timeout);
 8000f16:	4b48      	ldr	r3, [pc, #288]	@ (8001038 <getTempHumi+0x128>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b48      	ldr	r3, [pc, #288]	@ (800103c <getTempHumi+0x12c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2188      	movs	r1, #136	@ 0x88
 8000f20:	4847      	ldr	r0, [pc, #284]	@ (8001040 <getTempHumi+0x130>)
 8000f22:	f004 fcbb 	bl	800589c <HAL_I2C_IsDeviceReady>
 8000f26:	4603      	mov	r3, r0
 8000f28:	75fb      	strb	r3, [r7, #23]
	  if (ret != HAL_OK)
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <getTempHumi+0x2c>
	  {
	      snprintf(SendBuffer1, sizeof(SendBuffer1), "Device not ready");
 8000f30:	4a44      	ldr	r2, [pc, #272]	@ (8001044 <getTempHumi+0x134>)
 8000f32:	2132      	movs	r1, #50	@ 0x32
 8000f34:	4844      	ldr	r0, [pc, #272]	@ (8001048 <getTempHumi+0x138>)
 8000f36:	f009 fc29 	bl	800a78c <sniprintf>
					 snprintf(SendBuffer1, sizeof(SendBuffer1), "Temperature: %f",t_degC);
					 snprintf(SendBuffer2, sizeof(SendBuffer2), "Relative Humidity: %f",rh_pRH);
				 }
			}
	  }
}
 8000f3a:	e078      	b.n	800102e <getTempHumi+0x11e>
		  	ret = HAL_I2C_Master_Transmit(&hi2c4, SHT40_ADDRESS, data_tx, 1, 1000);
 8000f3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	4a41      	ldr	r2, [pc, #260]	@ (800104c <getTempHumi+0x13c>)
 8000f46:	2188      	movs	r1, #136	@ 0x88
 8000f48:	483d      	ldr	r0, [pc, #244]	@ (8001040 <getTempHumi+0x130>)
 8000f4a:	f004 f88f 	bl	800506c <HAL_I2C_Master_Transmit>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	75fb      	strb	r3, [r7, #23]
			if ( ret != HAL_OK ) {
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <getTempHumi+0x54>
				snprintf(SendBuffer1, sizeof(SendBuffer1), "Data not transmitted");
 8000f58:	4a3d      	ldr	r2, [pc, #244]	@ (8001050 <getTempHumi+0x140>)
 8000f5a:	2132      	movs	r1, #50	@ 0x32
 8000f5c:	483a      	ldr	r0, [pc, #232]	@ (8001048 <getTempHumi+0x138>)
 8000f5e:	f009 fc15 	bl	800a78c <sniprintf>
}
 8000f62:	e064      	b.n	800102e <getTempHumi+0x11e>
				 HAL_Delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f003 f8b3 	bl	80040d0 <HAL_Delay>
				 ret =  HAL_I2C_Master_Receive(&hi2c4, SHT40_ADDRESS, (uint8_t*)&data_rx, 6,1000);
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2306      	movs	r3, #6
 8000f72:	4a38      	ldr	r2, [pc, #224]	@ (8001054 <getTempHumi+0x144>)
 8000f74:	2188      	movs	r1, #136	@ 0x88
 8000f76:	4832      	ldr	r0, [pc, #200]	@ (8001040 <getTempHumi+0x130>)
 8000f78:	f004 f96c 	bl	8005254 <HAL_I2C_Master_Receive>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]
				 if ( ret != HAL_OK ) {
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <getTempHumi+0x82>
					 snprintf(SendBuffer1, sizeof(SendBuffer1), "Data not received");
 8000f86:	4a34      	ldr	r2, [pc, #208]	@ (8001058 <getTempHumi+0x148>)
 8000f88:	2132      	movs	r1, #50	@ 0x32
 8000f8a:	482f      	ldr	r0, [pc, #188]	@ (8001048 <getTempHumi+0x138>)
 8000f8c:	f009 fbfe 	bl	800a78c <sniprintf>
}
 8000f90:	e04d      	b.n	800102e <getTempHumi+0x11e>
					 float t_ticks = data_rx[0] * 256 + data_rx[1];
 8000f92:	4b30      	ldr	r3, [pc, #192]	@ (8001054 <getTempHumi+0x144>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	4a2e      	ldr	r2, [pc, #184]	@ (8001054 <getTempHumi+0x144>)
 8000f9a:	7852      	ldrb	r2, [r2, #1]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa6:	edc7 7a04 	vstr	s15, [r7, #16]
					 float rh_ticks = data_rx[3] * 256 + data_rx[4];
 8000faa:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <getTempHumi+0x144>)
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	4a28      	ldr	r2, [pc, #160]	@ (8001054 <getTempHumi+0x144>)
 8000fb2:	7912      	ldrb	r2, [r2, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	edc7 7a03 	vstr	s15, [r7, #12]
					 float t_degC = -45 + 175 * t_ticks/65535;
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800105c <getTempHumi+0x14c>
 8000fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fce:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001060 <getTempHumi+0x150>
 8000fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001064 <getTempHumi+0x154>
 8000fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fde:	edc7 7a02 	vstr	s15, [r7, #8]
					 float rh_pRH = -6 + 125 * rh_ticks/65535;
 8000fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fe6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001068 <getTempHumi+0x158>
 8000fea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fee:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001060 <getTempHumi+0x150>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8000ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ffe:	edc7 7a01 	vstr	s15, [r7, #4]
					 snprintf(SendBuffer1, sizeof(SendBuffer1), "Temperature: %f",t_degC);
 8001002:	edd7 7a02 	vldr	s15, [r7, #8]
 8001006:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100a:	ed8d 7b00 	vstr	d7, [sp]
 800100e:	4a17      	ldr	r2, [pc, #92]	@ (800106c <getTempHumi+0x15c>)
 8001010:	2132      	movs	r1, #50	@ 0x32
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <getTempHumi+0x138>)
 8001014:	f009 fbba 	bl	800a78c <sniprintf>
					 snprintf(SendBuffer2, sizeof(SendBuffer2), "Relative Humidity: %f",rh_pRH);
 8001018:	edd7 7a01 	vldr	s15, [r7, #4]
 800101c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001020:	ed8d 7b00 	vstr	d7, [sp]
 8001024:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <getTempHumi+0x160>)
 8001026:	2132      	movs	r1, #50	@ 0x32
 8001028:	4812      	ldr	r0, [pc, #72]	@ (8001074 <getTempHumi+0x164>)
 800102a:	f009 fbaf 	bl	800a78c <sniprintf>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	24000030 	.word	0x24000030
 800103c:	24000034 	.word	0x24000034
 8001040:	24000258 	.word	0x24000258
 8001044:	0800c950 	.word	0x0800c950
 8001048:	240002ac 	.word	0x240002ac
 800104c:	24000038 	.word	0x24000038
 8001050:	0800ca10 	.word	0x0800ca10
 8001054:	240003b0 	.word	0x240003b0
 8001058:	0800c9d4 	.word	0x0800c9d4
 800105c:	432f0000 	.word	0x432f0000
 8001060:	477fff00 	.word	0x477fff00
 8001064:	42340000 	.word	0x42340000
 8001068:	42fa0000 	.word	0x42fa0000
 800106c:	0800ca28 	.word	0x0800ca28
 8001070:	0800ca38 	.word	0x0800ca38
 8001074:	240002e0 	.word	0x240002e0

08001078 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b09e      	sub	sp, #120	@ 0x78
 800107c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001084:	2002      	movs	r0, #2
 8001086:	f005 fceb 	bl	8006a60 <HAL_PWREx_ConfigSupply>

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b3b      	ldr	r3, [pc, #236]	@ (800117c <SystemClock_Config+0x104>)
 8001090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001092:	4a3a      	ldr	r2, [pc, #232]	@ (800117c <SystemClock_Config+0x104>)
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800109a:	4b38      	ldr	r3, [pc, #224]	@ (800117c <SystemClock_Config+0x104>)
 800109c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <SystemClock_Config+0x108>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <SystemClock_Config+0x108>)
 80010aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b33      	ldr	r3, [pc, #204]	@ (8001180 <SystemClock_Config+0x108>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010bc:	bf00      	nop
 80010be:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <SystemClock_Config+0x108>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010ca:	d1f8      	bne.n	80010be <SystemClock_Config+0x46>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	2302      	movs	r3, #2
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = 5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80010ea:	23a0      	movs	r3, #160	@ 0xa0
 80010ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010fa:	2304      	movs	r3, #4
 80010fc:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010fe:	2300      	movs	r3, #0
 8001100:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001102:	2308      	movs	r3, #8
 8001104:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4618      	mov	r0, r3
 800110c:	f005 fce2 	bl	8006ad4 <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8001116:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800111e:	f000 f8a3 	bl	8001268 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001122:	233f      	movs	r3, #63	@ 0x3f
 8001124:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2303      	movs	r3, #3
 8001128:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800112e:	2308      	movs	r3, #8
 8001130:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001132:	2340      	movs	r3, #64	@ 0x40
 8001134:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001136:	2340      	movs	r3, #64	@ 0x40
 8001138:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800113a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001140:	2340      	movs	r3, #64	@ 0x40
 8001142:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001144:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f006 f91c 	bl	8007388 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8001156:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800115e:	f000 f883 	bl	8001268 <Error_Handler>
  }

  __HAL_RCC_CSI_ENABLE() ;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <SystemClock_Config+0x10c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <SystemClock_Config+0x10c>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116c:	6013      	str	r3, [r2, #0]

  HAL_EnableCompensationCell();
 800116e:	f002 ffdf 	bl	8004130 <HAL_EnableCompensationCell>
}
 8001172:	bf00      	nop
 8001174:	3778      	adds	r7, #120	@ 0x78
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	58000400 	.word	0x58000400
 8001180:	58024800 	.word	0x58024800
 8001184:	58024400 	.word	0x58024400

08001188 <MX_GPIO_Init>:


void MX_GPIO_Init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <MX_GPIO_Init+0x58>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <MX_GPIO_Init+0x58>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_GPIO_Init+0x58>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80011ba:	23c0      	movs	r3, #192	@ 0xc0
 80011bc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011be:	2312      	movs	r3, #18
 80011c0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011ca:	2304      	movs	r3, #4
 80011cc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_GPIO_Init+0x5c>)
 80011d4:	f003 fba2 	bl	800491c <HAL_GPIO_Init>
}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020400 	.word	0x58020400

080011e8 <MX_I2C4_Init>:

void MX_I2C4_Init(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	hi2c4.Instance = I2C4;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_I2C4_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <MX_I2C4_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
	    hi2c4.Init.Timing = 0x10909CEC;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_I2C4_Init+0x74>)
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <MX_I2C4_Init+0x7c>)
 80011f6:	605a      	str	r2, [r3, #4]
	    hi2c4.Init.OwnAddress1 = 0;
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <MX_I2C4_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
	    hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_I2C4_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	60da      	str	r2, [r3, #12]
	    hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_I2C4_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
	    hi2c4.Init.OwnAddress2 = 0;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_I2C4_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
	    hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_I2C4_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
	    hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_I2C4_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
	    hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_I2C4_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8001222:	480e      	ldr	r0, [pc, #56]	@ (800125c <MX_I2C4_Init+0x74>)
 8001224:	f003 fe4e 	bl	8004ec4 <HAL_I2C_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C4_Init+0x4a>
        Error_Handler();
 800122e:	f000 f81b 	bl	8001268 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	@ (800125c <MX_I2C4_Init+0x74>)
 8001236:	f004 ff8d 	bl	8006154 <HAL_I2CEx_ConfigAnalogFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C4_Init+0x5c>
        Error_Handler();
 8001240:	f000 f812 	bl	8001268 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8001244:	2100      	movs	r1, #0
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_I2C4_Init+0x74>)
 8001248:	f004 ffcf 	bl	80061ea <HAL_I2CEx_ConfigDigitalFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_I2C4_Init+0x6e>
        Error_Handler();
 8001252:	f000 f809 	bl	8001268 <Error_Handler>
    }
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24000258 	.word	0x24000258
 8001260:	58001c00 	.word	0x58001c00
 8001264:	10909cec 	.word	0x10909cec

08001268 <Error_Handler>:

void Error_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  BSP_LED_On(LED_RED);
 800126c:	2001      	movs	r0, #1
 800126e:	f000 fe2d 	bl	8001ecc <BSP_LED_On>
  while(1)
 8001272:	bf00      	nop
 8001274:	e7fd      	b.n	8001272 <Error_Handler+0xa>
	...

08001278 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800127e:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11b      	bne.n	80012c2 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800128a:	f3bf 8f4f 	dsb	sy
}
 800128e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001290:	f3bf 8f6f 	isb	sy
}
 8001294:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001296:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 8001298:	2200      	movs	r2, #0
 800129a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800129e:	f3bf 8f4f 	dsb	sy
}
 80012a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012a4:	f3bf 8f6f 	isb	sy
}
 80012a8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a28      	ldr	r2, [pc, #160]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012b6:	f3bf 8f4f 	dsb	sy
}
 80012ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012bc:	f3bf 8f6f 	isb	sy
}
 80012c0:	e000      	b.n	80012c4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012c2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d138      	bne.n	8001342 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012d8:	f3bf 8f4f 	dsb	sy
}
 80012dc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 80012e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012e4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	0b5b      	lsrs	r3, r3, #13
 80012ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012ee:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012f8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001302:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001308:	4911      	ldr	r1, [pc, #68]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 800130a:	4313      	orrs	r3, r2
 800130c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ef      	bne.n	80012fa <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e5      	bne.n	80012f0 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001324:	f3bf 8f4f 	dsb	sy
}
 8001328:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <CPU_CACHE_Enable+0xd8>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001334:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001336:	f3bf 8f4f 	dsb	sy
}
 800133a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800133c:	f3bf 8f6f 	isb	sy
}
 8001340:	e000      	b.n	8001344 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001342:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 8001362:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a20      	ldr	r2, [pc, #128]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 800136a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 8001372:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 800137a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	4a1a      	ldr	r2, [pc, #104]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 8001382:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 800138a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 8001392:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 800139a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 80013a2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	4a10      	ldr	r2, [pc, #64]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 80013aa:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 80013b2:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <UTIL_LCD_SetFuncDriver+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <UTIL_LCD_SetFuncDriver+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	4a0b      	ldr	r2, [pc, #44]	@ (80013f4 <UTIL_LCD_SetFuncDriver+0xa0>)
 80013c6:	4611      	mov	r1, r2
 80013c8:	2000      	movs	r0, #0
 80013ca:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <UTIL_LCD_SetFuncDriver+0xa4>)
 80013d2:	4611      	mov	r1, r2
 80013d4:	2000      	movs	r0, #0
 80013d6:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <UTIL_LCD_SetFuncDriver+0x98>)
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <UTIL_LCD_SetFuncDriver+0xa8>)
 80013de:	4611      	mov	r1, r2
 80013e0:	2000      	movs	r0, #0
 80013e2:	4798      	blx	r3
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	240003f8 	.word	0x240003f8
 80013f0:	240003b8 	.word	0x240003b8
 80013f4:	240003cc 	.word	0x240003cc
 80013f8:	240003d0 	.word	0x240003d0
 80013fc:	240003d4 	.word	0x240003d4

08001400 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <UTIL_LCD_SetTextColor+0x24>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <UTIL_LCD_SetTextColor+0x24>)
 800140e:	015b      	lsls	r3, r3, #5
 8001410:	4413      	add	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	240003b8 	.word	0x240003b8

08001428 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <UTIL_LCD_SetBackColor+0x24>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a05      	ldr	r2, [pc, #20]	@ (800144c <UTIL_LCD_SetBackColor+0x24>)
 8001436:	015b      	lsls	r3, r3, #5
 8001438:	4413      	add	r3, r2
 800143a:	3304      	adds	r3, #4
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	240003b8 	.word	0x240003b8

08001450 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <UTIL_LCD_SetFont+0x24>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <UTIL_LCD_SetFont+0x24>)
 800145e:	015b      	lsls	r3, r3, #5
 8001460:	4413      	add	r3, r2
 8001462:	3308      	adds	r3, #8
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	601a      	str	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	240003b8 	.word	0x240003b8

08001478 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b087      	sub	sp, #28
 800147c:	af02      	add	r7, sp, #8
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <UTIL_LCD_FillRGBRect+0x30>)
 8001488:	685c      	ldr	r4, [r3, #4]
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <UTIL_LCD_FillRGBRect+0x34>)
 800148c:	6918      	ldr	r0, [r3, #16]
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	68f9      	ldr	r1, [r7, #12]
 800149c:	47a0      	blx	r4
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	240003f8 	.word	0x240003f8
 80014ac:	240003b8 	.word	0x240003b8

080014b0 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <UTIL_LCD_DrawHLine+0x64>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d118      	bne.n	80014f8 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <UTIL_LCD_DrawHLine+0x68>)
 80014c8:	689c      	ldr	r4, [r3, #8]
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <UTIL_LCD_DrawHLine+0x64>)
 80014cc:	6918      	ldr	r0, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	f003 021f 	and.w	r2, r3, #31
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	0a9b      	lsrs	r3, r3, #10
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80014e0:	431a      	orrs	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	0cdb      	lsrs	r3, r3, #19
 80014e6:	02db      	lsls	r3, r3, #11
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80014f6:	e009      	b.n	800150c <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <UTIL_LCD_DrawHLine+0x68>)
 80014fa:	689c      	ldr	r4, [r3, #8]
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <UTIL_LCD_DrawHLine+0x64>)
 80014fe:	6918      	ldr	r0, [r3, #16]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	47a0      	blx	r4
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	240003b8 	.word	0x240003b8
 8001518:	240003f8 	.word	0x240003f8

0800151c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b087      	sub	sp, #28
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <UTIL_LCD_DrawVLine+0x64>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d118      	bne.n	8001564 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <UTIL_LCD_DrawVLine+0x68>)
 8001534:	68dc      	ldr	r4, [r3, #12]
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <UTIL_LCD_DrawVLine+0x64>)
 8001538:	6918      	ldr	r0, [r3, #16]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f003 021f 	and.w	r2, r3, #31
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	0a9b      	lsrs	r3, r3, #10
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800154c:	431a      	orrs	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	0cdb      	lsrs	r3, r3, #19
 8001552:	02db      	lsls	r3, r3, #11
 8001554:	b29b      	uxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	68f9      	ldr	r1, [r7, #12]
 8001560:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001562:	e009      	b.n	8001578 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <UTIL_LCD_DrawVLine+0x68>)
 8001566:	68dc      	ldr	r4, [r3, #12]
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <UTIL_LCD_DrawVLine+0x64>)
 800156a:	6918      	ldr	r0, [r3, #16]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	68f9      	ldr	r1, [r7, #12]
 8001576:	47a0      	blx	r4
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	240003b8 	.word	0x240003b8
 8001584:	240003f8 	.word	0x240003f8

08001588 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	603a      	str	r2, [r7, #0]
 8001592:	80fb      	strh	r3, [r7, #6]
 8001594:	460b      	mov	r3, r1
 8001596:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <UTIL_LCD_SetPixel+0x60>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d117      	bne.n	80015d0 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <UTIL_LCD_SetPixel+0x64>)
 80015a2:	699c      	ldr	r4, [r3, #24]
 80015a4:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <UTIL_LCD_SetPixel+0x60>)
 80015a6:	6918      	ldr	r0, [r3, #16]
 80015a8:	88f9      	ldrh	r1, [r7, #6]
 80015aa:	88bd      	ldrh	r5, [r7, #4]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	0a9b      	lsrs	r3, r3, #10
 80015b8:	015b      	lsls	r3, r3, #5
 80015ba:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80015be:	431a      	orrs	r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	0cdb      	lsrs	r3, r3, #19
 80015c4:	02db      	lsls	r3, r3, #11
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	462a      	mov	r2, r5
 80015cc:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 80015ce:	e007      	b.n	80015e0 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <UTIL_LCD_SetPixel+0x64>)
 80015d2:	699c      	ldr	r4, [r3, #24]
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <UTIL_LCD_SetPixel+0x60>)
 80015d6:	6918      	ldr	r0, [r3, #16]
 80015d8:	88f9      	ldrh	r1, [r7, #6]
 80015da:	88ba      	ldrh	r2, [r7, #4]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	47a0      	blx	r4
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bdb0      	pop	{r4, r5, r7, pc}
 80015e8:	240003b8 	.word	0x240003b8
 80015ec:	240003f8 	.word	0x240003f8

080015f0 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <UTIL_LCD_Clear+0x28>)
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <UTIL_LCD_Clear+0x28>)
 80015fe:	6999      	ldr	r1, [r3, #24]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	460b      	mov	r3, r1
 8001606:	2100      	movs	r1, #0
 8001608:	2000      	movs	r0, #0
 800160a:	f000 fa1f 	bl	8001a4c <UTIL_LCD_FillRect>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240003b8 	.word	0x240003b8

0800161c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	4613      	mov	r3, r2
 8001628:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <UTIL_LCD_DisplayChar+0x68>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a15      	ldr	r2, [pc, #84]	@ (8001684 <UTIL_LCD_DisplayChar+0x68>)
 8001630:	015b      	lsls	r3, r3, #5
 8001632:	4413      	add	r3, r2
 8001634:	3308      	adds	r3, #8
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800163e:	4911      	ldr	r1, [pc, #68]	@ (8001684 <UTIL_LCD_DisplayChar+0x68>)
 8001640:	68c9      	ldr	r1, [r1, #12]
 8001642:	4810      	ldr	r0, [pc, #64]	@ (8001684 <UTIL_LCD_DisplayChar+0x68>)
 8001644:	0149      	lsls	r1, r1, #5
 8001646:	4401      	add	r1, r0
 8001648:	3108      	adds	r1, #8
 800164a:	6809      	ldr	r1, [r1, #0]
 800164c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800164e:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <UTIL_LCD_DisplayChar+0x68>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	480b      	ldr	r0, [pc, #44]	@ (8001684 <UTIL_LCD_DisplayChar+0x68>)
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	4403      	add	r3, r0
 800165c:	3308      	adds	r3, #8
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	889b      	ldrh	r3, [r3, #4]
 8001662:	3307      	adds	r3, #7
 8001664:	2b00      	cmp	r3, #0
 8001666:	da00      	bge.n	800166a <UTIL_LCD_DisplayChar+0x4e>
 8001668:	3307      	adds	r3, #7
 800166a:	10db      	asrs	r3, r3, #3
 800166c:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001670:	4413      	add	r3, r2
 8001672:	461a      	mov	r2, r3
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 face 	bl	8001c18 <DrawChar>
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	240003b8 	.word	0x240003b8

08001688 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001696:	2301      	movs	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80016aa:	e002      	b.n	80016b2 <UTIL_LCD_DisplayStringAt+0x2a>
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	61ba      	str	r2, [r7, #24]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f6      	bne.n	80016ac <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80016be:	4b48      	ldr	r3, [pc, #288]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a47      	ldr	r2, [pc, #284]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 80016c4:	68d2      	ldr	r2, [r2, #12]
 80016c6:	4946      	ldr	r1, [pc, #280]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 80016c8:	0152      	lsls	r2, r2, #5
 80016ca:	440a      	add	r2, r1
 80016cc:	3208      	adds	r2, #8
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	8892      	ldrh	r2, [r2, #4]
 80016d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  switch (Mode)
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d018      	beq.n	8001710 <UTIL_LCD_DisplayStringAt+0x88>
 80016de:	2b03      	cmp	r3, #3
 80016e0:	dc2a      	bgt.n	8001738 <UTIL_LCD_DisplayStringAt+0xb0>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d002      	beq.n	80016ec <UTIL_LCD_DisplayStringAt+0x64>
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d015      	beq.n	8001716 <UTIL_LCD_DisplayStringAt+0x8e>
 80016ea:	e025      	b.n	8001738 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	4a3b      	ldr	r2, [pc, #236]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 80016f4:	68d2      	ldr	r2, [r2, #12]
 80016f6:	493a      	ldr	r1, [pc, #232]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 80016f8:	0152      	lsls	r2, r2, #5
 80016fa:	440a      	add	r2, r1
 80016fc:	3208      	adds	r2, #8
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	8892      	ldrh	r2, [r2, #4]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800170e:	e016      	b.n	800173e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001714:	e013      	b.n	800173e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4a30      	ldr	r2, [pc, #192]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 800171e:	68d2      	ldr	r2, [r2, #12]
 8001720:	492f      	ldr	r1, [pc, #188]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001722:	0152      	lsls	r2, r2, #5
 8001724:	440a      	add	r2, r1
 8001726:	3208      	adds	r2, #8
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	8892      	ldrh	r2, [r2, #4]
 800172c:	fb03 f202 	mul.w	r2, r3, r2
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001736:	e002      	b.n	800173e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800173c:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <UTIL_LCD_DisplayStringAt+0xc4>
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800174a:	d31b      	bcc.n	8001784 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001750:	e018      	b.n	8001784 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800175c:	f7ff ff5e 	bl	800161c <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001766:	015b      	lsls	r3, r3, #5
 8001768:	4413      	add	r3, r2
 800176a:	3308      	adds	r3, #8
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	889b      	ldrh	r3, [r3, #4]
 8001770:	461a      	mov	r2, r3
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	4413      	add	r3, r2
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
    i++;
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	3301      	adds	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001794:	6959      	ldr	r1, [r3, #20]
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4811      	ldr	r0, [pc, #68]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 800179c:	015b      	lsls	r3, r3, #5
 800179e:	4403      	add	r3, r0
 80017a0:	3308      	adds	r3, #8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	889b      	ldrh	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	fb00 f303 	mul.w	r3, r0, r3
 80017ae:	1acb      	subs	r3, r1, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	490b      	ldr	r1, [pc, #44]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 80017b4:	68c9      	ldr	r1, [r1, #12]
 80017b6:	480a      	ldr	r0, [pc, #40]	@ (80017e0 <UTIL_LCD_DisplayStringAt+0x158>)
 80017b8:	0149      	lsls	r1, r1, #5
 80017ba:	4401      	add	r1, r0
 80017bc:	3108      	adds	r1, #8
 80017be:	6809      	ldr	r1, [r1, #0]
 80017c0:	8889      	ldrh	r1, [r1, #4]
 80017c2:	428b      	cmp	r3, r1
 80017c4:	bf2c      	ite	cs
 80017c6:	2301      	movcs	r3, #1
 80017c8:	2300      	movcc	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1be      	bne.n	8001752 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	240003b8 	.word	0x240003b8

080017e4 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fe59 	bl	80014b0 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	1e59      	subs	r1, r3, #1
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff fe50 	bl	80014b0 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fe80 	bl	800151c <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	f7ff fe77 	bl	800151c <UTIL_LCD_DrawVLine>
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	f1c3 0303 	rsb	r3, r3, #3
 800184e:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001858:	e0eb      	b.n	8001a32 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	1ad2      	subs	r2, r2, r3
 8001860:	4b79      	ldr	r3, [pc, #484]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	429a      	cmp	r2, r3
 8001866:	d22d      	bcs.n	80018c4 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	441a      	add	r2, r3
 800186e:	4b76      	ldr	r3, [pc, #472]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	429a      	cmp	r2, r3
 8001874:	d20f      	bcs.n	8001896 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	b29a      	uxth	r2, r3
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	b29b      	uxth	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b298      	uxth	r0, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	b29a      	uxth	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	b29b      	uxth	r3, r3
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff fe79 	bl	8001588 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	1ad2      	subs	r2, r2, r3
 800189c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d20f      	bcs.n	80018c4 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b298      	uxth	r0, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff fe62 	bl	8001588 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad2      	subs	r2, r2, r3
 80018ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d22d      	bcs.n	800192e <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	441a      	add	r2, r3
 80018d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d20f      	bcs.n	8001900 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b298      	uxth	r0, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff fe44 	bl	8001588 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	4b50      	ldr	r3, [pc, #320]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	429a      	cmp	r2, r3
 800190c:	d20f      	bcs.n	800192e <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	b29a      	uxth	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	b29b      	uxth	r3, r3
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b298      	uxth	r0, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	b29a      	uxth	r2, r3
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	b29b      	uxth	r3, r3
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	b29b      	uxth	r3, r3
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff fe2d 	bl	8001588 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	441a      	add	r2, r3
 8001934:	4b44      	ldr	r3, [pc, #272]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	429a      	cmp	r2, r3
 800193a:	d22d      	bcs.n	8001998 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	441a      	add	r2, r3
 8001942:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	429a      	cmp	r2, r3
 8001948:	d20f      	bcs.n	800196a <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	b29a      	uxth	r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b298      	uxth	r0, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	b29a      	uxth	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff fe0f 	bl	8001588 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad2      	subs	r2, r2, r3
 8001970:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	d20f      	bcs.n	8001998 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b298      	uxth	r0, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	b29a      	uxth	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4413      	add	r3, r2
 800198e:	b29b      	uxth	r3, r3
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff fdf8 	bl	8001588 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	441a      	add	r2, r3
 800199e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d22d      	bcs.n	8001a02 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	441a      	add	r2, r3
 80019ac:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d20f      	bcs.n	80019d4 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b298      	uxth	r0, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff fdda 	bl	8001588 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	1ad2      	subs	r2, r2, r3
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <UTIL_LCD_DrawCircle+0x210>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d20f      	bcs.n	8001a02 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	b298      	uxth	r0, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff fdc3 	bl	8001588 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da06      	bge.n	8001a16 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	009a      	lsls	r2, r3, #2
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
 8001a10:	3306      	adds	r3, #6
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	e00a      	b.n	8001a2c <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	009a      	lsls	r2, r3, #2
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	330a      	adds	r3, #10
 8001a24:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	f67f af0f 	bls.w	800185a <UTIL_LCD_DrawCircle+0x22>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	240003b8 	.word	0x240003b8

08001a4c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <UTIL_LCD_FillRect+0x6c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d11a      	bne.n	8001a98 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <UTIL_LCD_FillRect+0x70>)
 8001a64:	691c      	ldr	r4, [r3, #16]
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <UTIL_LCD_FillRect+0x6c>)
 8001a68:	6918      	ldr	r0, [r3, #16]
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	f003 021f 	and.w	r2, r3, #31
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	0a9b      	lsrs	r3, r3, #10
 8001a76:	015b      	lsls	r3, r3, #5
 8001a78:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	0cdb      	lsrs	r3, r3, #19
 8001a82:	02db      	lsls	r3, r3, #11
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001a96:	e00b      	b.n	8001ab0 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <UTIL_LCD_FillRect+0x70>)
 8001a9a:	691c      	ldr	r4, [r3, #16]
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <UTIL_LCD_FillRect+0x6c>)
 8001a9e:	6918      	ldr	r0, [r3, #16]
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	47a0      	blx	r4
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}
 8001ab8:	240003b8 	.word	0x240003b8
 8001abc:	240003f8 	.word	0x240003f8

08001ac0 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	f1c3 0303 	rsb	r3, r3, #3
 8001ad6:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001ae0:	e08b      	b.n	8001bfa <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d036      	beq.n	8001b56 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d31c      	bcc.n	8001b2a <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	18d0      	adds	r0, r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005a      	lsls	r2, r3, #1
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	1acb      	subs	r3, r1, r3
 8001b00:	441a      	add	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4601      	mov	r1, r0
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fcd2 	bl	80014b0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad0      	subs	r0, r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005a      	lsls	r2, r3, #1
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1acb      	subs	r3, r1, r3
 8001b1c:	441a      	add	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	4601      	mov	r1, r0
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fcc4 	bl	80014b0 <UTIL_LCD_DrawHLine>
 8001b28:	e015      	b.n	8001b56 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1ad0      	subs	r0, r2, r3
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	18d1      	adds	r1, r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005a      	lsls	r2, r3, #1
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f7ff fcb8 	bl	80014b0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1ad0      	subs	r0, r2, r3
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad1      	subs	r1, r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005a      	lsls	r2, r3, #1
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f7ff fcad 	bl	80014b0 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d036      	beq.n	8001bca <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d31c      	bcc.n	8001b9e <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	1ad0      	subs	r0, r2, r3
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	005a      	lsls	r2, r3, #1
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	441a      	add	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4601      	mov	r1, r0
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fc98 	bl	80014b0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	18d0      	adds	r0, r2, r3
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	005a      	lsls	r2, r3, #1
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1acb      	subs	r3, r1, r3
 8001b90:	441a      	add	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	4601      	mov	r1, r0
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fc8a 	bl	80014b0 <UTIL_LCD_DrawHLine>
 8001b9c:	e015      	b.n	8001bca <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad0      	subs	r0, r2, r3
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	1ad1      	subs	r1, r2, r3
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	005a      	lsls	r2, r3, #1
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f7ff fc7e 	bl	80014b0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad0      	subs	r0, r2, r3
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	18d1      	adds	r1, r2, r3
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	005a      	lsls	r2, r3, #1
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f7ff fc73 	bl	80014b0 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da06      	bge.n	8001bde <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	009a      	lsls	r2, r3, #2
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3306      	adds	r3, #6
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	e00a      	b.n	8001bf4 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	009a      	lsls	r2, r3, #2
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	330a      	adds	r3, #10
 8001bec:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	f67f af6f 	bls.w	8001ae2 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f7ff fe14 	bl	8001838 <UTIL_LCD_DrawCircle>
}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b2      	sub	sp, #200	@ 0xc8
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001c30:	4ba5      	ldr	r3, [pc, #660]	@ (8001ec8 <DrawChar+0x2b0>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4aa4      	ldr	r2, [pc, #656]	@ (8001ec8 <DrawChar+0x2b0>)
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	4413      	add	r3, r2
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	88db      	ldrh	r3, [r3, #6]
 8001c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001c44:	4ba0      	ldr	r3, [pc, #640]	@ (8001ec8 <DrawChar+0x2b0>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a9f      	ldr	r2, [pc, #636]	@ (8001ec8 <DrawChar+0x2b0>)
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3308      	adds	r3, #8
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	889b      	ldrh	r3, [r3, #4]
 8001c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8001c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c5c:	3307      	adds	r3, #7
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001c72:	e11c      	b.n	8001eae <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8001c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c78:	3307      	adds	r3, #7
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8001c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c90:	3307      	adds	r3, #7
 8001c92:	08db      	lsrs	r3, r3, #3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <DrawChar+0x86>
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d006      	beq.n	8001caa <DrawChar+0x92>
 8001c9c:	e011      	b.n	8001cc2 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8001c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8001ca8:	e01d      	b.n	8001ce6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001caa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001cb6:	3201      	adds	r2, #1
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8001cc0:	e011      	b.n	8001ce6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cce:	3301      	adds	r3, #1
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001cda:	3202      	adds	r2, #2
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8001ce4:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001ce6:	4b78      	ldr	r3, [pc, #480]	@ (8001ec8 <DrawChar+0x2b0>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4a77      	ldr	r2, [pc, #476]	@ (8001ec8 <DrawChar+0x2b0>)
 8001cec:	015b      	lsls	r3, r3, #5
 8001cee:	4413      	add	r3, r2
 8001cf0:	331c      	adds	r3, #28
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	f040 808c 	bne.w	8001e12 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d00:	e074      	b.n	8001dec <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001d02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001d06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d0a:	1ad2      	subs	r2, r2, r3
 8001d0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d10:	4413      	add	r3, r2
 8001d12:	3b01      	subs	r3, #1
 8001d14:	2201      	movs	r2, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d02d      	beq.n	8001d82 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8001d26:	4b68      	ldr	r3, [pc, #416]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4a67      	ldr	r2, [pc, #412]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d2c:	015b      	lsls	r3, r3, #5
 8001d2e:	4413      	add	r3, r2
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b62      	ldr	r3, [pc, #392]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4961      	ldr	r1, [pc, #388]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d42:	015b      	lsls	r3, r3, #5
 8001d44:	440b      	add	r3, r1
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0a9b      	lsrs	r3, r3, #10
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	015b      	lsls	r3, r3, #5
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	495a      	ldr	r1, [pc, #360]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d60:	015b      	lsls	r3, r3, #5
 8001d62:	440b      	add	r3, r1
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0cdb      	lsrs	r3, r3, #19
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	02db      	lsls	r3, r3, #11
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	33c0      	adds	r3, #192	@ 0xc0
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8001d80:	e02f      	b.n	8001de2 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8001d82:	4b51      	ldr	r3, [pc, #324]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	4a50      	ldr	r2, [pc, #320]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d88:	015b      	lsls	r3, r3, #5
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec8 <DrawChar+0x2b0>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	494a      	ldr	r1, [pc, #296]	@ (8001ec8 <DrawChar+0x2b0>)
 8001da0:	015b      	lsls	r3, r3, #5
 8001da2:	440b      	add	r3, r1
 8001da4:	3304      	adds	r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0a9b      	lsrs	r3, r3, #10
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	4b43      	ldr	r3, [pc, #268]	@ (8001ec8 <DrawChar+0x2b0>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4942      	ldr	r1, [pc, #264]	@ (8001ec8 <DrawChar+0x2b0>)
 8001dc0:	015b      	lsls	r3, r3, #5
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0cdb      	lsrs	r3, r3, #19
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	02db      	lsls	r3, r3, #11
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	33c0      	adds	r3, #192	@ 0xc0
 8001ddc:	443b      	add	r3, r7
 8001dde:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8001de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001de6:	3301      	adds	r3, #1
 8001de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001dec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d384      	bcc.n	8001d02 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	1c4b      	adds	r3, r1, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff fb34 	bl	8001478 <UTIL_LCD_FillRGBRect>
 8001e10:	e048      	b.n	8001ea4 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e18:	e032      	b.n	8001e80 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001e1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e22:	1ad2      	subs	r2, r2, r3
 8001e24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001e3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <DrawChar+0x2b0>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4a21      	ldr	r2, [pc, #132]	@ (8001ec8 <DrawChar+0x2b0>)
 8001e44:	015b      	lsls	r3, r3, #5
 8001e46:	4413      	add	r3, r2
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	33c0      	adds	r3, #192	@ 0xc0
 8001e52:	443b      	add	r3, r7
 8001e54:	f843 2cac 	str.w	r2, [r3, #-172]
 8001e58:	e00d      	b.n	8001e76 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <DrawChar+0x2b0>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec8 <DrawChar+0x2b0>)
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	33c0      	adds	r3, #192	@ 0xc0
 8001e70:	443b      	add	r3, r7
 8001e72:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8001e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3c6      	bcc.n	8001e1a <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	1c4b      	adds	r3, r1, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	f107 0214 	add.w	r2, r7, #20
 8001e96:	2301      	movs	r3, #1
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff faea 	bl	8001478 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001ea4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001eae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001eb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	f4ff aedc 	bcc.w	8001c74 <DrawChar+0x5c>
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	37c0      	adds	r7, #192	@ 0xc0
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	240003b8 	.word	0x240003b8

08001ecc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4a08      	ldr	r2, [pc, #32]	@ (8001f00 <BSP_LED_On+0x34>)
 8001ede:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <BSP_LED_On+0x38>)
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f002 ffce 	bl	8004e90 <HAL_GPIO_WritePin>
  return ret;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2400004c 	.word	0x2400004c
 8001f04:	0800e9d4 	.word	0x0800e9d4

08001f08 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <BSP_PB_IRQHandler+0x20>)
 8001f18:	4413      	add	r3, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fcce 	bl	80048bc <HAL_EXTI_IRQHandler>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	24000424 	.word	0x24000424

08001f2c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8001f36:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <BSP_I2C4_Init+0x64>)
 8001f38:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <BSP_I2C4_Init+0x68>)
 8001f3a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <BSP_I2C4_Init+0x6c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d11f      	bne.n	8001f84 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8001f44:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <BSP_I2C4_Init+0x6c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a13      	ldr	r2, [pc, #76]	@ (8001f98 <BSP_I2C4_Init+0x6c>)
 8001f4c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8001f4e:	4810      	ldr	r0, [pc, #64]	@ (8001f90 <BSP_I2C4_Init+0x64>)
 8001f50:	f003 fdac 	bl	8005aac <HAL_I2C_GetState>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d114      	bne.n	8001f84 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8001f5a:	480d      	ldr	r0, [pc, #52]	@ (8001f90 <BSP_I2C4_Init+0x64>)
 8001f5c:	f000 fb60 	bl	8002620 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8001f60:	f005 fd88 	bl	8007a74 <HAL_RCC_GetPCLK2Freq>
 8001f64:	4603      	mov	r3, r0
 8001f66:	490d      	ldr	r1, [pc, #52]	@ (8001f9c <BSP_I2C4_Init+0x70>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f8e3 	bl	8002134 <I2C_GetTiming>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4619      	mov	r1, r3
 8001f72:	4807      	ldr	r0, [pc, #28]	@ (8001f90 <BSP_I2C4_Init+0x64>)
 8001f74:	f000 f838 	bl	8001fe8 <MX_I2C4_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001f7e:	f06f 0307 	mvn.w	r3, #7
 8001f82:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	24000e34 	.word	0x24000e34
 8001f94:	58001c00 	.word	0x58001c00
 8001f98:	2400042c 	.word	0x2400042c
 8001f9c:	00061a80 	.word	0x00061a80

08001fa0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <BSP_I2C4_DeInit+0x40>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <BSP_I2C4_DeInit+0x40>)
 8001fb2:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <BSP_I2C4_DeInit+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8001fbc:	4809      	ldr	r0, [pc, #36]	@ (8001fe4 <BSP_I2C4_DeInit+0x44>)
 8001fbe:	f000 fb9b 	bl	80026f8 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8001fc2:	4808      	ldr	r0, [pc, #32]	@ (8001fe4 <BSP_I2C4_DeInit+0x44>)
 8001fc4:	f003 f80e 	bl	8004fe4 <HAL_I2C_DeInit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001fce:	f06f 0307 	mvn.w	r3, #7
 8001fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2400042c 	.word	0x2400042c
 8001fe4:	24000e34 	.word	0x24000e34

08001fe8 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f002 ff4c 	bl	8004ec4 <HAL_I2C_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	e014      	b.n	8002062 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f004 f888 	bl	8006154 <HAL_I2CEx_ConfigAnalogFilter>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e008      	b.n	8002062 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002050:	2100      	movs	r1, #0
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f004 f8c9 	bl	80061ea <HAL_I2CEx_ConfigDigitalFilter>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af02      	add	r7, sp, #8
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	81fb      	strh	r3, [r7, #14]
 800207a:	460b      	mov	r3, r1
 800207c:	81bb      	strh	r3, [r7, #12]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002082:	89b9      	ldrh	r1, [r7, #12]
 8002084:	89f8      	ldrh	r0, [r7, #14]
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2201      	movs	r2, #1
 800208e:	f000 fb57 	bl	8002740 <I2C4_WriteReg>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e00c      	b.n	80020b8 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800209e:	4809      	ldr	r0, [pc, #36]	@ (80020c4 <BSP_I2C4_WriteReg+0x58>)
 80020a0:	f003 fd12 	bl	8005ac8 <HAL_I2C_GetError>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d103      	bne.n	80020b2 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020aa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e002      	b.n	80020b8 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80020b2:	f06f 0303 	mvn.w	r3, #3
 80020b6:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80020b8:	697b      	ldr	r3, [r7, #20]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	24000e34 	.word	0x24000e34

080020c8 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	81fb      	strh	r3, [r7, #14]
 80020d6:	460b      	mov	r3, r1
 80020d8:	81bb      	strh	r3, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80020de:	89b9      	ldrh	r1, [r7, #12]
 80020e0:	89f8      	ldrh	r0, [r7, #14]
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f000 fb4f 	bl	800278c <I2C4_ReadReg>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e00c      	b.n	8002114 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80020fa:	4809      	ldr	r0, [pc, #36]	@ (8002120 <BSP_I2C4_ReadReg+0x58>)
 80020fc:	f003 fce4 	bl	8005ac8 <HAL_I2C_GetError>
 8002100:	4603      	mov	r3, r0
 8002102:	2b04      	cmp	r3, #4
 8002104:	d103      	bne.n	800210e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002106:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e002      	b.n	8002114 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800210e:	f06f 0303 	mvn.w	r3, #3
 8002112:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002114:	697b      	ldr	r3, [r7, #20]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	24000e34 	.word	0x24000e34

08002124 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002128:	f001 ffc6 	bl	80040b8 <HAL_GetTick>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d06b      	beq.n	8002220 <I2C_GetTiming+0xec>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d068      	beq.n	8002220 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e060      	b.n	8002216 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002154:	4a35      	ldr	r2, [pc, #212]	@ (800222c <I2C_GetTiming+0xf8>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	212c      	movs	r1, #44	@ 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d352      	bcc.n	8002210 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800216a:	4a30      	ldr	r2, [pc, #192]	@ (800222c <I2C_GetTiming+0xf8>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	212c      	movs	r1, #44	@ 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3308      	adds	r3, #8
 8002178:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d847      	bhi.n	8002210 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002180:	6939      	ldr	r1, [r7, #16]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f856 	bl	8002234 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002188:	6939      	ldr	r1, [r7, #16]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f940 	bl	8002410 <I2C_Compute_SCLL_SCLH>
 8002190:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b7f      	cmp	r3, #127	@ 0x7f
 8002196:	d842      	bhi.n	800221e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002198:	4925      	ldr	r1, [pc, #148]	@ (8002230 <I2C_GetTiming+0xfc>)
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80021aa:	4821      	ldr	r0, [pc, #132]	@ (8002230 <I2C_GetTiming+0xfc>)
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4403      	add	r3, r0
 80021b8:	3304      	adds	r3, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80021c2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80021c4:	481a      	ldr	r0, [pc, #104]	@ (8002230 <I2C_GetTiming+0xfc>)
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4403      	add	r3, r0
 80021d2:	3308      	adds	r3, #8
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80021dc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80021de:	4814      	ldr	r0, [pc, #80]	@ (8002230 <I2C_GetTiming+0xfc>)
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4403      	add	r3, r0
 80021ec:	330c      	adds	r3, #12
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80021f4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80021f6:	480e      	ldr	r0, [pc, #56]	@ (8002230 <I2C_GetTiming+0xfc>)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4403      	add	r3, r0
 8002204:	3310      	adds	r3, #16
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800220a:	430b      	orrs	r3, r1
 800220c:	617b      	str	r3, [r7, #20]
        }
        break;
 800220e:	e006      	b.n	800221e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	3301      	adds	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d99b      	bls.n	8002154 <I2C_GetTiming+0x20>
 800221c:	e000      	b.n	8002220 <I2C_GetTiming+0xec>
        break;
 800221e:	bf00      	nop
      }
    }
  }

  return ret;
 8002220:	697b      	ldr	r3, [r7, #20]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	0800e9dc 	.word	0x0800e9dc
 8002230:	24000430 	.word	0x24000430

08002234 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002234:	b480      	push	{r7}
 8002236:	b08f      	sub	sp, #60	@ 0x3c
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800223e:	2310      	movs	r3, #16
 8002240:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	085a      	lsrs	r2, r3, #1
 8002246:	4b6e      	ldr	r3, [pc, #440]	@ (8002400 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002248:	4413      	add	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002250:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002252:	2332      	movs	r3, #50	@ 0x32
 8002254:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002256:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800225a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800225c:	4a69      	ldr	r2, [pc, #420]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	212c      	movs	r1, #44	@ 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3324      	adds	r3, #36	@ 0x24
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	4a65      	ldr	r2, [pc, #404]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	212c      	movs	r1, #44	@ 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	330c      	adds	r3, #12
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002280:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002282:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002284:	495f      	ldr	r1, [pc, #380]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	202c      	movs	r0, #44	@ 0x2c
 800228a:	fb00 f303 	mul.w	r3, r0, r3
 800228e:	440b      	add	r3, r1
 8002290:	3328      	adds	r3, #40	@ 0x28
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3303      	adds	r3, #3
 8002296:	69f9      	ldr	r1, [r7, #28]
 8002298:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80022a0:	4a58      	ldr	r2, [pc, #352]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	212c      	movs	r1, #44	@ 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3310      	adds	r3, #16
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	4a54      	ldr	r2, [pc, #336]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	212c      	movs	r1, #44	@ 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3320      	adds	r3, #32
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80022c4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80022c6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80022c8:	494e      	ldr	r1, [pc, #312]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	202c      	movs	r0, #44	@ 0x2c
 80022ce:	fb00 f303 	mul.w	r3, r0, r3
 80022d2:	440b      	add	r3, r1
 80022d4:	3328      	adds	r3, #40	@ 0x28
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3304      	adds	r3, #4
 80022da:	69f9      	ldr	r1, [r7, #28]
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80022e4:	4a47      	ldr	r2, [pc, #284]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	212c      	movs	r1, #44	@ 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3320      	adds	r3, #32
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	4a43      	ldr	r2, [pc, #268]	@ (8002404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	212c      	movs	r1, #44	@ 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3314      	adds	r3, #20
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4403      	add	r3, r0
 8002308:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230c:	2b00      	cmp	r3, #0
 800230e:	dc01      	bgt.n	8002314 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8002314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002316:	2b00      	cmp	r3, #0
 8002318:	dc01      	bgt.n	800231e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002322:	e062      	b.n	80023ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
 8002328:	e059      	b.n	80023de <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	3301      	adds	r3, #1
 800232e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002330:	3201      	adds	r2, #1
 8002332:	fb03 f202 	mul.w	r2, r3, r2
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fb02 f303 	mul.w	r3, r2, r3
 800233c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	429a      	cmp	r2, r3
 8002344:	d348      	bcc.n	80023d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	e042      	b.n	80023d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800234c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234e:	3301      	adds	r3, #1
 8002350:	6a3a      	ldr	r2, [r7, #32]
 8002352:	fb03 f202 	mul.w	r2, r3, r2
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d332      	bcc.n	80023cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	d82e      	bhi.n	80023cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800236e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002372:	429a      	cmp	r2, r3
 8002374:	d02a      	beq.n	80023cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002376:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4924      	ldr	r1, [pc, #144]	@ (800240c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002388:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	491f      	ldr	r1, [pc, #124]	@ (800240c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3304      	adds	r3, #4
 800239c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4919      	ldr	r1, [pc, #100]	@ (800240c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3308      	adds	r3, #8
 80023b2:	6a3a      	ldr	r2, [r7, #32]
 80023b4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	4a11      	ldr	r2, [pc, #68]	@ (8002408 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80023c2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80023c4:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ca:	d812      	bhi.n	80023f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	3301      	adds	r3, #1
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d9b9      	bls.n	800234c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	3301      	adds	r3, #1
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d9a2      	bls.n	800232a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80023e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e6:	3301      	adds	r3, #1
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d999      	bls.n	8002324 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80023f0:	e000      	b.n	80023f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80023f2:	bf00      	nop
          }
        }
      }
    }
  }
}
 80023f4:	373c      	adds	r7, #60	@ 0x3c
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	3b9aca00 	.word	0x3b9aca00
 8002404:	0800e9dc 	.word	0x0800e9dc
 8002408:	24000e30 	.word	0x24000e30
 800240c:	24000430 	.word	0x24000430

08002410 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002410:	b480      	push	{r7}
 8002412:	b093      	sub	sp, #76	@ 0x4c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	085a      	lsrs	r2, r3, #1
 8002424:	4b7a      	ldr	r3, [pc, #488]	@ (8002610 <I2C_Compute_SCLL_SCLH+0x200>)
 8002426:	4413      	add	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	fbb3 f3f2 	udiv	r3, r3, r2
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002430:	4a78      	ldr	r2, [pc, #480]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	212c      	movs	r1, #44	@ 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	085a      	lsrs	r2, r3, #1
 8002440:	4b73      	ldr	r3, [pc, #460]	@ (8002610 <I2C_Compute_SCLL_SCLH+0x200>)
 8002442:	4413      	add	r3, r2
 8002444:	4973      	ldr	r1, [pc, #460]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	202c      	movs	r0, #44	@ 0x2c
 800244a:	fb00 f202 	mul.w	r2, r0, r2
 800244e:	440a      	add	r2, r1
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	fbb3 f3f2 	udiv	r3, r3, r2
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002458:	2332      	movs	r3, #50	@ 0x32
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800245c:	4a6d      	ldr	r2, [pc, #436]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	212c      	movs	r1, #44	@ 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3328      	adds	r3, #40	@ 0x28
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002474:	4a67      	ldr	r2, [pc, #412]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	212c      	movs	r1, #44	@ 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a62      	ldr	r2, [pc, #392]	@ (8002610 <I2C_Compute_SCLL_SCLH+0x200>)
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800248c:	4a61      	ldr	r2, [pc, #388]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	212c      	movs	r1, #44	@ 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3308      	adds	r3, #8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a5c      	ldr	r2, [pc, #368]	@ (8002610 <I2C_Compute_SCLL_SCLH+0x200>)
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ac:	e0a3      	b.n	80025f6 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80024ae:	495a      	ldr	r1, [pc, #360]	@ (8002618 <I2C_Compute_SCLL_SCLH+0x208>)
 80024b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024cc:	e08c      	b.n	80025e8 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80024ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	441a      	add	r2, r3
 80024d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d6:	3301      	adds	r3, #1
 80024d8:	6979      	ldr	r1, [r7, #20]
 80024da:	fb03 f101 	mul.w	r1, r3, r1
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	440b      	add	r3, r1
 80024e4:	4413      	add	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80024e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	212c      	movs	r1, #44	@ 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3318      	adds	r3, #24
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d971      	bls.n	80025e2 <I2C_Compute_SCLL_SCLH+0x1d2>
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800250c:	429a      	cmp	r2, r3
 800250e:	d268      	bcs.n	80025e2 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002510:	2300      	movs	r3, #0
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002514:	e062      	b.n	80025dc <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	441a      	add	r2, r3
 800251c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251e:	3301      	adds	r3, #1
 8002520:	6979      	ldr	r1, [r7, #20]
 8002522:	fb03 f101 	mul.w	r1, r3, r1
 8002526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	440b      	add	r3, r1
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	441a      	add	r2, r3
 8002536:	4937      	ldr	r1, [pc, #220]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	202c      	movs	r0, #44	@ 0x2c
 800253c:	fb00 f303 	mul.w	r3, r0, r3
 8002540:	440b      	add	r3, r1
 8002542:	3320      	adds	r3, #32
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	441a      	add	r2, r3
 8002548:	4932      	ldr	r1, [pc, #200]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	202c      	movs	r0, #44	@ 0x2c
 800254e:	fb00 f303 	mul.w	r3, r0, r3
 8002552:	440b      	add	r3, r1
 8002554:	3324      	adds	r3, #36	@ 0x24
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4413      	add	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	429a      	cmp	r2, r3
 8002562:	d338      	bcc.n	80025d6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	429a      	cmp	r2, r3
 800256a:	d834      	bhi.n	80025d6 <I2C_Compute_SCLL_SCLH+0x1c6>
 800256c:	4a29      	ldr	r2, [pc, #164]	@ (8002614 <I2C_Compute_SCLL_SCLH+0x204>)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	212c      	movs	r1, #44	@ 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	331c      	adds	r3, #28
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d329      	bcc.n	80025d6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	429a      	cmp	r2, r3
 8002588:	d225      	bcs.n	80025d6 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	2b00      	cmp	r3, #0
 8002596:	da02      	bge.n	800259e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259a:	425b      	negs	r3, r3
 800259c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d917      	bls.n	80025d6 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 80025aa:	491b      	ldr	r1, [pc, #108]	@ (8002618 <I2C_Compute_SCLL_SCLH+0x208>)
 80025ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3310      	adds	r3, #16
 80025ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025bc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80025be:	4916      	ldr	r1, [pc, #88]	@ (8002618 <I2C_Compute_SCLL_SCLH+0x208>)
 80025c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	330c      	adds	r3, #12
 80025ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025d0:	601a      	str	r2, [r3, #0]
              ret = count;
 80025d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d4:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	3301      	adds	r3, #1
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025de:	2bff      	cmp	r3, #255	@ 0xff
 80025e0:	d999      	bls.n	8002516 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80025e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e4:	3301      	adds	r3, #1
 80025e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ea:	2bff      	cmp	r3, #255	@ 0xff
 80025ec:	f67f af6f 	bls.w	80024ce <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80025f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f2:	3301      	adds	r3, #1
 80025f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <I2C_Compute_SCLL_SCLH+0x20c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f4ff af56 	bcc.w	80024ae <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002604:	4618      	mov	r0, r3
 8002606:	374c      	adds	r7, #76	@ 0x4c
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	3b9aca00 	.word	0x3b9aca00
 8002614:	0800e9dc 	.word	0x0800e9dc
 8002618:	24000430 	.word	0x24000430
 800261c:	24000e30 	.word	0x24000e30

08002620 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002628:	4b31      	ldr	r3, [pc, #196]	@ (80026f0 <I2C4_MspInit+0xd0>)
 800262a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262e:	4a30      	ldr	r2, [pc, #192]	@ (80026f0 <I2C4_MspInit+0xd0>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002638:	4b2d      	ldr	r3, [pc, #180]	@ (80026f0 <I2C4_MspInit+0xd0>)
 800263a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002646:	4b2a      	ldr	r3, [pc, #168]	@ (80026f0 <I2C4_MspInit+0xd0>)
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800264c:	4a28      	ldr	r2, [pc, #160]	@ (80026f0 <I2C4_MspInit+0xd0>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002656:	4b26      	ldr	r3, [pc, #152]	@ (80026f0 <I2C4_MspInit+0xd0>)
 8002658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002668:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800266a:	2312      	movs	r3, #18
 800266c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002672:	2302      	movs	r3, #2
 8002674:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002676:	2304      	movs	r3, #4
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	481c      	ldr	r0, [pc, #112]	@ (80026f4 <I2C4_MspInit+0xd4>)
 8002682:	f002 f94b 	bl	800491c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800268a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800268c:	2312      	movs	r3, #18
 800268e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002694:	2302      	movs	r3, #2
 8002696:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002698:	2304      	movs	r3, #4
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4814      	ldr	r0, [pc, #80]	@ (80026f4 <I2C4_MspInit+0xd4>)
 80026a4:	f002 f93a 	bl	800491c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <I2C4_MspInit+0xd0>)
 80026aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <I2C4_MspInit+0xd0>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026b8:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <I2C4_MspInit+0xd0>)
 80026ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <I2C4_MspInit+0xd0>)
 80026c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026cc:	4a08      	ldr	r2, [pc, #32]	@ (80026f0 <I2C4_MspInit+0xd0>)
 80026ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <I2C4_MspInit+0xd0>)
 80026d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <I2C4_MspInit+0xd0>)
 80026de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026e2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	@ 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	58024400 	.word	0x58024400
 80026f4:	58020c00 	.word	0x58020c00

080026f8 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002704:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4619      	mov	r1, r3
 800270a:	480b      	ldr	r0, [pc, #44]	@ (8002738 <I2C4_MspDeInit+0x40>)
 800270c:	f002 fab6 	bl	8004c7c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002714:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4619      	mov	r1, r3
 800271a:	4807      	ldr	r0, [pc, #28]	@ (8002738 <I2C4_MspDeInit+0x40>)
 800271c:	f002 faae 	bl	8004c7c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <I2C4_MspDeInit+0x44>)
 8002722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002726:	4a05      	ldr	r2, [pc, #20]	@ (800273c <I2C4_MspDeInit+0x44>)
 8002728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800272c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8002730:	bf00      	nop
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	58020c00 	.word	0x58020c00
 800273c:	58024400 	.word	0x58024400

08002740 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af04      	add	r7, sp, #16
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	4603      	mov	r3, r0
 800274a:	81fb      	strh	r3, [r7, #14]
 800274c:	460b      	mov	r3, r1
 800274e:	81bb      	strh	r3, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002754:	8978      	ldrh	r0, [r7, #10]
 8002756:	89ba      	ldrh	r2, [r7, #12]
 8002758:	89f9      	ldrh	r1, [r7, #14]
 800275a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275e:	9302      	str	r3, [sp, #8]
 8002760:	8b3b      	ldrh	r3, [r7, #24]
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	4603      	mov	r3, r0
 800276a:	4807      	ldr	r0, [pc, #28]	@ (8002788 <I2C4_WriteReg+0x48>)
 800276c:	f002 fe68 	bl	8005440 <HAL_I2C_Mem_Write>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	e001      	b.n	800277e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800277a:	f06f 0307 	mvn.w	r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	24000e34 	.word	0x24000e34

0800278c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af04      	add	r7, sp, #16
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	4603      	mov	r3, r0
 8002796:	81fb      	strh	r3, [r7, #14]
 8002798:	460b      	mov	r3, r1
 800279a:	81bb      	strh	r3, [r7, #12]
 800279c:	4613      	mov	r3, r2
 800279e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80027a0:	8978      	ldrh	r0, [r7, #10]
 80027a2:	89ba      	ldrh	r2, [r7, #12]
 80027a4:	89f9      	ldrh	r1, [r7, #14]
 80027a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	8b3b      	ldrh	r3, [r7, #24]
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	4603      	mov	r3, r0
 80027b6:	4807      	ldr	r0, [pc, #28]	@ (80027d4 <I2C4_ReadReg+0x48>)
 80027b8:	f002 ff56 	bl	8005668 <HAL_I2C_Mem_Read>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e001      	b.n	80027ca <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80027c6:	f06f 0307 	mvn.w	r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	24000e34 	.word	0x24000e34

080027d8 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80027e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80027ec:	2200      	movs	r2, #0
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f805 	bl	8002800 <BSP_LCD_InitEx>
 80027f6:	4603      	mov	r3, r0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b09e      	sub	sp, #120	@ 0x78
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800280e:	2300      	movs	r3, #0
 8002810:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d808      	bhi.n	800282e <BSP_LCD_InitEx+0x2e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <BSP_LCD_InitEx+0x2e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d006      	beq.n	8002836 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800282e:	f06f 0301 	mvn.w	r3, #1
 8002832:	677b      	str	r3, [r7, #116]	@ 0x74
 8002834:	e0a8      	b.n	8002988 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d109      	bne.n	8002850 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 800283c:	2302      	movs	r3, #2
 800283e:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8002840:	4a54      	ldr	r2, [pc, #336]	@ (8002994 <BSP_LCD_InitEx+0x194>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015b      	lsls	r3, r3, #5
 8002846:	4413      	add	r3, r2
 8002848:	3310      	adds	r3, #16
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e008      	b.n	8002862 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8002850:	2300      	movs	r3, #0
 8002852:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8002854:	4a4f      	ldr	r2, [pc, #316]	@ (8002994 <BSP_LCD_InitEx+0x194>)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	015b      	lsls	r3, r3, #5
 800285a:	4413      	add	r3, r2
 800285c:	3310      	adds	r3, #16
 800285e:	2204      	movs	r2, #4
 8002860:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002862:	4a4c      	ldr	r2, [pc, #304]	@ (8002994 <BSP_LCD_InitEx+0x194>)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	015b      	lsls	r3, r3, #5
 8002868:	4413      	add	r3, r2
 800286a:	330c      	adds	r3, #12
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8002870:	4a48      	ldr	r2, [pc, #288]	@ (8002994 <BSP_LCD_InitEx+0x194>)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015b      	lsls	r3, r3, #5
 8002876:	4413      	add	r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 800287c:	4a45      	ldr	r2, [pc, #276]	@ (8002994 <BSP_LCD_InitEx+0x194>)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015b      	lsls	r3, r3, #5
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800288a:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 800288c:	4b42      	ldr	r3, [pc, #264]	@ (8002998 <BSP_LCD_InitEx+0x198>)
 800288e:	4a43      	ldr	r2, [pc, #268]	@ (800299c <BSP_LCD_InitEx+0x19c>)
 8002890:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002892:	4b43      	ldr	r3, [pc, #268]	@ (80029a0 <BSP_LCD_InitEx+0x1a0>)
 8002894:	4a43      	ldr	r2, [pc, #268]	@ (80029a4 <BSP_LCD_InitEx+0x1a4>)
 8002896:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002898:	483f      	ldr	r0, [pc, #252]	@ (8002998 <BSP_LCD_InitEx+0x198>)
 800289a:	f000 fd1b 	bl	80032d4 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 800289e:	4840      	ldr	r0, [pc, #256]	@ (80029a0 <BSP_LCD_InitEx+0x1a0>)
 80028a0:	f000 fde4 	bl	800346c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 80028a4:	4b40      	ldr	r3, [pc, #256]	@ (80029a8 <BSP_LCD_InitEx+0x1a8>)
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 80028a8:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <BSP_LCD_InitEx+0x1ac>)
 80028aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 80028ac:	2370      	movs	r3, #112	@ 0x70
 80028ae:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80028b0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80028b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fd68 	bl	8000390 <FT5336_RegisterBusIO>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da03      	bge.n	80028ce <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80028c6:	f06f 0304 	mvn.w	r3, #4
 80028ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80028cc:	e02b      	b.n	8002926 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 80028ce:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80028d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe53 	bl	8000584 <FT5336_ReadID>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da03      	bge.n	80028ec <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80028e4:	f06f 0304 	mvn.w	r3, #4
 80028e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80028ea:	e01c      	b.n	8002926 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 80028ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ee:	2b51      	cmp	r3, #81	@ 0x51
 80028f0:	d003      	beq.n	80028fa <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80028f2:	f06f 0306 	mvn.w	r3, #6
 80028f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80028f8:	e015      	b.n	8002926 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 80028fa:	4827      	ldr	r0, [pc, #156]	@ (8002998 <BSP_LCD_InitEx+0x198>)
 80028fc:	f000 f8e8 	bl	8002ad0 <MX_LTDC_ClockConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002906:	f06f 0303 	mvn.w	r3, #3
 800290a:	677b      	str	r3, [r7, #116]	@ 0x74
 800290c:	e00b      	b.n	8002926 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800290e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	4820      	ldr	r0, [pc, #128]	@ (8002998 <BSP_LCD_InitEx+0x198>)
 8002916:	f000 f84d 	bl	80029b4 <MX_LTDC_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002920:	f06f 0303 	mvn.w	r3, #3
 8002924:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8002926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002928:	2b00      	cmp	r3, #0
 800292a:	d12d      	bne.n	8002988 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800292c:	2000      	movs	r0, #0
 800292e:	f000 fe2f 	bl	8003590 <BSP_SDRAM_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8002938:	f06f 0303 	mvn.w	r3, #3
 800293c:	e025      	b.n	800298a <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 800294a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800294e:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8002950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8002954:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	461a      	mov	r2, r3
 8002960:	2100      	movs	r1, #0
 8002962:	480d      	ldr	r0, [pc, #52]	@ (8002998 <BSP_LCD_InitEx+0x198>)
 8002964:	f000 f872 	bl	8002a4c <MX_LTDC_ConfigLayer>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800296e:	f06f 0303 	mvn.w	r3, #3
 8002972:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8002974:	480e      	ldr	r0, [pc, #56]	@ (80029b0 <BSP_LCD_InitEx+0x1b0>)
 8002976:	f000 fde1 	bl	800353c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 800297a:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <BSP_LCD_InitEx+0x194>)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	015b      	lsls	r3, r3, #5
 8002980:	4413      	add	r3, r2
 8002982:	3318      	adds	r3, #24
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002988:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 800298a:	4618      	mov	r0, r3
 800298c:	3778      	adds	r7, #120	@ 0x78
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	24000fe4 	.word	0x24000fe4
 8002998:	24000f3c 	.word	0x24000f3c
 800299c:	50001000 	.word	0x50001000
 80029a0:	24000ed4 	.word	0x24000ed4
 80029a4:	52001000 	.word	0x52001000
 80029a8:	08001f2d 	.word	0x08001f2d
 80029ac:	080020c9 	.word	0x080020c9
 80029b0:	24000e88 	.word	0x24000e88

080029b4 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <MX_LTDC_Init+0x94>)
 80029c4:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2228      	movs	r2, #40	@ 0x28
 80029e2:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	222a      	movs	r2, #42	@ 0x2a
 80029e8:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2209      	movs	r2, #9
 8002a02:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	220b      	movs	r2, #11
 8002a08:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 020b 	add.w	r2, r3, #11
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f103 020d 	add.w	r2, r3, #13
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	@ 0xff
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	22ff      	movs	r2, #255	@ 0xff
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22ff      	movs	r2, #255	@ 0xff
 8002a32:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f003 fc24 	bl	8006284 <HAL_LTDC_Init>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	50001000 	.word	0x50001000

08002a4c <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b092      	sub	sp, #72	@ 0x48
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8002a76:	23ff      	movs	r3, #255	@ 0xff
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a82:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a84:	2307      	movs	r3, #7
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f003 fcb9 	bl	8006438 <HAL_LTDC_ConfigLayer>
 8002ac6:	4603      	mov	r3, r0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3748      	adds	r7, #72	@ 0x48
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b0b2      	sub	sp, #200	@ 0xc8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002ad8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002ae4:	2305      	movs	r3, #5
 8002ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002ae8:	23a0      	movs	r3, #160	@ 0xa0
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002aec:	2302      	movs	r3, #2
 8002aee:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002af0:	2302      	movs	r3, #2
 8002af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002af4:	2353      	movs	r3, #83	@ 0x53
 8002af6:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 f80d 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	37c8      	adds	r7, #200	@ 0xc8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b28:	f06f 0301 	mvn.w	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e007      	b.n	8002b40 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002b30:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <BSP_LCD_GetPixelFormat+0x3c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	015b      	lsls	r3, r3, #5
 8002b36:	4413      	add	r3, r2
 8002b38:	330c      	adds	r3, #12
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002b40:	68fb      	ldr	r3, [r7, #12]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	24000fe4 	.word	0x24000fe4

08002b54 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b68:	f06f 0301 	mvn.w	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e006      	b.n	8002b7e <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002b70:	4a06      	ldr	r2, [pc, #24]	@ (8002b8c <BSP_LCD_SetActiveLayer+0x38>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	015b      	lsls	r3, r3, #5
 8002b76:	4413      	add	r3, r2
 8002b78:	3308      	adds	r3, #8
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	24000fe4 	.word	0x24000fe4

08002b90 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ba4:	f06f 0301 	mvn.w	r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e006      	b.n	8002bba <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002bac:	4a06      	ldr	r2, [pc, #24]	@ (8002bc8 <BSP_LCD_GetXSize+0x38>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	015b      	lsls	r3, r3, #5
 8002bb2:	4413      	add	r3, r2
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	24000fe4 	.word	0x24000fe4

08002bcc <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002be0:	f06f 0301 	mvn.w	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e007      	b.n	8002bf8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002be8:	4a07      	ldr	r2, [pc, #28]	@ (8002c08 <BSP_LCD_GetYSize+0x3c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	015b      	lsls	r3, r3, #5
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	24000fe4 	.word	0x24000fe4

08002c0c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	@ 0x38
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	330a      	adds	r3, #10
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	330b      	adds	r3, #11
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	441a      	add	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	441a      	add	r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	330d      	adds	r3, #13
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4413      	add	r3, r2
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3312      	adds	r3, #18
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3313      	adds	r3, #19
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	441a      	add	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	441a      	add	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3315      	adds	r3, #21
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	4413      	add	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	3316      	adds	r3, #22
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	3317      	adds	r3, #23
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	441a      	add	r2, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	3318      	adds	r3, #24
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	441a      	add	r2, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3319      	adds	r3, #25
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	331c      	adds	r3, #28
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	331d      	adds	r3, #29
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	4413      	add	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002caa:	4a37      	ldr	r2, [pc, #220]	@ (8002d88 <BSP_LCD_DrawBitmap+0x17c>)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015b      	lsls	r3, r3, #5
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a35      	ldr	r2, [pc, #212]	@ (8002d8c <BSP_LCD_DrawBitmap+0x180>)
 8002cb8:	2134      	movs	r1, #52	@ 0x34
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	335c      	adds	r3, #92	@ 0x5c
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4930      	ldr	r1, [pc, #192]	@ (8002d88 <BSP_LCD_DrawBitmap+0x17c>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	fb03 f101 	mul.w	r1, r3, r1
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	440b      	add	r3, r1
 8002cd8:	482b      	ldr	r0, [pc, #172]	@ (8002d88 <BSP_LCD_DrawBitmap+0x17c>)
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	0149      	lsls	r1, r1, #5
 8002cde:	4401      	add	r1, r0
 8002ce0:	3110      	adds	r1, #16
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	3b20      	subs	r3, #32
 8002cf0:	2b07      	cmp	r3, #7
 8002cf2:	d802      	bhi.n	8002cfa <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	e008      	b.n	8002d0c <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	3b10      	subs	r3, #16
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d802      	bhi.n	8002d08 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002d02:	2302      	movs	r3, #2
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d06:	e001      	b.n	8002d0c <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	08d2      	lsrs	r2, r2, #3
 8002d1a:	fb03 f202 	mul.w	r2, r3, r2
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	4413      	add	r3, r2
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d2c:	e023      	b.n	8002d76 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fa77 	bl	800322c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <BSP_LCD_DrawBitmap+0x17c>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015b      	lsls	r3, r3, #5
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	490f      	ldr	r1, [pc, #60]	@ (8002d88 <BSP_LCD_DrawBitmap+0x17c>)
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	0152      	lsls	r2, r2, #5
 8002d4e:	440a      	add	r2, r1
 8002d50:	3210      	adds	r2, #16
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	425b      	negs	r3, r3
 8002d6a:	6a3a      	ldr	r2, [r7, #32]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d72:	3301      	adds	r3, #1
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3d7      	bcc.n	8002d2e <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3730      	adds	r7, #48	@ 0x30
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	24000fe4 	.word	0x24000fe4
 8002d8c:	24000f3c 	.word	0x24000f3c

08002d90 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e032      	b.n	8002e0e <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e028      	b.n	8002e00 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	3301      	adds	r3, #1
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	3303      	adds	r3, #3
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	18d1      	adds	r1, r2, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	441a      	add	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f95e 	bl	80030a4 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002de8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e20 <BSP_LCD_FillRGBRect+0x90>)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	015b      	lsls	r3, r3, #5
 8002dee:	4413      	add	r3, r2
 8002df0:	3310      	adds	r3, #16
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4413      	add	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3d2      	bcc.n	8002dae <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d3c8      	bcc.n	8002da8 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	24000fe4 	.word	0x24000fe4

08002e24 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002e32:	4a21      	ldr	r2, [pc, #132]	@ (8002eb8 <BSP_LCD_DrawHLine+0x94>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015b      	lsls	r3, r3, #5
 8002e38:	4413      	add	r3, r2
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <BSP_LCD_DrawHLine+0x98>)
 8002e40:	2134      	movs	r1, #52	@ 0x34
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	335c      	adds	r3, #92	@ 0x5c
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	491a      	ldr	r1, [pc, #104]	@ (8002eb8 <BSP_LCD_DrawHLine+0x94>)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	015b      	lsls	r3, r3, #5
 8002e52:	440b      	add	r3, r1
 8002e54:	3310      	adds	r3, #16
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4817      	ldr	r0, [pc, #92]	@ (8002eb8 <BSP_LCD_DrawHLine+0x94>)
 8002e5a:	68f9      	ldr	r1, [r7, #12]
 8002e5c:	0149      	lsls	r1, r1, #5
 8002e5e:	4401      	add	r1, r0
 8002e60:	6809      	ldr	r1, [r1, #0]
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	fb01 f000 	mul.w	r0, r1, r0
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	4401      	add	r1, r0
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	441a      	add	r2, r3
 8002e7a:	490f      	ldr	r1, [pc, #60]	@ (8002eb8 <BSP_LCD_DrawHLine+0x94>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	015b      	lsls	r3, r3, #5
 8002e80:	440b      	add	r3, r1
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d907      	bls.n	8002e98 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002e88:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb8 <BSP_LCD_DrawHLine+0x94>)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015b      	lsls	r3, r3, #5
 8002e8e:	4413      	add	r3, r2
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002e98:	6979      	ldr	r1, [r7, #20]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f956 	bl	8003158 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	24000fe4 	.word	0x24000fe4
 8002ebc:	24000f3c 	.word	0x24000f3c

08002ec0 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002ece:	4a24      	ldr	r2, [pc, #144]	@ (8002f60 <BSP_LCD_DrawVLine+0xa0>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a22      	ldr	r2, [pc, #136]	@ (8002f64 <BSP_LCD_DrawVLine+0xa4>)
 8002edc:	2134      	movs	r1, #52	@ 0x34
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	335c      	adds	r3, #92	@ 0x5c
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	491d      	ldr	r1, [pc, #116]	@ (8002f60 <BSP_LCD_DrawVLine+0xa0>)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	015b      	lsls	r3, r3, #5
 8002eee:	440b      	add	r3, r1
 8002ef0:	3310      	adds	r3, #16
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	481a      	ldr	r0, [pc, #104]	@ (8002f60 <BSP_LCD_DrawVLine+0xa0>)
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	0149      	lsls	r1, r1, #5
 8002efa:	4401      	add	r1, r0
 8002efc:	6809      	ldr	r1, [r1, #0]
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	fb01 f000 	mul.w	r0, r1, r0
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	4401      	add	r1, r0
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	441a      	add	r2, r3
 8002f16:	4912      	ldr	r1, [pc, #72]	@ (8002f60 <BSP_LCD_DrawVLine+0xa0>)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015b      	lsls	r3, r3, #5
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3304      	adds	r3, #4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d908      	bls.n	8002f38 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002f26:	4a0e      	ldr	r2, [pc, #56]	@ (8002f60 <BSP_LCD_DrawVLine+0xa0>)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015b      	lsls	r3, r3, #5
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	4a09      	ldr	r2, [pc, #36]	@ (8002f60 <BSP_LCD_DrawVLine+0xa0>)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	4413      	add	r3, r2
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	6a3a      	ldr	r2, [r7, #32]
 8002f48:	9201      	str	r2, [sp, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f901 	bl	8003158 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	24000fe4 	.word	0x24000fe4
 8002f64:	24000f3c 	.word	0x24000f3c

08002f68 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002f76:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <BSP_LCD_FillRect+0x7c>)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	015b      	lsls	r3, r3, #5
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3308      	adds	r3, #8
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <BSP_LCD_FillRect+0x80>)
 8002f84:	2134      	movs	r1, #52	@ 0x34
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	335c      	adds	r3, #92	@ 0x5c
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4914      	ldr	r1, [pc, #80]	@ (8002fe4 <BSP_LCD_FillRect+0x7c>)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015b      	lsls	r3, r3, #5
 8002f96:	440b      	add	r3, r1
 8002f98:	3310      	adds	r3, #16
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4811      	ldr	r0, [pc, #68]	@ (8002fe4 <BSP_LCD_FillRect+0x7c>)
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	0149      	lsls	r1, r1, #5
 8002fa2:	4401      	add	r1, r0
 8002fa4:	6809      	ldr	r1, [r1, #0]
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	fb01 f000 	mul.w	r0, r1, r0
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4401      	add	r1, r0
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002fb8:	6979      	ldr	r1, [r7, #20]
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <BSP_LCD_FillRect+0x7c>)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015b      	lsls	r3, r3, #5
 8002fc0:	4413      	add	r3, r2
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	9201      	str	r2, [sp, #4]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f8c0 	bl	8003158 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	24000fe4 	.word	0x24000fe4
 8002fe8:	24000f3c 	.word	0x24000f3c

08002fec <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002ffa:	4a28      	ldr	r2, [pc, #160]	@ (800309c <BSP_LCD_ReadPixel+0xb0>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	015b      	lsls	r3, r3, #5
 8003000:	4413      	add	r3, r2
 8003002:	3308      	adds	r3, #8
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a26      	ldr	r2, [pc, #152]	@ (80030a0 <BSP_LCD_ReadPixel+0xb4>)
 8003008:	2134      	movs	r1, #52	@ 0x34
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3348      	adds	r3, #72	@ 0x48
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d11c      	bne.n	8003052 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003018:	4a20      	ldr	r2, [pc, #128]	@ (800309c <BSP_LCD_ReadPixel+0xb0>)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	015b      	lsls	r3, r3, #5
 800301e:	4413      	add	r3, r2
 8003020:	3308      	adds	r3, #8
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1e      	ldr	r2, [pc, #120]	@ (80030a0 <BSP_LCD_ReadPixel+0xb4>)
 8003026:	2134      	movs	r1, #52	@ 0x34
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	335c      	adds	r3, #92	@ 0x5c
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	491a      	ldr	r1, [pc, #104]	@ (800309c <BSP_LCD_ReadPixel+0xb0>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	015b      	lsls	r3, r3, #5
 8003038:	440b      	add	r3, r1
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	fb03 f101 	mul.w	r1, r3, r1
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	440b      	add	r3, r1
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e01d      	b.n	800308e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003052:	4a12      	ldr	r2, [pc, #72]	@ (800309c <BSP_LCD_ReadPixel+0xb0>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	4413      	add	r3, r2
 800305a:	3308      	adds	r3, #8
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a10      	ldr	r2, [pc, #64]	@ (80030a0 <BSP_LCD_ReadPixel+0xb4>)
 8003060:	2134      	movs	r1, #52	@ 0x34
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	335c      	adds	r3, #92	@ 0x5c
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	490b      	ldr	r1, [pc, #44]	@ (800309c <BSP_LCD_ReadPixel+0xb0>)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	015b      	lsls	r3, r3, #5
 8003072:	440b      	add	r3, r1
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	fb03 f101 	mul.w	r1, r3, r1
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	440b      	add	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	24000fe4 	.word	0x24000fe4
 80030a0:	24000f3c 	.word	0x24000f3c

080030a4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030b2:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <BSP_LCD_WritePixel+0xac>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	4413      	add	r3, r2
 80030ba:	3308      	adds	r3, #8
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <BSP_LCD_WritePixel+0xb0>)
 80030c0:	2134      	movs	r1, #52	@ 0x34
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3348      	adds	r3, #72	@ 0x48
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11c      	bne.n	800310a <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 80030d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003150 <BSP_LCD_WritePixel+0xac>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	015b      	lsls	r3, r3, #5
 80030d6:	4413      	add	r3, r2
 80030d8:	3308      	adds	r3, #8
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003154 <BSP_LCD_WritePixel+0xb0>)
 80030de:	2134      	movs	r1, #52	@ 0x34
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	335c      	adds	r3, #92	@ 0x5c
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4919      	ldr	r1, [pc, #100]	@ (8003150 <BSP_LCD_WritePixel+0xac>)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	015b      	lsls	r3, r3, #5
 80030f0:	440b      	add	r3, r1
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	fb03 f101 	mul.w	r1, r3, r1
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	440b      	add	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	461a      	mov	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	e01b      	b.n	8003142 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800310a:	4a11      	ldr	r2, [pc, #68]	@ (8003150 <BSP_LCD_WritePixel+0xac>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	015b      	lsls	r3, r3, #5
 8003110:	4413      	add	r3, r2
 8003112:	3308      	adds	r3, #8
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a0f      	ldr	r2, [pc, #60]	@ (8003154 <BSP_LCD_WritePixel+0xb0>)
 8003118:	2134      	movs	r1, #52	@ 0x34
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	335c      	adds	r3, #92	@ 0x5c
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	490a      	ldr	r1, [pc, #40]	@ (8003150 <BSP_LCD_WritePixel+0xac>)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015b      	lsls	r3, r3, #5
 800312a:	440b      	add	r3, r1
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	fb03 f101 	mul.w	r1, r3, r1
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	440b      	add	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b292      	uxth	r2, r2
 8003140:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	24000fe4 	.word	0x24000fe4
 8003154:	24000f3c 	.word	0x24000f3c

08003158 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 800316a:	4a2d      	ldr	r2, [pc, #180]	@ (8003220 <LL_FillBuffer+0xc8>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015b      	lsls	r3, r3, #5
 8003170:	4413      	add	r3, r2
 8003172:	330c      	adds	r3, #12
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d129      	bne.n	80031ce <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800317a:	2302      	movs	r3, #2
 800317c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	0adb      	lsrs	r3, r3, #11
 8003182:	f003 021f 	and.w	r2, r3, #31
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	4413      	add	r3, r2
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	3317      	adds	r3, #23
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	0419      	lsls	r1, r3, #16
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800319e:	4613      	mov	r3, r2
 80031a0:	01db      	lsls	r3, r3, #7
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	3321      	adds	r3, #33	@ 0x21
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	4319      	orrs	r1, r3
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	f003 021f 	and.w	r2, r3, #31
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	4413      	add	r3, r2
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	3317      	adds	r3, #23
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	430b      	orrs	r3, r1
 80031c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031ca:	613b      	str	r3, [r7, #16]
    break;
 80031cc:	e002      	b.n	80031d4 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
    break;
 80031d2:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80031d4:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <LL_FillBuffer+0xcc>)
 80031d6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031da:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80031dc:	4a11      	ldr	r2, [pc, #68]	@ (8003224 <LL_FillBuffer+0xcc>)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <LL_FillBuffer+0xcc>)
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80031e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <LL_FillBuffer+0xcc>)
 80031ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003228 <LL_FillBuffer+0xd0>)
 80031ec:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80031ee:	480d      	ldr	r0, [pc, #52]	@ (8003224 <LL_FillBuffer+0xcc>)
 80031f0:	f001 f88e 	bl	8004310 <HAL_DMA2D_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10e      	bne.n	8003218 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6939      	ldr	r1, [r7, #16]
 8003204:	4807      	ldr	r0, [pc, #28]	@ (8003224 <LL_FillBuffer+0xcc>)
 8003206:	f001 f8f1 	bl	80043ec <HAL_DMA2D_Start>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003210:	2132      	movs	r1, #50	@ 0x32
 8003212:	4804      	ldr	r0, [pc, #16]	@ (8003224 <LL_FillBuffer+0xcc>)
 8003214:	f001 f915 	bl	8004442 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8003218:	bf00      	nop
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	24000fe4 	.word	0x24000fe4
 8003224:	24000ed4 	.word	0x24000ed4
 8003228:	52001000 	.word	0x52001000

0800322c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800323a:	4a23      	ldr	r2, [pc, #140]	@ (80032c8 <LL_ConvertLineToRGB+0x9c>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015b      	lsls	r3, r3, #5
 8003240:	4413      	add	r3, r2
 8003242:	330c      	adds	r3, #12
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d102      	bne.n	8003250 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800324a:	2302      	movs	r3, #2
 800324c:	617b      	str	r3, [r7, #20]
    break;
 800324e:	e002      	b.n	8003256 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
    break;
 8003254:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8003256:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 8003258:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800325c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800325e:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 800326c:	2200      	movs	r2, #0
 800326e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003270:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 8003272:	22ff      	movs	r2, #255	@ 0xff
 8003274:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8003276:	4a15      	ldr	r2, [pc, #84]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800327c:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 8003284:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <LL_ConvertLineToRGB+0xa4>)
 8003286:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003288:	4810      	ldr	r0, [pc, #64]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 800328a:	f001 f841 	bl	8004310 <HAL_DMA2D_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d115      	bne.n	80032c0 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003294:	2101      	movs	r1, #1
 8003296:	480d      	ldr	r0, [pc, #52]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 8003298:	f001 f9bc 	bl	8004614 <HAL_DMA2D_ConfigLayer>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10e      	bne.n	80032c0 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	2301      	movs	r3, #1
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	4807      	ldr	r0, [pc, #28]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 80032ae:	f001 f89d 	bl	80043ec <HAL_DMA2D_Start>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80032b8:	2132      	movs	r1, #50	@ 0x32
 80032ba:	4804      	ldr	r0, [pc, #16]	@ (80032cc <LL_ConvertLineToRGB+0xa0>)
 80032bc:	f001 f8c1 	bl	8004442 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	24000fe4 	.word	0x24000fe4
 80032cc:	24000ed4 	.word	0x24000ed4
 80032d0:	52001000 	.word	0x52001000

080032d4 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	@ 0x38
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003450 <LTDC_MspInit+0x17c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f040 80b0 	bne.w	8003448 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80032e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003454 <LTDC_MspInit+0x180>)
 80032ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032ee:	4a59      	ldr	r2, [pc, #356]	@ (8003454 <LTDC_MspInit+0x180>)
 80032f0:	f043 0308 	orr.w	r3, r3, #8
 80032f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80032f8:	4b56      	ldr	r3, [pc, #344]	@ (8003454 <LTDC_MspInit+0x180>)
 80032fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003306:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <LTDC_MspInit+0x180>)
 8003308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800330c:	4a51      	ldr	r2, [pc, #324]	@ (8003454 <LTDC_MspInit+0x180>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003316:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <LTDC_MspInit+0x180>)
 8003318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003324:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <LTDC_MspInit+0x180>)
 8003326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800332a:	4a4a      	ldr	r2, [pc, #296]	@ (8003454 <LTDC_MspInit+0x180>)
 800332c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003334:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <LTDC_MspInit+0x180>)
 8003336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800333a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003342:	4b44      	ldr	r3, [pc, #272]	@ (8003454 <LTDC_MspInit+0x180>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003348:	4a42      	ldr	r2, [pc, #264]	@ (8003454 <LTDC_MspInit+0x180>)
 800334a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800334e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003352:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <LTDC_MspInit+0x180>)
 8003354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003360:	4b3c      	ldr	r3, [pc, #240]	@ (8003454 <LTDC_MspInit+0x180>)
 8003362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003366:	4a3b      	ldr	r2, [pc, #236]	@ (8003454 <LTDC_MspInit+0x180>)
 8003368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003370:	4b38      	ldr	r3, [pc, #224]	@ (8003454 <LTDC_MspInit+0x180>)
 8003372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800337e:	4b35      	ldr	r3, [pc, #212]	@ (8003454 <LTDC_MspInit+0x180>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003384:	4a33      	ldr	r2, [pc, #204]	@ (8003454 <LTDC_MspInit+0x180>)
 8003386:	f043 0308 	orr.w	r3, r3, #8
 800338a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800338e:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <LTDC_MspInit+0x180>)
 8003390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 800339c:	f24d 2303 	movw	r3, #53763	@ 0xd203
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80033aa:	2302      	movs	r3, #2
 80033ac:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033ae:	230e      	movs	r3, #14
 80033b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80033b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033b6:	4619      	mov	r1, r3
 80033b8:	4827      	ldr	r0, [pc, #156]	@ (8003458 <LTDC_MspInit+0x184>)
 80033ba:	f001 faaf 	bl	800491c <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
 80033be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033c4:	230e      	movs	r3, #14
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80033c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033cc:	4619      	mov	r1, r3
 80033ce:	4823      	ldr	r0, [pc, #140]	@ (800345c <LTDC_MspInit+0x188>)
 80033d0:	f001 faa4 	bl	800491c <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80033d4:	23ff      	movs	r3, #255	@ 0xff
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033d8:	230e      	movs	r3, #14
 80033da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80033dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e0:	4619      	mov	r1, r3
 80033e2:	481f      	ldr	r0, [pc, #124]	@ (8003460 <LTDC_MspInit+0x18c>)
 80033e4:	f001 fa9a 	bl	800491c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 80033e8:	f240 2302 	movw	r3, #514	@ 0x202
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80033f6:	2302      	movs	r3, #2
 80033f8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033fa:	230e      	movs	r3, #14
 80033fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80033fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003402:	4619      	mov	r1, r3
 8003404:	4817      	ldr	r0, [pc, #92]	@ (8003464 <LTDC_MspInit+0x190>)
 8003406:	f001 fa89 	bl	800491c <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800340e:	2301      	movs	r3, #1
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003416:	4619      	mov	r1, r3
 8003418:	4813      	ldr	r0, [pc, #76]	@ (8003468 <LTDC_MspInit+0x194>)
 800341a:	f001 fa7f 	bl	800491c <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800341e:	2201      	movs	r2, #1
 8003420:	2180      	movs	r1, #128	@ 0x80
 8003422:	4811      	ldr	r0, [pc, #68]	@ (8003468 <LTDC_MspInit+0x194>)
 8003424:	f001 fd34 	bl	8004e90 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <LTDC_MspInit+0x180>)
 800342a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800342e:	4a09      	ldr	r2, [pc, #36]	@ (8003454 <LTDC_MspInit+0x180>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8003438:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <LTDC_MspInit+0x180>)
 800343a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800343e:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <LTDC_MspInit+0x180>)
 8003440:	f023 0308 	bic.w	r3, r3, #8
 8003444:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 8003448:	bf00      	nop
 800344a:	3738      	adds	r7, #56	@ 0x38
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	50001000 	.word	0x50001000
 8003454:	58024400 	.word	0x58024400
 8003458:	58022000 	.word	0x58022000
 800345c:	58022400 	.word	0x58022400
 8003460:	58022800 	.word	0x58022800
 8003464:	58021c00 	.word	0x58021c00
 8003468:	58020c00 	.word	0x58020c00

0800346c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a11      	ldr	r2, [pc, #68]	@ (80034c0 <DMA2D_MspInit+0x54>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d11a      	bne.n	80034b4 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800347e:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <DMA2D_MspInit+0x58>)
 8003480:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003484:	4a0f      	ldr	r2, [pc, #60]	@ (80034c4 <DMA2D_MspInit+0x58>)
 8003486:	f043 0310 	orr.w	r3, r3, #16
 800348a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <DMA2D_MspInit+0x58>)
 8003490:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <DMA2D_MspInit+0x58>)
 800349e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a0:	4a08      	ldr	r2, [pc, #32]	@ (80034c4 <DMA2D_MspInit+0x58>)
 80034a2:	f043 0310 	orr.w	r3, r3, #16
 80034a6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <DMA2D_MspInit+0x58>)
 80034aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ac:	4a05      	ldr	r2, [pc, #20]	@ (80034c4 <DMA2D_MspInit+0x58>)
 80034ae:	f023 0310 	bic.w	r3, r3, #16
 80034b2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	52001000 	.word	0x52001000
 80034c4:	58024400 	.word	0x58024400

080034c8 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	@ 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80034d0:	4b18      	ldr	r3, [pc, #96]	@ (8003534 <TIMx_PWM_MspInit+0x6c>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d6:	4a17      	ldr	r2, [pc, #92]	@ (8003534 <TIMx_PWM_MspInit+0x6c>)
 80034d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034e0:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <TIMx_PWM_MspInit+0x6c>)
 80034e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 80034ee:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <TIMx_PWM_MspInit+0x6c>)
 80034f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003534 <TIMx_PWM_MspInit+0x6c>)
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <TIMx_PWM_MspInit+0x6c>)
 8003500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003514:	2301      	movs	r3, #1
 8003516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8003518:	2303      	movs	r3, #3
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 800351c:	2301      	movs	r3, #1
 800351e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	4619      	mov	r1, r3
 8003526:	4804      	ldr	r0, [pc, #16]	@ (8003538 <TIMx_PWM_MspInit+0x70>)
 8003528:	f001 f9f8 	bl	800491c <HAL_GPIO_Init>
}
 800352c:	bf00      	nop
 800352e:	3728      	adds	r7, #40	@ 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	58024400 	.word	0x58024400
 8003538:	58022800 	.word	0x58022800

0800353c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a11      	ldr	r2, [pc, #68]	@ (800358c <TIMx_PWM_Init+0x50>)
 8003548:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f006 f82b 	bl	80095a6 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ffb9 	bl	80034c8 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2204      	movs	r2, #4
 800355a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003562:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f005 ffbb 	bl	80094f8 <HAL_TIM_PWM_Init>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40010400 	.word	0x40010400

08003590 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80035a2:	f06f 0301 	mvn.w	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e044      	b.n	8003634 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2234      	movs	r2, #52	@ 0x34
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a23      	ldr	r2, [pc, #140]	@ (8003640 <BSP_SDRAM_Init+0xb0>)
 80035b4:	4413      	add	r3, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f892 	bl	80036e0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2234      	movs	r2, #52	@ 0x34
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003640 <BSP_SDRAM_Init+0xb0>)
 80035c6:	4413      	add	r3, r2
 80035c8:	2210      	movs	r2, #16
 80035ca:	2104      	movs	r1, #4
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 f83b 	bl	8003648 <MX_SDRAM_BANK2_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e029      	b.n	8003634 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80035e0:	4b18      	ldr	r3, [pc, #96]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 80035e2:	2208      	movs	r2, #8
 80035e4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80035e6:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 80035e8:	2203      	movs	r2, #3
 80035ea:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80035ec:	4b15      	ldr	r3, [pc, #84]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 80035ee:	f240 6203 	movw	r2, #1539	@ 0x603
 80035f2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80035f4:	4b13      	ldr	r3, [pc, #76]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80035fa:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8003600:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 8003602:	2230      	movs	r2, #48	@ 0x30
 8003604:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8003606:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800360c:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 800360e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003612:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2234      	movs	r2, #52	@ 0x34
 8003618:	fb02 f303 	mul.w	r3, r2, r3
 800361c:	4a08      	ldr	r2, [pc, #32]	@ (8003640 <BSP_SDRAM_Init+0xb0>)
 800361e:	4413      	add	r3, r2
 8003620:	4908      	ldr	r1, [pc, #32]	@ (8003644 <BSP_SDRAM_Init+0xb4>)
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fa14 	bl	8000a50 <MT48LC4M32B2_Init>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800362e:	f06f 0304 	mvn.w	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003634:	68fb      	ldr	r3, [r7, #12]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	24001004 	.word	0x24001004
 8003644:	24001038 	.word	0x24001038

08003648 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	@ 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8003654:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <MX_SDRAM_BANK2_Init+0x90>)
 8003656:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <MX_SDRAM_BANK2_Init+0x94>)
 8003658:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003672:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <MX_SDRAM_BANK2_Init+0x90>)
 8003674:	2240      	movs	r2, #64	@ 0x40
 8003676:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800367e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800368c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800369c:	2302      	movs	r3, #2
 800369e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80036a0:	2307      	movs	r3, #7
 80036a2:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 80036a4:	2304      	movs	r3, #4
 80036a6:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 80036a8:	2307      	movs	r3, #7
 80036aa:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 80036ac:	2302      	movs	r3, #2
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 80036b0:	2302      	movs	r3, #2
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 80036b4:	2302      	movs	r3, #2
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4619      	mov	r1, r3
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f005 fd9e 	bl	8009200 <HAL_SDRAM_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3730      	adds	r7, #48	@ 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	24001004 	.word	0x24001004
 80036dc:	52004140 	.word	0x52004140

080036e0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	@ 0x38
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036e8:	4b73      	ldr	r3, [pc, #460]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 80036ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80036ee:	4a72      	ldr	r2, [pc, #456]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 80036f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80036f8:	4b6f      	ldr	r3, [pc, #444]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 80036fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80036fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003706:	4b6c      	ldr	r3, [pc, #432]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003708:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800370c:	4a6a      	ldr	r2, [pc, #424]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003716:	4b68      	ldr	r3, [pc, #416]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003718:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003724:	4b64      	ldr	r3, [pc, #400]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372a:	4a63      	ldr	r2, [pc, #396]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003734:	4b60      	ldr	r3, [pc, #384]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003742:	4b5d      	ldr	r3, [pc, #372]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003748:	4a5b      	ldr	r2, [pc, #364]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 800374a:	f043 0310 	orr.w	r3, r3, #16
 800374e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003752:	4b59      	ldr	r3, [pc, #356]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003760:	4b55      	ldr	r3, [pc, #340]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003766:	4a54      	ldr	r2, [pc, #336]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003768:	f043 0320 	orr.w	r3, r3, #32
 800376c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003770:	4b51      	ldr	r3, [pc, #324]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800377e:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003784:	4a4c      	ldr	r2, [pc, #304]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800378a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800378e:	4b4a      	ldr	r3, [pc, #296]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 8003790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800379c:	4b46      	ldr	r3, [pc, #280]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 800379e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037a2:	4a45      	ldr	r2, [pc, #276]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 80037a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037ac:	4b42      	ldr	r3, [pc, #264]	@ (80038b8 <SDRAM_MspInit+0x1d8>)
 80037ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80037be:	2301      	movs	r3, #1
 80037c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c2:	2303      	movs	r3, #3
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80037c6:	230c      	movs	r3, #12
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80037ca:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80037d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d4:	4619      	mov	r1, r3
 80037d6:	4839      	ldr	r0, [pc, #228]	@ (80038bc <SDRAM_MspInit+0x1dc>)
 80037d8:	f001 f8a0 	bl	800491c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80037dc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80037e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e6:	4619      	mov	r1, r3
 80037e8:	4835      	ldr	r0, [pc, #212]	@ (80038c0 <SDRAM_MspInit+0x1e0>)
 80037ea:	f001 f897 	bl	800491c <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80037ee:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80037f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037f8:	4619      	mov	r1, r3
 80037fa:	4832      	ldr	r0, [pc, #200]	@ (80038c4 <SDRAM_MspInit+0x1e4>)
 80037fc:	f001 f88e 	bl	800491c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003800:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800380a:	4619      	mov	r1, r3
 800380c:	482e      	ldr	r0, [pc, #184]	@ (80038c8 <SDRAM_MspInit+0x1e8>)
 800380e:	f001 f885 	bl	800491c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8003812:	23e0      	movs	r3, #224	@ 0xe0
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800381a:	4619      	mov	r1, r3
 800381c:	482b      	ldr	r0, [pc, #172]	@ (80038cc <SDRAM_MspInit+0x1ec>)
 800381e:	f001 f87d 	bl	800491c <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8003822:	4b2b      	ldr	r3, [pc, #172]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003828:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800382a:	4b29      	ldr	r3, [pc, #164]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003830:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8003832:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003834:	2280      	movs	r2, #128	@ 0x80
 8003836:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003838:	4b25      	ldr	r3, [pc, #148]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800383e:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003840:	f240 2202 	movw	r2, #514	@ 0x202
 8003844:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8003846:	4b22      	ldr	r3, [pc, #136]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003848:	f640 0208 	movw	r2, #2056	@ 0x808
 800384c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800384e:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003850:	2220      	movs	r2, #32
 8003852:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8003854:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003856:	2280      	movs	r2, #128	@ 0x80
 8003858:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800385c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003862:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003864:	2200      	movs	r2, #0
 8003866:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003868:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800386e:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003870:	2280      	movs	r2, #128	@ 0x80
 8003872:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003874:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003876:	2200      	movs	r2, #0
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800387a:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800387c:	2200      	movs	r2, #0
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8003880:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003882:	4a14      	ldr	r2, [pc, #80]	@ (80038d4 <SDRAM_MspInit+0x1f4>)
 8003884:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003886:	4b14      	ldr	r3, [pc, #80]	@ (80038d8 <SDRAM_MspInit+0x1f8>)
 8003888:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
 800388c:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800388e:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <SDRAM_MspInit+0x1f8>)
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003892:	480f      	ldr	r0, [pc, #60]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 8003894:	f002 fff4 	bl	8006880 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003898:	480d      	ldr	r0, [pc, #52]	@ (80038d0 <SDRAM_MspInit+0x1f0>)
 800389a:	f002 ffa5 	bl	80067e8 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	210f      	movs	r1, #15
 80038a2:	207a      	movs	r0, #122	@ 0x7a
 80038a4:	f000 fd0c 	bl	80042c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80038a8:	207a      	movs	r0, #122	@ 0x7a
 80038aa:	f000 fd23 	bl	80042f4 <HAL_NVIC_EnableIRQ>
}
 80038ae:	bf00      	nop
 80038b0:	3738      	adds	r7, #56	@ 0x38
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	58024400 	.word	0x58024400
 80038bc:	58020c00 	.word	0x58020c00
 80038c0:	58021000 	.word	0x58021000
 80038c4:	58021400 	.word	0x58021400
 80038c8:	58021800 	.word	0x58021800
 80038cc:	58021c00 	.word	0x58021c00
 80038d0:	24001058 	.word	0x24001058
 80038d4:	52000040 	.word	0x52000040
 80038d8:	24001004 	.word	0x24001004

080038dc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d11c      	bne.n	800392a <BSP_TS_Init+0x4e>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d018      	beq.n	800392a <BSP_TS_Init+0x4e>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003900:	d813      	bhi.n	800392a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00f      	beq.n	800392a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003912:	d80a      	bhi.n	800392a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	428b      	cmp	r3, r1
 8003922:	bf28      	it	cs
 8003924:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003926:	429a      	cmp	r2, r3
 8003928:	d903      	bls.n	8003932 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800392a:	f06f 0301 	mvn.w	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e06e      	b.n	8003a10 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f878 	bl	8003a28 <FT5336_Probe>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	e064      	b.n	8003a10 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4934      	ldr	r1, [pc, #208]	@ (8003a1c <BSP_TS_Init+0x140>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	019b      	lsls	r3, r3, #6
 8003950:	440b      	add	r3, r1
 8003952:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4930      	ldr	r1, [pc, #192]	@ (8003a1c <BSP_TS_Init+0x140>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	440b      	add	r3, r1
 8003960:	3304      	adds	r3, #4
 8003962:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	492c      	ldr	r1, [pc, #176]	@ (8003a1c <BSP_TS_Init+0x140>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	440b      	add	r3, r1
 8003970:	3308      	adds	r3, #8
 8003972:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	4928      	ldr	r1, [pc, #160]	@ (8003a1c <BSP_TS_Init+0x140>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	440b      	add	r3, r1
 8003980:	330c      	adds	r3, #12
 8003982:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003984:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <BSP_TS_Init+0x144>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4926      	ldr	r1, [pc, #152]	@ (8003a24 <BSP_TS_Init+0x148>)
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003992:	f107 010c 	add.w	r1, r7, #12
 8003996:	4610      	mov	r0, r2
 8003998:	4798      	blx	r3
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	da03      	bge.n	80039a8 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80039a0:	f06f 0304 	mvn.w	r3, #4
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e033      	b.n	8003a10 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	491c      	ldr	r1, [pc, #112]	@ (8003a1c <BSP_TS_Init+0x140>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	019b      	lsls	r3, r3, #6
 80039b0:	440b      	add	r3, r1
 80039b2:	3310      	adds	r3, #16
 80039b4:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4918      	ldr	r1, [pc, #96]	@ (8003a1c <BSP_TS_Init+0x140>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	440b      	add	r3, r1
 80039c0:	3314      	adds	r3, #20
 80039c2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e01f      	b.n	8003a0a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	4811      	ldr	r0, [pc, #68]	@ (8003a1c <BSP_TS_Init+0x140>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0119      	lsls	r1, r3, #4
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	440b      	add	r3, r1
 80039e0:	3306      	adds	r3, #6
 80039e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	480a      	ldr	r0, [pc, #40]	@ (8003a1c <BSP_TS_Init+0x140>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0119      	lsls	r1, r3, #4
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	440b      	add	r3, r1
 80039fc:	330a      	adds	r3, #10
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4403      	add	r3, r0
 8003a02:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d9dc      	bls.n	80039ca <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8003a10:	69fb      	ldr	r3, [r7, #28]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	240010cc 	.word	0x240010cc
 8003a20:	240010c4 	.word	0x240010c4
 8003a24:	240010c8 	.word	0x240010c8

08003a28 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003a38:	2370      	movs	r3, #112	@ 0x70
 8003a3a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003a3c:	4b23      	ldr	r3, [pc, #140]	@ (8003acc <FT5336_Probe+0xa4>)
 8003a3e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003a40:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <FT5336_Probe+0xa8>)
 8003a42:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8003a44:	4b23      	ldr	r3, [pc, #140]	@ (8003ad4 <FT5336_Probe+0xac>)
 8003a46:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003a48:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <FT5336_Probe+0xb0>)
 8003a4a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003a4c:	4b23      	ldr	r3, [pc, #140]	@ (8003adc <FT5336_Probe+0xb4>)
 8003a4e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	4619      	mov	r1, r3
 8003a56:	4822      	ldr	r0, [pc, #136]	@ (8003ae0 <FT5336_Probe+0xb8>)
 8003a58:	f7fc fc9a 	bl	8000390 <FT5336_RegisterBusIO>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003a62:	f06f 0307 	mvn.w	r3, #7
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a68:	e02a      	b.n	8003ac0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003a6a:	f107 0308 	add.w	r3, r7, #8
 8003a6e:	4619      	mov	r1, r3
 8003a70:	481b      	ldr	r0, [pc, #108]	@ (8003ae0 <FT5336_Probe+0xb8>)
 8003a72:	f7fc fd87 	bl	8000584 <FT5336_ReadID>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a7c:	f06f 0304 	mvn.w	r3, #4
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a82:	e01d      	b.n	8003ac0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b51      	cmp	r3, #81	@ 0x51
 8003a88:	d003      	beq.n	8003a92 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003a8a:	f06f 0306 	mvn.w	r3, #6
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a90:	e016      	b.n	8003ac0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8003a92:	4a14      	ldr	r2, [pc, #80]	@ (8003ae4 <FT5336_Probe+0xbc>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4912      	ldr	r1, [pc, #72]	@ (8003ae0 <FT5336_Probe+0xb8>)
 8003a98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003a9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <FT5336_Probe+0xc0>)
 8003a9e:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <FT5336_Probe+0xc4>)
 8003aa0:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8003aa2:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <FT5336_Probe+0xc0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	490e      	ldr	r1, [pc, #56]	@ (8003ae4 <FT5336_Probe+0xbc>)
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4798      	blx	r3
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003aba:	f06f 0304 	mvn.w	r3, #4
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3728      	adds	r7, #40	@ 0x28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	08001f2d 	.word	0x08001f2d
 8003ad0:	08001fa1 	.word	0x08001fa1
 8003ad4:	080020c9 	.word	0x080020c9
 8003ad8:	0800206d 	.word	0x0800206d
 8003adc:	08002125 	.word	0x08002125
 8003ae0:	2400110c 	.word	0x2400110c
 8003ae4:	240010c8 	.word	0x240010c8
 8003ae8:	240010c4 	.word	0x240010c4
 8003aec:	24000000 	.word	0x24000000

08003af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <HAL_MspInit+0x30>)
 8003af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003afc:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <HAL_MspInit+0x30>)
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_MspInit+0x30>)
 8003b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	58024400 	.word	0x58024400

08003b24 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <HardFault_Handler+0x4>

08003b3a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003b3e:	bf00      	nop
 8003b40:	e7fd      	b.n	8003b3e <MemManage_Handler+0x4>

08003b42 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003b46:	bf00      	nop
 8003b48:	e7fd      	b.n	8003b46 <BusFault_Handler+0x4>

08003b4a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003b4e:	bf00      	nop
 8003b50:	e7fd      	b.n	8003b4e <UsageFault_Handler+0x4>

08003b52 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003b80:	f000 fa86 	bl	8004090 <HAL_IncTick>
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7fe f9bb 	bl	8001f08 <BSP_PB_IRQHandler>
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  return 1;
 8003b9a:	2301      	movs	r3, #1
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_kill>:

int _kill(int pid, int sig)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bb0:	f006 feb6 	bl	800a920 <__errno>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2216      	movs	r2, #22
 8003bb8:	601a      	str	r2, [r3, #0]
  return -1;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_exit>:

void _exit (int status)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bce:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ffe7 	bl	8003ba6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <_exit+0x12>

08003bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e00a      	b.n	8003c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bee:	f3af 8000 	nop.w
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	60ba      	str	r2, [r7, #8]
 8003bfa:	b2ca      	uxtb	r2, r1
 8003bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	3301      	adds	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	dbf0      	blt.n	8003bee <_read+0x12>
  }

  return len;
 8003c0c:	687b      	ldr	r3, [r7, #4]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e009      	b.n	8003c3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	60ba      	str	r2, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	dbf1      	blt.n	8003c28 <_write+0x12>
  }
  return len;
 8003c44:	687b      	ldr	r3, [r7, #4]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_close>:

int _close(int file)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c76:	605a      	str	r2, [r3, #4]
  return 0;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_isatty>:

int _isatty(int file)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c8e:	2301      	movs	r3, #1
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cc0:	4a14      	ldr	r2, [pc, #80]	@ (8003d14 <_sbrk+0x5c>)
 8003cc2:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <_sbrk+0x60>)
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ccc:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <_sbrk+0x64>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd4:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <_sbrk+0x64>)
 8003cd6:	4a12      	ldr	r2, [pc, #72]	@ (8003d20 <_sbrk+0x68>)
 8003cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cda:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <_sbrk+0x64>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d207      	bcs.n	8003cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce8:	f006 fe1a 	bl	800a920 <__errno>
 8003cec:	4603      	mov	r3, r0
 8003cee:	220c      	movs	r2, #12
 8003cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e009      	b.n	8003d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf8:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <_sbrk+0x64>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cfe:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <_sbrk+0x64>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	4a05      	ldr	r2, [pc, #20]	@ (8003d1c <_sbrk+0x64>)
 8003d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	24080000 	.word	0x24080000
 8003d18:	00000400 	.word	0x00000400
 8003d1c:	24001134 	.word	0x24001134
 8003d20:	240012e8 	.word	0x240012e8

08003d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d28:	4b37      	ldr	r3, [pc, #220]	@ (8003e08 <SystemInit+0xe4>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	4a36      	ldr	r2, [pc, #216]	@ (8003e08 <SystemInit+0xe4>)
 8003d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d38:	4b34      	ldr	r3, [pc, #208]	@ (8003e0c <SystemInit+0xe8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d807      	bhi.n	8003d54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d44:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <SystemInit+0xe8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f023 030f 	bic.w	r3, r3, #15
 8003d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8003e0c <SystemInit+0xe8>)
 8003d4e:	f043 0307 	orr.w	r3, r3, #7
 8003d52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d54:	4b2e      	ldr	r3, [pc, #184]	@ (8003e10 <SystemInit+0xec>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	@ (8003e10 <SystemInit+0xec>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d60:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <SystemInit+0xec>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d66:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <SystemInit+0xec>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4929      	ldr	r1, [pc, #164]	@ (8003e10 <SystemInit+0xec>)
 8003d6c:	4b29      	ldr	r3, [pc, #164]	@ (8003e14 <SystemInit+0xf0>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d72:	4b26      	ldr	r3, [pc, #152]	@ (8003e0c <SystemInit+0xe8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d7e:	4b23      	ldr	r3, [pc, #140]	@ (8003e0c <SystemInit+0xe8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 030f 	bic.w	r3, r3, #15
 8003d86:	4a21      	ldr	r2, [pc, #132]	@ (8003e0c <SystemInit+0xe8>)
 8003d88:	f043 0307 	orr.w	r3, r3, #7
 8003d8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d8e:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <SystemInit+0xec>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d94:	4b1e      	ldr	r3, [pc, #120]	@ (8003e10 <SystemInit+0xec>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e10 <SystemInit+0xec>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003da0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <SystemInit+0xec>)
 8003da2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e18 <SystemInit+0xf4>)
 8003da4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <SystemInit+0xec>)
 8003da8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <SystemInit+0xf8>)
 8003daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003dac:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <SystemInit+0xec>)
 8003dae:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <SystemInit+0xfc>)
 8003db0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003db2:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <SystemInit+0xec>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <SystemInit+0xec>)
 8003dba:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <SystemInit+0xfc>)
 8003dbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003dbe:	4b14      	ldr	r3, [pc, #80]	@ (8003e10 <SystemInit+0xec>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <SystemInit+0xec>)
 8003dc6:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <SystemInit+0xfc>)
 8003dc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003dca:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <SystemInit+0xec>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <SystemInit+0xec>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003e10 <SystemInit+0xec>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <SystemInit+0xec>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003de2:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <SystemInit+0x100>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <SystemInit+0x104>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dee:	d202      	bcs.n	8003df6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <SystemInit+0x108>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003df6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <SystemInit+0x10c>)
 8003df8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003dfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00
 8003e0c:	52002000 	.word	0x52002000
 8003e10:	58024400 	.word	0x58024400
 8003e14:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e18:	02020200 	.word	0x02020200
 8003e1c:	01ff0000 	.word	0x01ff0000
 8003e20:	01010280 	.word	0x01010280
 8003e24:	5c001000 	.word	0x5c001000
 8003e28:	ffff0000 	.word	0xffff0000
 8003e2c:	51008108 	.word	0x51008108
 8003e30:	52004000 	.word	0x52004000

08003e34 <Touchscreen_demo>:
  * @brief  Touchscreen Demo1 : test touchscreen calibration and single touch in polling mode
  * @param  None
  * @retval None
  */
void Touchscreen_demo(char SendBuffer1[50],char SendBuffer2[50],char SendBuffer3[50],char SendBuffer4[50],char SendBuffer5[50])
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	@ 0x30
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint16_t x1, y1;
  uint8_t state = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t ts_status = BSP_ERROR_NONE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	623b      	str	r3, [r7, #32]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	4619      	mov	r1, r3
 8003e52:	2000      	movs	r0, #0
 8003e54:	f7fe fe9c 	bl	8002b90 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8003e58:	f107 0318 	add.w	r3, r7, #24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7fe feb4 	bl	8002bcc <BSP_LCD_GetYSize>

  hTS.Width = x_size;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4a4e      	ldr	r2, [pc, #312]	@ (8003fa0 <Touchscreen_demo+0x16c>)
 8003e68:	6013      	str	r3, [r2, #0]
  hTS.Height = y_size;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa0 <Touchscreen_demo+0x16c>)
 8003e6e:	6053      	str	r3, [r2, #4]
  hTS.Orientation =TS_SWAP_XY ;
 8003e70:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa0 <Touchscreen_demo+0x16c>)
 8003e72:	2208      	movs	r2, #8
 8003e74:	609a      	str	r2, [r3, #8]
  hTS.Accuracy = 5;
 8003e76:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <Touchscreen_demo+0x16c>)
 8003e78:	2205      	movs	r2, #5
 8003e7a:	60da      	str	r2, [r3, #12]

  ts_status = BSP_TS_Init(0, &hTS);
 8003e7c:	4948      	ldr	r1, [pc, #288]	@ (8003fa0 <Touchscreen_demo+0x16c>)
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f7ff fd2c 	bl	80038dc <BSP_TS_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	623b      	str	r3, [r7, #32]

  if(ts_status == BSP_ERROR_NONE)
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8084 	bne.w	8003f98 <Touchscreen_demo+0x164>
  {
	uint32_t x_size, y_size;

	BSP_LCD_GetXSize(0, &x_size);
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	4619      	mov	r1, r3
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7fe fe7a 	bl	8002b90 <BSP_LCD_GetXSize>
	BSP_LCD_GetYSize(0, &y_size);
 8003e9c:	f107 0310 	add.w	r3, r7, #16
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f7fe fe92 	bl	8002bcc <BSP_LCD_GetYSize>

	UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa4 <Touchscreen_demo+0x170>)
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2350      	movs	r3, #80	@ 0x50
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f7fd fdca 	bl	8001a4c <UTIL_LCD_FillRect>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	f7fd faa0 	bl	8001400 <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8003ec0:	4838      	ldr	r0, [pc, #224]	@ (8003fa4 <Touchscreen_demo+0x170>)
 8003ec2:	f7fd fab1 	bl	8001428 <UTIL_LCD_SetBackColor>
	UTIL_LCD_SetFont(&Font24);
 8003ec6:	4838      	ldr	r0, [pc, #224]	@ (8003fa8 <Touchscreen_demo+0x174>)
 8003ec8:	f7fd fac2 	bl	8001450 <UTIL_LCD_SetFont>

	UTIL_LCD_DisplayStringAt(0, 15, (uint8_t *)"Healthy Home", CENTER_MODE);
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4a37      	ldr	r2, [pc, #220]	@ (8003fac <Touchscreen_demo+0x178>)
 8003ed0:	210f      	movs	r1, #15
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fd fbd8 	bl	8001688 <UTIL_LCD_DisplayStringAt>
	UTIL_LCD_SetFont(&Font12);
 8003ed8:	4835      	ldr	r0, [pc, #212]	@ (8003fb0 <Touchscreen_demo+0x17c>)
 8003eda:	f7fd fab9 	bl	8001450 <UTIL_LCD_SetFont>
	UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"Please use the screen to monitor your home.", CENTER_MODE);
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4a34      	ldr	r2, [pc, #208]	@ (8003fb4 <Touchscreen_demo+0x180>)
 8003ee2:	212d      	movs	r1, #45	@ 0x2d
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fd fbcf 	bl	8001688 <UTIL_LCD_DisplayStringAt>

	UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size - 100, UTIL_LCD_COLOR_BLUE);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f1a3 0214 	sub.w	r2, r3, #20
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3b64      	subs	r3, #100	@ 0x64
 8003ef4:	492b      	ldr	r1, [pc, #172]	@ (8003fa4 <Touchscreen_demo+0x170>)
 8003ef6:	9100      	str	r1, [sp, #0]
 8003ef8:	215a      	movs	r1, #90	@ 0x5a
 8003efa:	200a      	movs	r0, #10
 8003efc:	f7fd fc72 	bl	80017e4 <UTIL_LCD_DrawRect>
	UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size - 102, UTIL_LCD_COLOR_BLUE);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f1a3 0216 	sub.w	r2, r3, #22
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3b66      	subs	r3, #102	@ 0x66
 8003f0a:	4926      	ldr	r1, [pc, #152]	@ (8003fa4 <Touchscreen_demo+0x170>)
 8003f0c:	9100      	str	r1, [sp, #0]
 8003f0e:	215b      	movs	r1, #91	@ 0x5b
 8003f10:	200b      	movs	r0, #11
 8003f12:	f7fd fc67 	bl	80017e4 <UTIL_LCD_DrawRect>

    UTIL_LCD_DisplayStringAt(30, 105, (uint8_t *)SendBuffer1, LEFT_MODE);
 8003f16:	2303      	movs	r3, #3
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	2169      	movs	r1, #105	@ 0x69
 8003f1c:	201e      	movs	r0, #30
 8003f1e:	f7fd fbb3 	bl	8001688 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(30, 120, (uint8_t *)SendBuffer2, LEFT_MODE);
 8003f22:	2303      	movs	r3, #3
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	2178      	movs	r1, #120	@ 0x78
 8003f28:	201e      	movs	r0, #30
 8003f2a:	f7fd fbad 	bl	8001688 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(30, 135, (uint8_t *)SendBuffer3, LEFT_MODE);
 8003f2e:	2303      	movs	r3, #3
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	2187      	movs	r1, #135	@ 0x87
 8003f34:	201e      	movs	r0, #30
 8003f36:	f7fd fba7 	bl	8001688 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(30, 150, (uint8_t *)SendBuffer4, LEFT_MODE);
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	2196      	movs	r1, #150	@ 0x96
 8003f40:	201e      	movs	r0, #30
 8003f42:	f7fd fba1 	bl	8001688 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(30, 165, (uint8_t *)SendBuffer5, LEFT_MODE);
 8003f46:	2303      	movs	r3, #3
 8003f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4a:	21a5      	movs	r1, #165	@ 0xa5
 8003f4c:	201e      	movs	r0, #30
 8003f4e:	f7fd fb9b 	bl	8001688 <UTIL_LCD_DisplayStringAt>

    UTIL_LCD_DisplayStringAt(315, 105, "Change temperature:", LEFT_MODE);
 8003f52:	2303      	movs	r3, #3
 8003f54:	4a18      	ldr	r2, [pc, #96]	@ (8003fb8 <Touchscreen_demo+0x184>)
 8003f56:	2169      	movs	r1, #105	@ 0x69
 8003f58:	f240 103b 	movw	r0, #315	@ 0x13b
 8003f5c:	f7fd fb94 	bl	8001688 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8003f60:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <Touchscreen_demo+0x170>)
 8003f62:	2219      	movs	r2, #25
 8003f64:	21d9      	movs	r1, #217	@ 0xd9
 8003f66:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8003f6a:	f7fd fda9 	bl	8001ac0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS1(4), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <Touchscreen_demo+0x170>)
 8003f70:	2219      	movs	r2, #25
 8003f72:	2196      	movs	r1, #150	@ 0x96
 8003f74:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8003f78:	f7fd fda2 	bl	8001ac0 <UTIL_LCD_FillCircle>
    UTIL_LCD_DisplayStringAt(382, 144, "+", LEFT_MODE);
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fbc <Touchscreen_demo+0x188>)
 8003f80:	2190      	movs	r1, #144	@ 0x90
 8003f82:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8003f86:	f7fd fb7f 	bl	8001688 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(382, 211, "-", LEFT_MODE);
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc0 <Touchscreen_demo+0x18c>)
 8003f8e:	21d3      	movs	r1, #211	@ 0xd3
 8003f90:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8003f94:	f7fd fb78 	bl	8001688 <UTIL_LCD_DisplayStringAt>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3728      	adds	r7, #40	@ 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	24001138 	.word	0x24001138
 8003fa4:	ff0000ff 	.word	0xff0000ff
 8003fa8:	2400003c 	.word	0x2400003c
 8003fac:	0800ca50 	.word	0x0800ca50
 8003fb0:	24000044 	.word	0x24000044
 8003fb4:	0800ca60 	.word	0x0800ca60
 8003fb8:	0800ca8c 	.word	0x0800ca8c
 8003fbc:	0800caa0 	.word	0x0800caa0
 8003fc0:	0800caa4 	.word	0x0800caa4

08003fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack      /* set stack pointer */
 8003fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fc8:	f7ff feac 	bl	8003d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fcc:	480c      	ldr	r0, [pc, #48]	@ (8004000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fce:	490d      	ldr	r1, [pc, #52]	@ (8004004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fd4:	e002      	b.n	8003fdc <LoopCopyDataInit>

08003fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fda:	3304      	adds	r3, #4

08003fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fe0:	d3f9      	bcc.n	8003fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800400c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8004010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe8:	e001      	b.n	8003fee <LoopFillZerobss>

08003fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fec:	3204      	adds	r2, #4

08003fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ff0:	d3fb      	bcc.n	8003fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ff2:	f006 fc9b 	bl	800a92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ff6:	f7fc fe37 	bl	8000c68 <main>
  bx  lr
 8003ffa:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8003ffc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004000:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004004:	2400022c 	.word	0x2400022c
  ldr r2, =_sidata
 8004008:	0800ee20 	.word	0x0800ee20
  ldr r2, =_sbss
 800400c:	2400022c 	.word	0x2400022c
  ldr r4, =_ebss
 8004010:	240012e4 	.word	0x240012e4

08004014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004014:	e7fe      	b.n	8004014 <ADC3_IRQHandler>
	...

08004018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401e:	2003      	movs	r0, #3
 8004020:	f000 f943 	bl	80042aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004024:	f003 fb66 	bl	80076f4 <HAL_RCC_GetSysClockFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <HAL_Init+0x68>)
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	4913      	ldr	r1, [pc, #76]	@ (8004084 <HAL_Init+0x6c>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004042:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <HAL_Init+0x68>)
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	4a0e      	ldr	r2, [pc, #56]	@ (8004084 <HAL_Init+0x6c>)
 800404c:	5cd3      	ldrb	r3, [r2, r3]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
 8004058:	4a0b      	ldr	r2, [pc, #44]	@ (8004088 <HAL_Init+0x70>)
 800405a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800405c:	4a0b      	ldr	r2, [pc, #44]	@ (800408c <HAL_Init+0x74>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004062:	200f      	movs	r0, #15
 8004064:	f005 fd0e 	bl	8009a84 <HAL_InitTick>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e002      	b.n	8004078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004072:	f7ff fd3d 	bl	8003af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58024400 	.word	0x58024400
 8004084:	0800ea8c 	.word	0x0800ea8c
 8004088:	24000058 	.word	0x24000058
 800408c:	24000054 	.word	0x24000054

08004090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_IncTick+0x20>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_IncTick+0x24>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <HAL_IncTick+0x24>)
 80040a2:	6013      	str	r3, [r2, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	24000060 	.word	0x24000060
 80040b4:	24001148 	.word	0x24001148

080040b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return uwTick;
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <HAL_GetTick+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	24001148 	.word	0x24001148

080040d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040d8:	f7ff ffee 	bl	80040b8 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d005      	beq.n	80040f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_Delay+0x44>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040f6:	bf00      	nop
 80040f8:	f7ff ffde 	bl	80040b8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	429a      	cmp	r2, r3
 8004106:	d8f7      	bhi.n	80040f8 <HAL_Delay+0x28>
  {
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	24000060 	.word	0x24000060

08004118 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800411c:	4b03      	ldr	r3, [pc, #12]	@ (800412c <HAL_GetREVID+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0c1b      	lsrs	r3, r3, #16
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	5c001000 	.word	0x5c001000

08004130 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_EnableCompensationCell+0x1c>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	4a04      	ldr	r2, [pc, #16]	@ (800414c <HAL_EnableCompensationCell+0x1c>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	6213      	str	r3, [r2, #32]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	58000400 	.word	0x58000400

08004150 <__NVIC_SetPriorityGrouping>:
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <__NVIC_SetPriorityGrouping+0x40>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800416c:	4013      	ands	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <__NVIC_SetPriorityGrouping+0x44>)
 800417a:	4313      	orrs	r3, r2
 800417c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417e:	4a04      	ldr	r2, [pc, #16]	@ (8004190 <__NVIC_SetPriorityGrouping+0x40>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	60d3      	str	r3, [r2, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00
 8004194:	05fa0000 	.word	0x05fa0000

08004198 <__NVIC_GetPriorityGrouping>:
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800419c:	4b04      	ldr	r3, [pc, #16]	@ (80041b0 <__NVIC_GetPriorityGrouping+0x18>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	f003 0307 	and.w	r3, r3, #7
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <__NVIC_EnableIRQ>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	db0b      	blt.n	80041de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f003 021f 	and.w	r2, r3, #31
 80041cc:	4907      	ldr	r1, [pc, #28]	@ (80041ec <__NVIC_EnableIRQ+0x38>)
 80041ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2001      	movs	r0, #1
 80041d6:	fa00 f202 	lsl.w	r2, r0, r2
 80041da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000e100 	.word	0xe000e100

080041f0 <__NVIC_SetPriority>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	db0a      	blt.n	800421a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	490c      	ldr	r1, [pc, #48]	@ (800423c <__NVIC_SetPriority+0x4c>)
 800420a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	440b      	add	r3, r1
 8004214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004218:	e00a      	b.n	8004230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4908      	ldr	r1, [pc, #32]	@ (8004240 <__NVIC_SetPriority+0x50>)
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	3b04      	subs	r3, #4
 8004228:	0112      	lsls	r2, r2, #4
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	440b      	add	r3, r1
 800422e:	761a      	strb	r2, [r3, #24]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000e100 	.word	0xe000e100
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <NVIC_EncodePriority>:
{
 8004244:	b480      	push	{r7}
 8004246:	b089      	sub	sp, #36	@ 0x24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f1c3 0307 	rsb	r3, r3, #7
 800425e:	2b04      	cmp	r3, #4
 8004260:	bf28      	it	cs
 8004262:	2304      	movcs	r3, #4
 8004264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3304      	adds	r3, #4
 800426a:	2b06      	cmp	r3, #6
 800426c:	d902      	bls.n	8004274 <NVIC_EncodePriority+0x30>
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3b03      	subs	r3, #3
 8004272:	e000      	b.n	8004276 <NVIC_EncodePriority+0x32>
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004278:	f04f 32ff 	mov.w	r2, #4294967295
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	401a      	ands	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800428c:	f04f 31ff 	mov.w	r1, #4294967295
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	43d9      	mvns	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800429c:	4313      	orrs	r3, r2
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3724      	adds	r7, #36	@ 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff4c 	bl	8004150 <__NVIC_SetPriorityGrouping>
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042ce:	f7ff ff63 	bl	8004198 <__NVIC_GetPriorityGrouping>
 80042d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f7ff ffb3 	bl	8004244 <NVIC_EncodePriority>
 80042de:	4602      	mov	r2, r0
 80042e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff ff82 	bl	80041f0 <__NVIC_SetPriority>
}
 80042ec:	bf00      	nop
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff56 	bl	80041b4 <__NVIC_EnableIRQ>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e04f      	b.n	80043c2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f84e 	bl	80043d8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <HAL_DMA2D_Init+0xbc>)
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6851      	ldr	r1, [r2, #4]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	69d2      	ldr	r2, [r2, #28]
 8004356:	4311      	orrs	r1, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	430b      	orrs	r3, r1
 800435e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004366:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <HAL_DMA2D_Init+0xc0>)
 8004368:	4013      	ands	r3, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6891      	ldr	r1, [r2, #8]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6992      	ldr	r2, [r2, #24]
 8004372:	4311      	orrs	r1, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	430b      	orrs	r3, r1
 800437a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004382:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <HAL_DMA2D_Init+0xc4>)
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68d1      	ldr	r1, [r2, #12]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	430b      	orrs	r3, r1
 8004390:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004398:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	051a      	lsls	r2, r3, #20
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	055b      	lsls	r3, r3, #21
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	fff8ffbf 	.word	0xfff8ffbf
 80043d0:	fffffef8 	.word	0xfffffef8
 80043d4:	ffff0000 	.word	0xffff0000

080043d8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_DMA2D_Start+0x1c>
 8004404:	2302      	movs	r3, #2
 8004406:	e018      	b.n	800443a <HAL_DMA2D_Start+0x4e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f9a4 	bl	8004770 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d056      	beq.n	800450c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800445e:	f7ff fe2b 	bl	80040b8 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004464:	e04b      	b.n	80044fe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004474:	2b00      	cmp	r3, #0
 8004476:	d023      	beq.n	80044c0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004486:	f043 0202 	orr.w	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2221      	movs	r2, #33	@ 0x21
 80044aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2204      	movs	r2, #4
 80044b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0a5      	b.n	800460c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d01a      	beq.n	80044fe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044c8:	f7ff fdf6 	bl	80040b8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <HAL_DMA2D_PollForTransfer+0x9c>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2203      	movs	r2, #3
 80044ee:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e086      	b.n	800460c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ac      	beq.n	8004466 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d061      	beq.n	80045f2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800452e:	f7ff fdc3 	bl	80040b8 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004534:	e056      	b.n	80045e4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02e      	beq.n	80045a6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800456c:	f043 0202 	orr.w	r2, r3, #2
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004582:	f043 0201 	orr.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2229      	movs	r2, #41	@ 0x29
 8004590:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e032      	b.n	800460c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d01a      	beq.n	80045e4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7ff fd83 	bl	80040b8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <HAL_DMA2D_PollForTransfer+0x182>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10f      	bne.n	80045e4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2203      	movs	r2, #3
 80045d4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e013      	b.n	800460c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0a1      	beq.n	8004536 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2212      	movs	r2, #18
 80045f8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_DMA2D_ConfigLayer+0x24>
 8004634:	2302      	movs	r3, #2
 8004636:	e092      	b.n	800475e <HAL_DMA2D_ConfigLayer+0x14a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	3328      	adds	r3, #40	@ 0x28
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800466c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004678:	4b3c      	ldr	r3, [pc, #240]	@ (800476c <HAL_DMA2D_ConfigLayer+0x158>)
 800467a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b0a      	cmp	r3, #10
 8004682:	d003      	beq.n	800468c <HAL_DMA2D_ConfigLayer+0x78>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b09      	cmp	r3, #9
 800468a:	d107      	bne.n	800469c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e005      	b.n	80046a8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d120      	bne.n	80046f0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	43db      	mvns	r3, r3
 80046b8:	ea02 0103 	and.w	r1, r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b0a      	cmp	r3, #10
 80046d6:	d003      	beq.n	80046e0 <HAL_DMA2D_ConfigLayer+0xcc>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b09      	cmp	r3, #9
 80046de:	d135      	bne.n	800474c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80046ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80046ee:	e02d      	b.n	800474c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b0b      	cmp	r3, #11
 80046f6:	d109      	bne.n	800470c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	049b      	lsls	r3, r3, #18
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800470a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	43db      	mvns	r3, r3
 8004716:	ea02 0103 	and.w	r1, r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	430a      	orrs	r2, r1
 8004722:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b0a      	cmp	r3, #10
 8004734:	d003      	beq.n	800473e <HAL_DMA2D_ConfigLayer+0x12a>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b09      	cmp	r3, #9
 800473c:	d106      	bne.n	800474c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800474a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	ff33000f 	.word	0xff33000f

08004770 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004770:	b480      	push	{r7}
 8004772:	b08b      	sub	sp, #44	@ 0x2c
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	041a      	lsls	r2, r3, #16
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	431a      	orrs	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047a8:	d174      	bne.n	8004894 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80047b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80047b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80047c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	4313      	orrs	r3, r2
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e0:	e053      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d106      	bne.n	80047f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f6:	e048      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d111      	bne.n	8004824 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	0cdb      	lsrs	r3, r3, #19
 8004804:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	0a9b      	lsrs	r3, r3, #10
 800480a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	08db      	lsrs	r3, r3, #3
 8004810:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	02db      	lsls	r3, r3, #11
 800481a:	4313      	orrs	r3, r2
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	e032      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d117      	bne.n	800485c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	0fdb      	lsrs	r3, r3, #31
 8004830:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	0cdb      	lsrs	r3, r3, #19
 8004836:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	0adb      	lsrs	r3, r3, #11
 800483c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	08db      	lsrs	r3, r3, #3
 8004842:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	431a      	orrs	r2, r3
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	03db      	lsls	r3, r3, #15
 8004852:	4313      	orrs	r3, r2
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
 800485a:	e016      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	0f1b      	lsrs	r3, r3, #28
 8004860:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	0b1b      	lsrs	r3, r3, #12
 800486c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	011a      	lsls	r2, r3, #4
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	431a      	orrs	r2, r3
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	031b      	lsls	r3, r3, #12
 8004882:	4313      	orrs	r3, r2
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004890:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004892:	e00d      	b.n	80048b0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800489c:	d104      	bne.n	80048a8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	615a      	str	r2, [r3, #20]
}
 80048a6:	e003      	b.n	80048b0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	60da      	str	r2, [r3, #12]
}
 80048b0:	bf00      	nop
 80048b2:	372c      	adds	r7, #44	@ 0x2c
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	011a      	lsls	r2, r3, #4
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <HAL_EXTI_IRQHandler+0x5c>)
 80048e6:	4413      	add	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4013      	ands	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4798      	blx	r3
    }
  }
}
 800490e:	bf00      	nop
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	58000088 	.word	0x58000088

0800491c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	@ 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800492a:	4b89      	ldr	r3, [pc, #548]	@ (8004b50 <HAL_GPIO_Init+0x234>)
 800492c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800492e:	e194      	b.n	8004c5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2101      	movs	r1, #1
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8186 	beq.w	8004c54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d005      	beq.n	8004960 <HAL_GPIO_Init+0x44>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d130      	bne.n	80049c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	2203      	movs	r2, #3
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004996:	2201      	movs	r2, #1
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	f003 0201 	and.w	r2, r3, #1
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d017      	beq.n	80049fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	2203      	movs	r2, #3
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d123      	bne.n	8004a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	08da      	lsrs	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3208      	adds	r2, #8
 8004a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	220f      	movs	r2, #15
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	08da      	lsrs	r2, r3, #3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3208      	adds	r2, #8
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0203 	and.w	r2, r3, #3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80e0 	beq.w	8004c54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a94:	4b2f      	ldr	r3, [pc, #188]	@ (8004b54 <HAL_GPIO_Init+0x238>)
 8004a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a9a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b54 <HAL_GPIO_Init+0x238>)
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b54 <HAL_GPIO_Init+0x238>)
 8004aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ab2:	4a29      	ldr	r2, [pc, #164]	@ (8004b58 <HAL_GPIO_Init+0x23c>)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	3302      	adds	r3, #2
 8004aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	220f      	movs	r2, #15
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <HAL_GPIO_Init+0x240>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d052      	beq.n	8004b84 <HAL_GPIO_Init+0x268>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b60 <HAL_GPIO_Init+0x244>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d031      	beq.n	8004b4a <HAL_GPIO_Init+0x22e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b64 <HAL_GPIO_Init+0x248>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d02b      	beq.n	8004b46 <HAL_GPIO_Init+0x22a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <HAL_GPIO_Init+0x24c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d025      	beq.n	8004b42 <HAL_GPIO_Init+0x226>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b6c <HAL_GPIO_Init+0x250>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01f      	beq.n	8004b3e <HAL_GPIO_Init+0x222>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1b      	ldr	r2, [pc, #108]	@ (8004b70 <HAL_GPIO_Init+0x254>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d019      	beq.n	8004b3a <HAL_GPIO_Init+0x21e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1a      	ldr	r2, [pc, #104]	@ (8004b74 <HAL_GPIO_Init+0x258>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_GPIO_Init+0x21a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a19      	ldr	r2, [pc, #100]	@ (8004b78 <HAL_GPIO_Init+0x25c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00d      	beq.n	8004b32 <HAL_GPIO_Init+0x216>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <HAL_GPIO_Init+0x260>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <HAL_GPIO_Init+0x212>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a17      	ldr	r2, [pc, #92]	@ (8004b80 <HAL_GPIO_Init+0x264>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <HAL_GPIO_Init+0x20e>
 8004b26:	2309      	movs	r3, #9
 8004b28:	e02d      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b2a:	230a      	movs	r3, #10
 8004b2c:	e02b      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	e029      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b32:	2307      	movs	r3, #7
 8004b34:	e027      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b36:	2306      	movs	r3, #6
 8004b38:	e025      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	e023      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b3e:	2304      	movs	r3, #4
 8004b40:	e021      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b42:	2303      	movs	r3, #3
 8004b44:	e01f      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e01d      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e01b      	b.n	8004b86 <HAL_GPIO_Init+0x26a>
 8004b4e:	bf00      	nop
 8004b50:	58000080 	.word	0x58000080
 8004b54:	58024400 	.word	0x58024400
 8004b58:	58000400 	.word	0x58000400
 8004b5c:	58020000 	.word	0x58020000
 8004b60:	58020400 	.word	0x58020400
 8004b64:	58020800 	.word	0x58020800
 8004b68:	58020c00 	.word	0x58020c00
 8004b6c:	58021000 	.word	0x58021000
 8004b70:	58021400 	.word	0x58021400
 8004b74:	58021800 	.word	0x58021800
 8004b78:	58021c00 	.word	0x58021c00
 8004b7c:	58022000 	.word	0x58022000
 8004b80:	58022400 	.word	0x58022400
 8004b84:	2300      	movs	r3, #0
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	f002 0203 	and.w	r2, r2, #3
 8004b8c:	0092      	lsls	r2, r2, #2
 8004b8e:	4093      	lsls	r3, r2
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b96:	4938      	ldr	r1, [pc, #224]	@ (8004c78 <HAL_GPIO_Init+0x35c>)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f47f ae63 	bne.w	8004930 <HAL_GPIO_Init+0x14>
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	3724      	adds	r7, #36	@ 0x24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	58000400 	.word	0x58000400

08004c7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c8a:	4b75      	ldr	r3, [pc, #468]	@ (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004c8c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004c8e:	e0d9      	b.n	8004e44 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004c90:	2201      	movs	r2, #1
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80cc 	beq.w	8004e3e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004ca6:	4a6f      	ldr	r2, [pc, #444]	@ (8004e64 <HAL_GPIO_DeInit+0x1e8>)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	3302      	adds	r3, #2
 8004cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	220f      	movs	r2, #15
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a67      	ldr	r2, [pc, #412]	@ (8004e68 <HAL_GPIO_DeInit+0x1ec>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d037      	beq.n	8004d40 <HAL_GPIO_DeInit+0xc4>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a66      	ldr	r2, [pc, #408]	@ (8004e6c <HAL_GPIO_DeInit+0x1f0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d031      	beq.n	8004d3c <HAL_GPIO_DeInit+0xc0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a65      	ldr	r2, [pc, #404]	@ (8004e70 <HAL_GPIO_DeInit+0x1f4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02b      	beq.n	8004d38 <HAL_GPIO_DeInit+0xbc>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a64      	ldr	r2, [pc, #400]	@ (8004e74 <HAL_GPIO_DeInit+0x1f8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d025      	beq.n	8004d34 <HAL_GPIO_DeInit+0xb8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a63      	ldr	r2, [pc, #396]	@ (8004e78 <HAL_GPIO_DeInit+0x1fc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d01f      	beq.n	8004d30 <HAL_GPIO_DeInit+0xb4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a62      	ldr	r2, [pc, #392]	@ (8004e7c <HAL_GPIO_DeInit+0x200>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d019      	beq.n	8004d2c <HAL_GPIO_DeInit+0xb0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a61      	ldr	r2, [pc, #388]	@ (8004e80 <HAL_GPIO_DeInit+0x204>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <HAL_GPIO_DeInit+0xac>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a60      	ldr	r2, [pc, #384]	@ (8004e84 <HAL_GPIO_DeInit+0x208>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00d      	beq.n	8004d24 <HAL_GPIO_DeInit+0xa8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8004e88 <HAL_GPIO_DeInit+0x20c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <HAL_GPIO_DeInit+0xa4>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a5e      	ldr	r2, [pc, #376]	@ (8004e8c <HAL_GPIO_DeInit+0x210>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d101      	bne.n	8004d1c <HAL_GPIO_DeInit+0xa0>
 8004d18:	2309      	movs	r3, #9
 8004d1a:	e012      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	e010      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d20:	2308      	movs	r3, #8
 8004d22:	e00e      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d24:	2307      	movs	r3, #7
 8004d26:	e00c      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d28:	2306      	movs	r3, #6
 8004d2a:	e00a      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d2c:	2305      	movs	r3, #5
 8004d2e:	e008      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d30:	2304      	movs	r3, #4
 8004d32:	e006      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d34:	2303      	movs	r3, #3
 8004d36:	e004      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e002      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004d40:	2300      	movs	r3, #0
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	f002 0203 	and.w	r2, r2, #3
 8004d48:	0092      	lsls	r2, r2, #2
 8004d4a:	4093      	lsls	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d136      	bne.n	8004dc0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	401a      	ands	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d8e:	4013      	ands	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	220f      	movs	r2, #15
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004da2:	4a30      	ldr	r2, [pc, #192]	@ (8004e64 <HAL_GPIO_DeInit+0x1e8>)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	3302      	adds	r3, #2
 8004daa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	482c      	ldr	r0, [pc, #176]	@ (8004e64 <HAL_GPIO_DeInit+0x1e8>)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	400a      	ands	r2, r1
 8004dba:	3302      	adds	r3, #2
 8004dbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2103      	movs	r1, #3
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	08da      	lsrs	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3208      	adds	r2, #8
 8004ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	220f      	movs	r2, #15
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	08d2      	lsrs	r2, r2, #3
 8004df4:	4019      	ands	r1, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3208      	adds	r2, #8
 8004dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2103      	movs	r1, #3
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	401a      	ands	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2103      	movs	r1, #3
 8004e32:	fa01 f303 	lsl.w	r3, r1, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	401a      	ands	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	3301      	adds	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f47f af1f 	bne.w	8004c90 <HAL_GPIO_DeInit+0x14>
  }
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	58000080 	.word	0x58000080
 8004e64:	58000400 	.word	0x58000400
 8004e68:	58020000 	.word	0x58020000
 8004e6c:	58020400 	.word	0x58020400
 8004e70:	58020800 	.word	0x58020800
 8004e74:	58020c00 	.word	0x58020c00
 8004e78:	58021000 	.word	0x58021000
 8004e7c:	58021400 	.word	0x58021400
 8004e80:	58021800 	.word	0x58021800
 8004e84:	58021c00 	.word	0x58021c00
 8004e88:	58022000 	.word	0x58022000
 8004e8c:	58022400 	.word	0x58022400

08004e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	807b      	strh	r3, [r7, #2]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ea0:	787b      	ldrb	r3, [r7, #1]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004eac:	e003      	b.n	8004eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	041a      	lsls	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	619a      	str	r2, [r3, #24]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e07f      	b.n	8004fd6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8a9 	bl	8005042 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2224      	movs	r2, #36	@ 0x24
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d107      	bne.n	8004f3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	e006      	b.n	8004f4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d104      	bne.n	8004f5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <HAL_I2C_Init+0x11c>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69d9      	ldr	r1, [r3, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	02008000 	.word	0x02008000

08004fe4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e021      	b.n	800503a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2224      	movs	r2, #36	@ 0x24
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f821 	bl	8005056 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	460b      	mov	r3, r1
 800507a:	817b      	strh	r3, [r7, #10]
 800507c:	4613      	mov	r3, r2
 800507e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b20      	cmp	r3, #32
 800508a:	f040 80da 	bne.w	8005242 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_I2C_Master_Transmit+0x30>
 8005098:	2302      	movs	r3, #2
 800509a:	e0d3      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050a4:	f7ff f808 	bl	80040b8 <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2319      	movs	r3, #25
 80050b0:	2201      	movs	r2, #1
 80050b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fdde 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0be      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2221      	movs	r2, #33	@ 0x21
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2210      	movs	r2, #16
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	893a      	ldrh	r2, [r7, #8]
 80050e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2bff      	cmp	r3, #255	@ 0xff
 80050f6:	d90e      	bls.n	8005116 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	22ff      	movs	r2, #255	@ 0xff
 80050fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005102:	b2da      	uxtb	r2, r3
 8005104:	8979      	ldrh	r1, [r7, #10]
 8005106:	4b51      	ldr	r3, [pc, #324]	@ (800524c <HAL_I2C_Master_Transmit+0x1e0>)
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 ffee 	bl	80060f0 <I2C_TransferConfig>
 8005114:	e06c      	b.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	8979      	ldrh	r1, [r7, #10]
 8005128:	4b48      	ldr	r3, [pc, #288]	@ (800524c <HAL_I2C_Master_Transmit+0x1e0>)
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 ffdd 	bl	80060f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005136:	e05b      	b.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	6a39      	ldr	r1, [r7, #32]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fdea 	bl	8005d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e07b      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d034      	beq.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d130      	bne.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2200      	movs	r2, #0
 8005196:	2180      	movs	r1, #128	@ 0x80
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fd6d 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04d      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2bff      	cmp	r3, #255	@ 0xff
 80051b0:	d90e      	bls.n	80051d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	22ff      	movs	r2, #255	@ 0xff
 80051b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 ff91 	bl	80060f0 <I2C_TransferConfig>
 80051ce:	e00f      	b.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	8979      	ldrh	r1, [r7, #10]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 ff80 	bl	80060f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d19e      	bne.n	8005138 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	6a39      	ldr	r1, [r7, #32]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 fdd0 	bl	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e01a      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2220      	movs	r2, #32
 8005214:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_I2C_Master_Transmit+0x1e4>)
 8005222:	400b      	ands	r3, r1
 8005224:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	80002000 	.word	0x80002000
 8005250:	fe00e800 	.word	0xfe00e800

08005254 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	461a      	mov	r2, r3
 8005260:	460b      	mov	r3, r1
 8005262:	817b      	strh	r3, [r7, #10]
 8005264:	4613      	mov	r3, r2
 8005266:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b20      	cmp	r3, #32
 8005272:	f040 80db 	bne.w	800542c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_I2C_Master_Receive+0x30>
 8005280:	2302      	movs	r3, #2
 8005282:	e0d4      	b.n	800542e <HAL_I2C_Master_Receive+0x1da>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800528c:	f7fe ff14 	bl	80040b8 <HAL_GetTick>
 8005290:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2319      	movs	r3, #25
 8005298:	2201      	movs	r2, #1
 800529a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fcea 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0bf      	b.n	800542e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2222      	movs	r2, #34	@ 0x22
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2210      	movs	r2, #16
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	893a      	ldrh	r2, [r7, #8]
 80052ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2bff      	cmp	r3, #255	@ 0xff
 80052de:	d90e      	bls.n	80052fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	22ff      	movs	r2, #255	@ 0xff
 80052e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	4b52      	ldr	r3, [pc, #328]	@ (8005438 <HAL_I2C_Master_Receive+0x1e4>)
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fefa 	bl	80060f0 <I2C_TransferConfig>
 80052fc:	e06d      	b.n	80053da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530c:	b2da      	uxtb	r2, r3
 800530e:	8979      	ldrh	r1, [r7, #10]
 8005310:	4b49      	ldr	r3, [pc, #292]	@ (8005438 <HAL_I2C_Master_Receive+0x1e4>)
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fee9 	bl	80060f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800531e:	e05c      	b.n	80053da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	6a39      	ldr	r1, [r7, #32]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 fd81 	bl	8005e2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e07c      	b.n	800542e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d034      	beq.n	80053da <HAL_I2C_Master_Receive+0x186>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	d130      	bne.n	80053da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2200      	movs	r2, #0
 8005380:	2180      	movs	r1, #128	@ 0x80
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fc78 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e04d      	b.n	800542e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	2bff      	cmp	r3, #255	@ 0xff
 800539a:	d90e      	bls.n	80053ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	22ff      	movs	r2, #255	@ 0xff
 80053a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	8979      	ldrh	r1, [r7, #10]
 80053aa:	2300      	movs	r3, #0
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fe9c 	bl	80060f0 <I2C_TransferConfig>
 80053b8:	e00f      	b.n	80053da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	8979      	ldrh	r1, [r7, #10]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fe8b 	bl	80060f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d19d      	bne.n	8005320 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	6a39      	ldr	r1, [r7, #32]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fcdb 	bl	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e01a      	b.n	800542e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2220      	movs	r2, #32
 80053fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <HAL_I2C_Master_Receive+0x1e8>)
 800540c:	400b      	ands	r3, r1
 800540e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	80002400 	.word	0x80002400
 800543c:	fe00e800 	.word	0xfe00e800

08005440 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	460b      	mov	r3, r1
 8005454:	813b      	strh	r3, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b20      	cmp	r3, #32
 8005464:	f040 80f9 	bne.w	800565a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_I2C_Mem_Write+0x34>
 800546e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800547a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0ed      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2C_Mem_Write+0x4e>
 800548a:	2302      	movs	r3, #2
 800548c:	e0e6      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005496:	f7fe fe0f 	bl	80040b8 <HAL_GetTick>
 800549a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2319      	movs	r3, #25
 80054a2:	2201      	movs	r2, #1
 80054a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fbe5 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0d1      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2221      	movs	r2, #33	@ 0x21
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2240      	movs	r2, #64	@ 0x40
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a3a      	ldr	r2, [r7, #32]
 80054d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054e0:	88f8      	ldrh	r0, [r7, #6]
 80054e2:	893a      	ldrh	r2, [r7, #8]
 80054e4:	8979      	ldrh	r1, [r7, #10]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4603      	mov	r3, r0
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 faf5 	bl	8005ae0 <I2C_RequestMemoryWrite>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0a9      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	2bff      	cmp	r3, #255	@ 0xff
 8005510:	d90e      	bls.n	8005530 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	22ff      	movs	r2, #255	@ 0xff
 8005516:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551c:	b2da      	uxtb	r2, r3
 800551e:	8979      	ldrh	r1, [r7, #10]
 8005520:	2300      	movs	r3, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fde1 	bl	80060f0 <I2C_TransferConfig>
 800552e:	e00f      	b.n	8005550 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553e:	b2da      	uxtb	r2, r3
 8005540:	8979      	ldrh	r1, [r7, #10]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 fdd0 	bl	80060f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fbde 	bl	8005d16 <I2C_WaitOnTXISFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e07b      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d034      	beq.n	8005608 <HAL_I2C_Mem_Write+0x1c8>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d130      	bne.n	8005608 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ac:	2200      	movs	r2, #0
 80055ae:	2180      	movs	r1, #128	@ 0x80
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fb61 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e04d      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2bff      	cmp	r3, #255	@ 0xff
 80055c8:	d90e      	bls.n	80055e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	@ 0xff
 80055ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	8979      	ldrh	r1, [r7, #10]
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fd85 	bl	80060f0 <I2C_TransferConfig>
 80055e6:	e00f      	b.n	8005608 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	8979      	ldrh	r1, [r7, #10]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fd74 	bl	80060f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d19e      	bne.n	8005550 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fbc4 	bl	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e01a      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2220      	movs	r2, #32
 800562c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <HAL_I2C_Mem_Write+0x224>)
 800563a:	400b      	ands	r3, r1
 800563c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	e000      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	fe00e800 	.word	0xfe00e800

08005668 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4603      	mov	r3, r0
 8005678:	817b      	strh	r3, [r7, #10]
 800567a:	460b      	mov	r3, r1
 800567c:	813b      	strh	r3, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	f040 80fd 	bne.w	800588a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_I2C_Mem_Read+0x34>
 8005696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0f1      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_I2C_Mem_Read+0x4e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0ea      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056be:	f7fe fcfb 	bl	80040b8 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2319      	movs	r3, #25
 80056ca:	2201      	movs	r2, #1
 80056cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fad1 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0d5      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2222      	movs	r2, #34	@ 0x22
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2240      	movs	r2, #64	@ 0x40
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005708:	88f8      	ldrh	r0, [r7, #6]
 800570a:	893a      	ldrh	r2, [r7, #8]
 800570c:	8979      	ldrh	r1, [r7, #10]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4603      	mov	r3, r0
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa35 	bl	8005b88 <I2C_RequestMemoryRead>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0ad      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2bff      	cmp	r3, #255	@ 0xff
 8005738:	d90e      	bls.n	8005758 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	22ff      	movs	r2, #255	@ 0xff
 800573e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005744:	b2da      	uxtb	r2, r3
 8005746:	8979      	ldrh	r1, [r7, #10]
 8005748:	4b52      	ldr	r3, [pc, #328]	@ (8005894 <HAL_I2C_Mem_Read+0x22c>)
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fccd 	bl	80060f0 <I2C_TransferConfig>
 8005756:	e00f      	b.n	8005778 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005766:	b2da      	uxtb	r2, r3
 8005768:	8979      	ldrh	r1, [r7, #10]
 800576a:	4b4a      	ldr	r3, [pc, #296]	@ (8005894 <HAL_I2C_Mem_Read+0x22c>)
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fcbc 	bl	80060f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	2200      	movs	r2, #0
 8005780:	2104      	movs	r1, #4
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fa78 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e07c      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d034      	beq.n	8005838 <HAL_I2C_Mem_Read+0x1d0>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d130      	bne.n	8005838 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fa49 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e04d      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2bff      	cmp	r3, #255	@ 0xff
 80057f8:	d90e      	bls.n	8005818 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	22ff      	movs	r2, #255	@ 0xff
 80057fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	b2da      	uxtb	r2, r3
 8005806:	8979      	ldrh	r1, [r7, #10]
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fc6d 	bl	80060f0 <I2C_TransferConfig>
 8005816:	e00f      	b.n	8005838 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005826:	b2da      	uxtb	r2, r3
 8005828:	8979      	ldrh	r1, [r7, #10]
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fc5c 	bl	80060f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d19a      	bne.n	8005778 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 faac 	bl	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e01a      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2220      	movs	r2, #32
 800585c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6859      	ldr	r1, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <HAL_I2C_Mem_Read+0x230>)
 800586a:	400b      	ands	r3, r1
 800586c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
  }
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	80002400 	.word	0x80002400
 8005898:	fe00e800 	.word	0xfe00e800

0800589c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	@ 0x28
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	460b      	mov	r3, r1
 80058aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	f040 80ef 	bne.w	8005a9c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058cc:	d101      	bne.n	80058d2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
 80058d0:	e0e5      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_I2C_IsDeviceReady+0x44>
 80058dc:	2302      	movs	r3, #2
 80058de:	e0de      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2224      	movs	r2, #36	@ 0x24
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d105      	bne.n	800590a <HAL_I2C_IsDeviceReady+0x6e>
 80058fe:	897b      	ldrh	r3, [r7, #10]
 8005900:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005904:	4b68      	ldr	r3, [pc, #416]	@ (8005aa8 <HAL_I2C_IsDeviceReady+0x20c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	e004      	b.n	8005914 <HAL_I2C_IsDeviceReady+0x78>
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005910:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800591a:	f7fe fbcd 	bl	80040b8 <HAL_GetTick>
 800591e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b10      	cmp	r3, #16
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800594c:	e034      	b.n	80059b8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d01a      	beq.n	800598c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005956:	f7fe fbaf 	bl	80040b8 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d302      	bcc.n	800596c <HAL_I2C_IsDeviceReady+0xd0>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10f      	bne.n	800598c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e088      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b20      	cmp	r3, #32
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80059b8:	7ffb      	ldrb	r3, [r7, #31]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <HAL_I2C_IsDeviceReady+0x128>
 80059be:	7fbb      	ldrb	r3, [r7, #30]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0c4      	beq.n	800594e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d01a      	beq.n	8005a08 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2200      	movs	r2, #0
 80059da:	2120      	movs	r1, #32
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f94b 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e058      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2220      	movs	r2, #32
 80059f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e04a      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2120      	movs	r1, #32
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f930 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e03d      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2210      	movs	r2, #16
 8005a28:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d118      	bne.n	8005a6c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a48:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2200      	movs	r2, #0
 8005a52:	2120      	movs	r1, #32
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f90f 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e01c      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	f63f af3d 	bhi.w	80058f6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	02002000 	.word	0x02002000

08005aac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aba:	b2db      	uxtb	r3, r3
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	817b      	strh	r3, [r7, #10]
 8005af2:	460b      	mov	r3, r1
 8005af4:	813b      	strh	r3, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	8979      	ldrh	r1, [r7, #10]
 8005b00:	4b20      	ldr	r3, [pc, #128]	@ (8005b84 <I2C_RequestMemoryWrite+0xa4>)
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 faf1 	bl	80060f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8ff 	bl	8005d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e02c      	b.n	8005b7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b32:	e015      	b.n	8005b60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b34:	893b      	ldrh	r3, [r7, #8]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	69b9      	ldr	r1, [r7, #24]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f8e5 	bl	8005d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e012      	b.n	8005b7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b56:	893b      	ldrh	r3, [r7, #8]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2200      	movs	r2, #0
 8005b68:	2180      	movs	r1, #128	@ 0x80
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f884 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	80002000 	.word	0x80002000

08005b88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	813b      	strh	r3, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	8979      	ldrh	r1, [r7, #10]
 8005ba8:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <I2C_RequestMemoryRead+0xa4>)
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fa9e 	bl	80060f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f8ac 	bl	8005d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e02c      	b.n	8005c22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d105      	bne.n	8005bda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bce:	893b      	ldrh	r3, [r7, #8]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bd8:	e015      	b.n	8005c06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bda:	893b      	ldrh	r3, [r7, #8]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f892 	bl	8005d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e012      	b.n	8005c22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bfc:	893b      	ldrh	r3, [r7, #8]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2140      	movs	r1, #64	@ 0x40
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f831 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	80002000 	.word	0x80002000

08005c30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d103      	bne.n	8005c4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d007      	beq.n	8005c6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	619a      	str	r2, [r3, #24]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c88:	e031      	b.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d02d      	beq.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7fe fa11 	bl	80040b8 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d122      	bne.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2301      	moveq	r3, #1
 8005cba:	2300      	movne	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d113      	bne.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e00f      	b.n	8005d0e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d0be      	beq.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d22:	e033      	b.n	8005d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f901 	bl	8005f30 <I2C_IsErrorOccurred>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e031      	b.n	8005d9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d025      	beq.n	8005d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d40:	f7fe f9ba 	bl	80040b8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d302      	bcc.n	8005d56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d11a      	bne.n	8005d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d013      	beq.n	8005d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e007      	b.n	8005d9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d1c4      	bne.n	8005d24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005db0:	e02f      	b.n	8005e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f8ba 	bl	8005f30 <I2C_IsErrorOccurred>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e02d      	b.n	8005e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc6:	f7fe f977 	bl	80040b8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d11a      	bne.n	8005e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d013      	beq.n	8005e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f043 0220 	orr.w	r2, r3, #32
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e007      	b.n	8005e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d1c8      	bne.n	8005db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e38:	e06b      	b.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f876 	bl	8005f30 <I2C_IsErrorOccurred>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e069      	b.n	8005f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d138      	bne.n	8005ece <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d105      	bne.n	8005e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e055      	b.n	8005f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d107      	bne.n	8005e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2210      	movs	r2, #16
 8005e8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e92:	e002      	b.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6859      	ldr	r1, [r3, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b1f      	ldr	r3, [pc, #124]	@ (8005f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e029      	b.n	8005f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ece:	f7fe f8f3 	bl	80040b8 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d302      	bcc.n	8005ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d116      	bne.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d00f      	beq.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e007      	b.n	8005f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d18c      	bne.n	8005e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	fe00e800 	.word	0xfe00e800

08005f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d068      	beq.n	800602e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f64:	e049      	b.n	8005ffa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d045      	beq.n	8005ffa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f6e:	f7fe f8a3 	bl	80040b8 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <I2C_IsErrorOccurred+0x54>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d13a      	bne.n	8005ffa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa6:	d121      	bne.n	8005fec <I2C_IsErrorOccurred+0xbc>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fae:	d01d      	beq.n	8005fec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d01a      	beq.n	8005fec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fc6:	f7fe f877 	bl	80040b8 <HAL_GetTick>
 8005fca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fcc:	e00e      	b.n	8005fec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fce:	f7fe f873 	bl	80040b8 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b19      	cmp	r3, #25
 8005fda:	d907      	bls.n	8005fec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	f043 0320 	orr.w	r3, r3, #32
 8005fe2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005fea:	e006      	b.n	8005ffa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d1e9      	bne.n	8005fce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b20      	cmp	r3, #32
 8006006:	d003      	beq.n	8006010 <I2C_IsErrorOccurred+0xe0>
 8006008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0aa      	beq.n	8005f66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2220      	movs	r2, #32
 800601e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f043 0304 	orr.w	r3, r3, #4
 8006026:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	f043 0308 	orr.w	r3, r3, #8
 8006068:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006072:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f043 0302 	orr.w	r3, r3, #2
 800608a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006094:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800609c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01c      	beq.n	80060de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fdc3 	bl	8005c30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b0d      	ldr	r3, [pc, #52]	@ (80060ec <I2C_IsErrorOccurred+0x1bc>)
 80060b6:	400b      	ands	r3, r1
 80060b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80060de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3728      	adds	r7, #40	@ 0x28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	fe00e800 	.word	0xfe00e800

080060f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	817b      	strh	r3, [r7, #10]
 80060fe:	4613      	mov	r3, r2
 8006100:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006102:	897b      	ldrh	r3, [r7, #10]
 8006104:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006108:	7a7b      	ldrb	r3, [r7, #9]
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006110:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	4313      	orrs	r3, r2
 800611a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800611e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	0d5b      	lsrs	r3, r3, #21
 800612a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800612e:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <I2C_TransferConfig+0x60>)
 8006130:	430b      	orrs	r3, r1
 8006132:	43db      	mvns	r3, r3
 8006134:	ea02 0103 	and.w	r1, r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	03ff63ff 	.word	0x03ff63ff

08006154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b20      	cmp	r3, #32
 8006168:	d138      	bne.n	80061dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006174:	2302      	movs	r3, #2
 8006176:	e032      	b.n	80061de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	@ 0x24
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d139      	bne.n	8006274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800620a:	2302      	movs	r3, #2
 800620c:	e033      	b.n	8006276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2224      	movs	r2, #36	@ 0x24
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800623c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e0bf      	b.n	8006416 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8ba 	bl	8006424 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80062c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6999      	ldr	r1, [r3, #24]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6899      	ldr	r1, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006420 <HAL_LTDC_Init+0x19c>)
 80062f8:	400b      	ands	r3, r1
 80062fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6899      	ldr	r1, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68d9      	ldr	r1, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4b3e      	ldr	r3, [pc, #248]	@ (8006420 <HAL_LTDC_Init+0x19c>)
 8006326:	400b      	ands	r3, r1
 8006328:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68d9      	ldr	r1, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6919      	ldr	r1, [r3, #16]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b33      	ldr	r3, [pc, #204]	@ (8006420 <HAL_LTDC_Init+0x19c>)
 8006354:	400b      	ands	r3, r1
 8006356:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	041b      	lsls	r3, r3, #16
 800635e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6919      	ldr	r1, [r3, #16]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6959      	ldr	r1, [r3, #20]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <HAL_LTDC_Init+0x19c>)
 8006382:	400b      	ands	r3, r1
 8006384:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6959      	ldr	r1, [r3, #20]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80063c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0206 	orr.w	r2, r2, #6
 80063f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	f000f800 	.word	0xf000f800

08006424 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006438:	b5b0      	push	{r4, r5, r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_LTDC_ConfigLayer+0x1a>
 800644e:	2302      	movs	r3, #2
 8006450:	e02c      	b.n	80064ac <HAL_LTDC_ConfigLayer+0x74>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2134      	movs	r1, #52	@ 0x34
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	4413      	add	r3, r2
 800646e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800647a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800647c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f811 	bl	80064b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2201      	movs	r2, #1
 8006498:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bdb0      	pop	{r4, r5, r7, pc}

080064b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b089      	sub	sp, #36	@ 0x24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	0c1b      	lsrs	r3, r3, #16
 80064cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d0:	4413      	add	r3, r2
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	01db      	lsls	r3, r3, #7
 80064e0:	4413      	add	r3, r2
 80064e2:	3384      	adds	r3, #132	@ 0x84
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	4611      	mov	r1, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	01d2      	lsls	r2, r2, #7
 80064f0:	440a      	add	r2, r1
 80064f2:	3284      	adds	r2, #132	@ 0x84
 80064f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80064f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800650a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800650c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	01db      	lsls	r3, r3, #7
 8006518:	440b      	add	r3, r1
 800651a:	3384      	adds	r3, #132	@ 0x84
 800651c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006522:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006532:	4413      	add	r3, r2
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	4413      	add	r3, r2
 8006544:	3384      	adds	r3, #132	@ 0x84
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4611      	mov	r1, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	01d2      	lsls	r2, r2, #7
 8006552:	440a      	add	r2, r1
 8006554:	3284      	adds	r2, #132	@ 0x84
 8006556:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800655a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800656a:	4413      	add	r3, r2
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	01db      	lsls	r3, r3, #7
 8006578:	440b      	add	r3, r1
 800657a:	3384      	adds	r3, #132	@ 0x84
 800657c:	4619      	mov	r1, r3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4313      	orrs	r3, r2
 8006582:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	01db      	lsls	r3, r3, #7
 800658e:	4413      	add	r3, r2
 8006590:	3384      	adds	r3, #132	@ 0x84
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	4611      	mov	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	01d2      	lsls	r2, r2, #7
 800659e:	440a      	add	r2, r1
 80065a0:	3284      	adds	r2, #132	@ 0x84
 80065a2:	f023 0307 	bic.w	r3, r3, #7
 80065a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	01db      	lsls	r3, r3, #7
 80065b2:	4413      	add	r3, r2
 80065b4:	3384      	adds	r3, #132	@ 0x84
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	061b      	lsls	r3, r3, #24
 80065d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	01db      	lsls	r3, r3, #7
 80065e4:	4413      	add	r3, r2
 80065e6:	3384      	adds	r3, #132	@ 0x84
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	01db      	lsls	r3, r3, #7
 80065f4:	4413      	add	r3, r2
 80065f6:	3384      	adds	r3, #132	@ 0x84
 80065f8:	461a      	mov	r2, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006604:	461a      	mov	r2, r3
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	431a      	orrs	r2, r3
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	01db      	lsls	r3, r3, #7
 8006618:	440b      	add	r3, r1
 800661a:	3384      	adds	r3, #132	@ 0x84
 800661c:	4619      	mov	r1, r3
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	01db      	lsls	r3, r3, #7
 800662e:	4413      	add	r3, r2
 8006630:	3384      	adds	r3, #132	@ 0x84
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	4611      	mov	r1, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	01d2      	lsls	r2, r2, #7
 800663e:	440a      	add	r2, r1
 8006640:	3284      	adds	r2, #132	@ 0x84
 8006642:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006646:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	01db      	lsls	r3, r3, #7
 8006652:	4413      	add	r3, r2
 8006654:	3384      	adds	r3, #132	@ 0x84
 8006656:	461a      	mov	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	01db      	lsls	r3, r3, #7
 8006668:	4413      	add	r3, r2
 800666a:	3384      	adds	r3, #132	@ 0x84
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	01db      	lsls	r3, r3, #7
 8006678:	440b      	add	r3, r1
 800667a:	3384      	adds	r3, #132	@ 0x84
 800667c:	4619      	mov	r1, r3
 800667e:	4b58      	ldr	r3, [pc, #352]	@ (80067e0 <LTDC_SetConfig+0x32c>)
 8006680:	4013      	ands	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	68f9      	ldr	r1, [r7, #12]
 800668e:	6809      	ldr	r1, [r1, #0]
 8006690:	4608      	mov	r0, r1
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	01c9      	lsls	r1, r1, #7
 8006696:	4401      	add	r1, r0
 8006698:	3184      	adds	r1, #132	@ 0x84
 800669a:	4313      	orrs	r3, r2
 800669c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	01db      	lsls	r3, r3, #7
 80066a8:	4413      	add	r3, r2
 80066aa:	3384      	adds	r3, #132	@ 0x84
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	01db      	lsls	r3, r3, #7
 80066b8:	4413      	add	r3, r2
 80066ba:	3384      	adds	r3, #132	@ 0x84
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	01db      	lsls	r3, r3, #7
 80066cc:	4413      	add	r3, r2
 80066ce:	3384      	adds	r3, #132	@ 0x84
 80066d0:	461a      	mov	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80066e0:	2304      	movs	r3, #4
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e01b      	b.n	800671e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d102      	bne.n	80066f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80066ee:	2303      	movs	r3, #3
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	e014      	b.n	800671e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d00b      	beq.n	8006714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006700:	2b02      	cmp	r3, #2
 8006702:	d007      	beq.n	8006714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006708:	2b03      	cmp	r3, #3
 800670a:	d003      	beq.n	8006714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006710:	2b07      	cmp	r3, #7
 8006712:	d102      	bne.n	800671a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006714:	2302      	movs	r3, #2
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	e001      	b.n	800671e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800671a:	2301      	movs	r3, #1
 800671c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	01db      	lsls	r3, r3, #7
 8006728:	4413      	add	r3, r2
 800672a:	3384      	adds	r3, #132	@ 0x84
 800672c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	4611      	mov	r1, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	01d2      	lsls	r2, r2, #7
 8006738:	440a      	add	r2, r1
 800673a:	3284      	adds	r2, #132	@ 0x84
 800673c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006740:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	041a      	lsls	r2, r3, #16
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6859      	ldr	r1, [r3, #4]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	1acb      	subs	r3, r1, r3
 8006758:	69f9      	ldr	r1, [r7, #28]
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	3307      	adds	r3, #7
 8006760:	68f9      	ldr	r1, [r7, #12]
 8006762:	6809      	ldr	r1, [r1, #0]
 8006764:	4608      	mov	r0, r1
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	01c9      	lsls	r1, r1, #7
 800676a:	4401      	add	r1, r0
 800676c:	3184      	adds	r1, #132	@ 0x84
 800676e:	4313      	orrs	r3, r2
 8006770:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	01db      	lsls	r3, r3, #7
 800677c:	4413      	add	r3, r2
 800677e:	3384      	adds	r3, #132	@ 0x84
 8006780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	01db      	lsls	r3, r3, #7
 800678c:	440b      	add	r3, r1
 800678e:	3384      	adds	r3, #132	@ 0x84
 8006790:	4619      	mov	r1, r3
 8006792:	4b14      	ldr	r3, [pc, #80]	@ (80067e4 <LTDC_SetConfig+0x330>)
 8006794:	4013      	ands	r3, r2
 8006796:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	01db      	lsls	r3, r3, #7
 80067a2:	4413      	add	r3, r2
 80067a4:	3384      	adds	r3, #132	@ 0x84
 80067a6:	461a      	mov	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	01db      	lsls	r3, r3, #7
 80067b8:	4413      	add	r3, r2
 80067ba:	3384      	adds	r3, #132	@ 0x84
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	4611      	mov	r1, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	01d2      	lsls	r2, r2, #7
 80067c8:	440a      	add	r2, r1
 80067ca:	3284      	adds	r2, #132	@ 0x84
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	6013      	str	r3, [r2, #0]
}
 80067d2:	bf00      	nop
 80067d4:	3724      	adds	r7, #36	@ 0x24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	fffff8f8 	.word	0xfffff8f8
 80067e4:	fffff800 	.word	0xfffff800

080067e8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067f0:	f7fd fc62 	bl	80040b8 <HAL_GetTick>
 80067f4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e03b      	b.n	8006878 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0201 	bic.w	r2, r2, #1
 800681e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006820:	e00f      	b.n	8006842 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006822:	f7fd fc49 	bl	80040b8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b05      	cmp	r3, #5
 800682e:	d908      	bls.n	8006842 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2240      	movs	r2, #64	@ 0x40
 8006834:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2203      	movs	r2, #3
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e01a      	b.n	8006878 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e8      	bne.n	8006822 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f86d 	bl	8006930 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e048      	b.n	8006924 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0201 	bic.w	r2, r2, #1
 80068a0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2200      	movs	r2, #0
 80068b0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2200      	movs	r2, #0
 80068c8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	221f      	movs	r2, #31
 80068f8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68d9      	ldr	r1, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006956:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006962:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800696e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	3b01      	subs	r3, #1
 8006976:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8006978:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006984:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006986:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006990:	d107      	bne.n	80069a2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80069a0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da11      	bge.n	80069d6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695a      	ldr	r2, [r3, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80069c0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c6:	425b      	negs	r3, r3
 80069c8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	b292      	uxth	r2, r2
 80069d2:	621a      	str	r2, [r3, #32]
 80069d4:	e006      	b.n	80069e4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	b292      	uxth	r2, r2
 80069e2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da15      	bge.n	8006a18 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80069fa:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	425b      	negs	r3, r3
 8006a02:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a19      	ldr	r1, [r3, #32]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	041a      	lsls	r2, r3, #16
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	621a      	str	r2, [r3, #32]
 8006a16:	e009      	b.n	8006a2c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6a19      	ldr	r1, [r3, #32]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	041a      	lsls	r2, r3, #16
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a34:	d006      	beq.n	8006a44 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a42:	e003      	b.n	8006a4c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2200      	movs	r2, #0
 8006a52:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006a54:	bf00      	nop
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006a68:	4b19      	ldr	r3, [pc, #100]	@ (8006ad0 <HAL_PWREx_ConfigSupply+0x70>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d00a      	beq.n	8006a8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a74:	4b16      	ldr	r3, [pc, #88]	@ (8006ad0 <HAL_PWREx_ConfigSupply+0x70>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d001      	beq.n	8006a86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e01f      	b.n	8006ac6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e01d      	b.n	8006ac6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a8a:	4b11      	ldr	r3, [pc, #68]	@ (8006ad0 <HAL_PWREx_ConfigSupply+0x70>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f023 0207 	bic.w	r2, r3, #7
 8006a92:	490f      	ldr	r1, [pc, #60]	@ (8006ad0 <HAL_PWREx_ConfigSupply+0x70>)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a9a:	f7fd fb0d 	bl	80040b8 <HAL_GetTick>
 8006a9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006aa0:	e009      	b.n	8006ab6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006aa2:	f7fd fb09 	bl	80040b8 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ab0:	d901      	bls.n	8006ab6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e007      	b.n	8006ac6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ab6:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <HAL_PWREx_ConfigSupply+0x70>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac2:	d1ee      	bne.n	8006aa2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	58024800 	.word	0x58024800

08006ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08c      	sub	sp, #48	@ 0x30
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f000 bc48 	b.w	8007378 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8088 	beq.w	8006c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006af6:	4b99      	ldr	r3, [pc, #612]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b00:	4b96      	ldr	r3, [pc, #600]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d007      	beq.n	8006b1c <HAL_RCC_OscConfig+0x48>
 8006b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0e:	2b18      	cmp	r3, #24
 8006b10:	d111      	bne.n	8006b36 <HAL_RCC_OscConfig+0x62>
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d10c      	bne.n	8006b36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d06d      	beq.n	8006c04 <HAL_RCC_OscConfig+0x130>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d169      	bne.n	8006c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f000 bc21 	b.w	8007378 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b3e:	d106      	bne.n	8006b4e <HAL_RCC_OscConfig+0x7a>
 8006b40:	4b86      	ldr	r3, [pc, #536]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a85      	ldr	r2, [pc, #532]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e02e      	b.n	8006bac <HAL_RCC_OscConfig+0xd8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x9c>
 8006b56:	4b81      	ldr	r3, [pc, #516]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a80      	ldr	r2, [pc, #512]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	4b7e      	ldr	r3, [pc, #504]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a7d      	ldr	r2, [pc, #500]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e01d      	b.n	8006bac <HAL_RCC_OscConfig+0xd8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0xc0>
 8006b7a:	4b78      	ldr	r3, [pc, #480]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a77      	ldr	r2, [pc, #476]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	4b75      	ldr	r3, [pc, #468]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a74      	ldr	r2, [pc, #464]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_OscConfig+0xd8>
 8006b94:	4b71      	ldr	r3, [pc, #452]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a70      	ldr	r2, [pc, #448]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	4b6e      	ldr	r3, [pc, #440]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6d      	ldr	r2, [pc, #436]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fd fa80 	bl	80040b8 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fd fa7c 	bl	80040b8 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	@ 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e3d4      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bce:	4b63      	ldr	r3, [pc, #396]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0xe8>
 8006bda:	e014      	b.n	8006c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fd fa6c 	bl	80040b8 <HAL_GetTick>
 8006be0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fd fa68 	bl	80040b8 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	@ 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e3c0      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bf6:	4b59      	ldr	r3, [pc, #356]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x110>
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80ca 	beq.w	8006da8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c14:	4b51      	ldr	r3, [pc, #324]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <HAL_RCC_OscConfig+0x166>
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	2b18      	cmp	r3, #24
 8006c2e:	d156      	bne.n	8006cde <HAL_RCC_OscConfig+0x20a>
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d151      	bne.n	8006cde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c3a:	4b48      	ldr	r3, [pc, #288]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_RCC_OscConfig+0x17e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e392      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c52:	4b42      	ldr	r3, [pc, #264]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 0219 	bic.w	r2, r3, #25
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	493f      	ldr	r1, [pc, #252]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c64:	f7fd fa28 	bl	80040b8 <HAL_GetTick>
 8006c68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c6c:	f7fd fa24 	bl	80040b8 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e37c      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c7e:	4b37      	ldr	r3, [pc, #220]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	f7fd fa45 	bl	8004118 <HAL_GetREVID>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d817      	bhi.n	8006cc8 <HAL_RCC_OscConfig+0x1f4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	2b40      	cmp	r3, #64	@ 0x40
 8006c9e:	d108      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x1de>
 8006ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cb0:	e07a      	b.n	8006da8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	031b      	lsls	r3, r3, #12
 8006cc0:	4926      	ldr	r1, [pc, #152]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc6:	e06f      	b.n	8006da8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc8:	4b24      	ldr	r3, [pc, #144]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	061b      	lsls	r3, r3, #24
 8006cd6:	4921      	ldr	r1, [pc, #132]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cdc:	e064      	b.n	8006da8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d047      	beq.n	8006d76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 0219 	bic.w	r2, r3, #25
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	491a      	ldr	r1, [pc, #104]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fd f9de 	bl	80040b8 <HAL_GetTick>
 8006cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d00:	f7fd f9da 	bl	80040b8 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e332      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d12:	4b12      	ldr	r3, [pc, #72]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f0      	beq.n	8006d00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1e:	f7fd f9fb 	bl	8004118 <HAL_GetREVID>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d819      	bhi.n	8006d60 <HAL_RCC_OscConfig+0x28c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	d108      	bne.n	8006d46 <HAL_RCC_OscConfig+0x272>
 8006d34:	4b09      	ldr	r3, [pc, #36]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d3c:	4a07      	ldr	r2, [pc, #28]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d42:	6053      	str	r3, [r2, #4]
 8006d44:	e030      	b.n	8006da8 <HAL_RCC_OscConfig+0x2d4>
 8006d46:	4b05      	ldr	r3, [pc, #20]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	031b      	lsls	r3, r3, #12
 8006d54:	4901      	ldr	r1, [pc, #4]	@ (8006d5c <HAL_RCC_OscConfig+0x288>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	604b      	str	r3, [r1, #4]
 8006d5a:	e025      	b.n	8006da8 <HAL_RCC_OscConfig+0x2d4>
 8006d5c:	58024400 	.word	0x58024400
 8006d60:	4b9a      	ldr	r3, [pc, #616]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	061b      	lsls	r3, r3, #24
 8006d6e:	4997      	ldr	r1, [pc, #604]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	604b      	str	r3, [r1, #4]
 8006d74:	e018      	b.n	8006da8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d76:	4b95      	ldr	r3, [pc, #596]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a94      	ldr	r2, [pc, #592]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d82:	f7fd f999 	bl	80040b8 <HAL_GetTick>
 8006d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d8a:	f7fd f995 	bl	80040b8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e2ed      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d9c:	4b8b      	ldr	r3, [pc, #556]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80a9 	beq.w	8006f08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006db6:	4b85      	ldr	r3, [pc, #532]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dc0:	4b82      	ldr	r3, [pc, #520]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d007      	beq.n	8006ddc <HAL_RCC_OscConfig+0x308>
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b18      	cmp	r3, #24
 8006dd0:	d13a      	bne.n	8006e48 <HAL_RCC_OscConfig+0x374>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d135      	bne.n	8006e48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_OscConfig+0x320>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	2b80      	cmp	r3, #128	@ 0x80
 8006dee:	d001      	beq.n	8006df4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e2c1      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006df4:	f7fd f990 	bl	8004118 <HAL_GetREVID>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d817      	bhi.n	8006e32 <HAL_RCC_OscConfig+0x35e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d108      	bne.n	8006e1c <HAL_RCC_OscConfig+0x348>
 8006e0a:	4b70      	ldr	r3, [pc, #448]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006e12:	4a6e      	ldr	r2, [pc, #440]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e1a:	e075      	b.n	8006f08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	069b      	lsls	r3, r3, #26
 8006e2a:	4968      	ldr	r1, [pc, #416]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e30:	e06a      	b.n	8006f08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e32:	4b66      	ldr	r3, [pc, #408]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	061b      	lsls	r3, r3, #24
 8006e40:	4962      	ldr	r1, [pc, #392]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e46:	e05f      	b.n	8006f08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d042      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e50:	4b5e      	ldr	r3, [pc, #376]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a5d      	ldr	r2, [pc, #372]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fd f92c 	bl	80040b8 <HAL_GetTick>
 8006e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e64:	f7fd f928 	bl	80040b8 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e280      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e76:	4b55      	ldr	r3, [pc, #340]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e82:	f7fd f949 	bl	8004118 <HAL_GetREVID>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d817      	bhi.n	8006ec0 <HAL_RCC_OscConfig+0x3ec>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d108      	bne.n	8006eaa <HAL_RCC_OscConfig+0x3d6>
 8006e98:	4b4c      	ldr	r3, [pc, #304]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006ea2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ea6:	6053      	str	r3, [r2, #4]
 8006ea8:	e02e      	b.n	8006f08 <HAL_RCC_OscConfig+0x434>
 8006eaa:	4b48      	ldr	r3, [pc, #288]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	069b      	lsls	r3, r3, #26
 8006eb8:	4944      	ldr	r1, [pc, #272]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	604b      	str	r3, [r1, #4]
 8006ebe:	e023      	b.n	8006f08 <HAL_RCC_OscConfig+0x434>
 8006ec0:	4b42      	ldr	r3, [pc, #264]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	061b      	lsls	r3, r3, #24
 8006ece:	493f      	ldr	r1, [pc, #252]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60cb      	str	r3, [r1, #12]
 8006ed4:	e018      	b.n	8006f08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a3c      	ldr	r2, [pc, #240]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006edc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee2:	f7fd f8e9 	bl	80040b8 <HAL_GetTick>
 8006ee6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006eea:	f7fd f8e5 	bl	80040b8 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e23d      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006efc:	4b33      	ldr	r3, [pc, #204]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1f0      	bne.n	8006eea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d036      	beq.n	8006f82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d019      	beq.n	8006f50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f20:	4a2a      	ldr	r2, [pc, #168]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f28:	f7fd f8c6 	bl	80040b8 <HAL_GetTick>
 8006f2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f30:	f7fd f8c2 	bl	80040b8 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e21a      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f42:	4b22      	ldr	r3, [pc, #136]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0x45c>
 8006f4e:	e018      	b.n	8006f82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f50:	4b1e      	ldr	r3, [pc, #120]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f54:	4a1d      	ldr	r2, [pc, #116]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5c:	f7fd f8ac 	bl	80040b8 <HAL_GetTick>
 8006f60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f64:	f7fd f8a8 	bl	80040b8 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e200      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f76:	4b15      	ldr	r3, [pc, #84]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d039      	beq.n	8007002 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01c      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f96:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006f9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006fa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fa2:	f7fd f889 	bl	80040b8 <HAL_GetTick>
 8006fa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006faa:	f7fd f885 	bl	80040b8 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1dd      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fbc:	4b03      	ldr	r3, [pc, #12]	@ (8006fcc <HAL_RCC_OscConfig+0x4f8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x4d6>
 8006fc8:	e01b      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
 8006fca:	bf00      	nop
 8006fcc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fd0:	4b9b      	ldr	r3, [pc, #620]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a9a      	ldr	r2, [pc, #616]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8006fd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fdc:	f7fd f86c 	bl	80040b8 <HAL_GetTick>
 8006fe0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fe4:	f7fd f868 	bl	80040b8 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e1c0      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ff6:	4b92      	ldr	r3, [pc, #584]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f0      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8081 	beq.w	8007112 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007010:	4b8c      	ldr	r3, [pc, #560]	@ (8007244 <HAL_RCC_OscConfig+0x770>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a8b      	ldr	r2, [pc, #556]	@ (8007244 <HAL_RCC_OscConfig+0x770>)
 8007016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800701a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800701c:	f7fd f84c 	bl	80040b8 <HAL_GetTick>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007024:	f7fd f848 	bl	80040b8 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	@ 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e1a0      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007036:	4b83      	ldr	r3, [pc, #524]	@ (8007244 <HAL_RCC_OscConfig+0x770>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d106      	bne.n	8007058 <HAL_RCC_OscConfig+0x584>
 800704a:	4b7d      	ldr	r3, [pc, #500]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704e:	4a7c      	ldr	r2, [pc, #496]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6713      	str	r3, [r2, #112]	@ 0x70
 8007056:	e02d      	b.n	80070b4 <HAL_RCC_OscConfig+0x5e0>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10c      	bne.n	800707a <HAL_RCC_OscConfig+0x5a6>
 8007060:	4b77      	ldr	r3, [pc, #476]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007064:	4a76      	ldr	r2, [pc, #472]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	6713      	str	r3, [r2, #112]	@ 0x70
 800706c:	4b74      	ldr	r3, [pc, #464]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007070:	4a73      	ldr	r2, [pc, #460]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007072:	f023 0304 	bic.w	r3, r3, #4
 8007076:	6713      	str	r3, [r2, #112]	@ 0x70
 8007078:	e01c      	b.n	80070b4 <HAL_RCC_OscConfig+0x5e0>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b05      	cmp	r3, #5
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0x5c8>
 8007082:	4b6f      	ldr	r3, [pc, #444]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007086:	4a6e      	ldr	r2, [pc, #440]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007088:	f043 0304 	orr.w	r3, r3, #4
 800708c:	6713      	str	r3, [r2, #112]	@ 0x70
 800708e:	4b6c      	ldr	r3, [pc, #432]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007092:	4a6b      	ldr	r2, [pc, #428]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	6713      	str	r3, [r2, #112]	@ 0x70
 800709a:	e00b      	b.n	80070b4 <HAL_RCC_OscConfig+0x5e0>
 800709c:	4b68      	ldr	r3, [pc, #416]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a0:	4a67      	ldr	r2, [pc, #412]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a8:	4b65      	ldr	r3, [pc, #404]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ac:	4a64      	ldr	r2, [pc, #400]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80070ae:	f023 0304 	bic.w	r3, r3, #4
 80070b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d015      	beq.n	80070e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070bc:	f7fc fffc 	bl	80040b8 <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070c2:	e00a      	b.n	80070da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c4:	f7fc fff8 	bl	80040b8 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e14e      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070da:	4b59      	ldr	r3, [pc, #356]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0ee      	beq.n	80070c4 <HAL_RCC_OscConfig+0x5f0>
 80070e6:	e014      	b.n	8007112 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e8:	f7fc ffe6 	bl	80040b8 <HAL_GetTick>
 80070ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f0:	f7fc ffe2 	bl	80040b8 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e138      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007106:	4b4e      	ldr	r3, [pc, #312]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1ee      	bne.n	80070f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 812d 	beq.w	8007376 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800711c:	4b48      	ldr	r3, [pc, #288]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007124:	2b18      	cmp	r3, #24
 8007126:	f000 80bd 	beq.w	80072a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	2b02      	cmp	r3, #2
 8007130:	f040 809e 	bne.w	8007270 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007134:	4b42      	ldr	r3, [pc, #264]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a41      	ldr	r2, [pc, #260]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800713a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800713e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fc ffba 	bl	80040b8 <HAL_GetTick>
 8007144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007148:	f7fc ffb6 	bl	80040b8 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e10e      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007166:	4b36      	ldr	r3, [pc, #216]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800716a:	4b37      	ldr	r3, [pc, #220]	@ (8007248 <HAL_RCC_OscConfig+0x774>)
 800716c:	4013      	ands	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007176:	0112      	lsls	r2, r2, #4
 8007178:	430a      	orrs	r2, r1
 800717a:	4931      	ldr	r1, [pc, #196]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800717c:	4313      	orrs	r3, r2
 800717e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007184:	3b01      	subs	r3, #1
 8007186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800718e:	3b01      	subs	r3, #1
 8007190:	025b      	lsls	r3, r3, #9
 8007192:	b29b      	uxth	r3, r3
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	3b01      	subs	r3, #1
 800719c:	041b      	lsls	r3, r3, #16
 800719e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a8:	3b01      	subs	r3, #1
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071b0:	4923      	ldr	r1, [pc, #140]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80071b6:	4b22      	ldr	r3, [pc, #136]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ba:	4a21      	ldr	r2, [pc, #132]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071c6:	4b21      	ldr	r3, [pc, #132]	@ (800724c <HAL_RCC_OscConfig+0x778>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80071ce:	00d2      	lsls	r2, r2, #3
 80071d0:	491b      	ldr	r1, [pc, #108]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	f023 020c 	bic.w	r2, r3, #12
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	4917      	ldr	r1, [pc, #92]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071e8:	4b15      	ldr	r3, [pc, #84]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ec:	f023 0202 	bic.w	r2, r3, #2
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f4:	4912      	ldr	r1, [pc, #72]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071fa:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	4a10      	ldr	r2, [pc, #64]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007206:	4b0e      	ldr	r3, [pc, #56]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	4a0d      	ldr	r2, [pc, #52]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800720c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007210:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007212:	4b0b      	ldr	r3, [pc, #44]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	4a0a      	ldr	r2, [pc, #40]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800721c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800721e:	4b08      	ldr	r3, [pc, #32]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	4a07      	ldr	r2, [pc, #28]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007224:	f043 0301 	orr.w	r3, r3, #1
 8007228:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800722a:	4b05      	ldr	r3, [pc, #20]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a04      	ldr	r2, [pc, #16]	@ (8007240 <HAL_RCC_OscConfig+0x76c>)
 8007230:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fc ff3f 	bl	80040b8 <HAL_GetTick>
 800723a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800723c:	e011      	b.n	8007262 <HAL_RCC_OscConfig+0x78e>
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
 8007244:	58024800 	.word	0x58024800
 8007248:	fffffc0c 	.word	0xfffffc0c
 800724c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007250:	f7fc ff32 	bl	80040b8 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e08a      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007262:	4b47      	ldr	r3, [pc, #284]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0x77c>
 800726e:	e082      	b.n	8007376 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007270:	4b43      	ldr	r3, [pc, #268]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a42      	ldr	r2, [pc, #264]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800727a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727c:	f7fc ff1c 	bl	80040b8 <HAL_GetTick>
 8007280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007284:	f7fc ff18 	bl	80040b8 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e070      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007296:	4b3a      	ldr	r3, [pc, #232]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f0      	bne.n	8007284 <HAL_RCC_OscConfig+0x7b0>
 80072a2:	e068      	b.n	8007376 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072a4:	4b36      	ldr	r3, [pc, #216]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 80072a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072aa:	4b35      	ldr	r3, [pc, #212]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d031      	beq.n	800731c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f003 0203 	and.w	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d12a      	bne.n	800731c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	091b      	lsrs	r3, r3, #4
 80072ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d122      	bne.n	800731c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d11a      	bne.n	800731c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	0a5b      	lsrs	r3, r3, #9
 80072ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d111      	bne.n	800731c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	0c1b      	lsrs	r3, r3, #16
 80072fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007304:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007306:	429a      	cmp	r2, r3
 8007308:	d108      	bne.n	800731c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	0e1b      	lsrs	r3, r3, #24
 800730e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007316:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007318:	429a      	cmp	r2, r3
 800731a:	d001      	beq.n	8007320 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e02b      	b.n	8007378 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007320:	4b17      	ldr	r3, [pc, #92]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007324:	08db      	lsrs	r3, r3, #3
 8007326:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800732a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	429a      	cmp	r2, r3
 8007334:	d01f      	beq.n	8007376 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007336:	4b12      	ldr	r3, [pc, #72]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	4a11      	ldr	r2, [pc, #68]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007342:	f7fc feb9 	bl	80040b8 <HAL_GetTick>
 8007346:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007348:	bf00      	nop
 800734a:	f7fc feb5 	bl	80040b8 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	4293      	cmp	r3, r2
 8007354:	d0f9      	beq.n	800734a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007356:	4b0a      	ldr	r3, [pc, #40]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800735a:	4b0a      	ldr	r3, [pc, #40]	@ (8007384 <HAL_RCC_OscConfig+0x8b0>)
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007362:	00d2      	lsls	r2, r2, #3
 8007364:	4906      	ldr	r1, [pc, #24]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007366:	4313      	orrs	r3, r2
 8007368:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800736a:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	4a04      	ldr	r2, [pc, #16]	@ (8007380 <HAL_RCC_OscConfig+0x8ac>)
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3730      	adds	r7, #48	@ 0x30
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	58024400 	.word	0x58024400
 8007384:	ffff0007 	.word	0xffff0007

08007388 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e19c      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800739c:	4b8a      	ldr	r3, [pc, #552]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d910      	bls.n	80073cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073aa:	4b87      	ldr	r3, [pc, #540]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f023 020f 	bic.w	r2, r3, #15
 80073b2:	4985      	ldr	r1, [pc, #532]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ba:	4b83      	ldr	r3, [pc, #524]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d001      	beq.n	80073cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e184      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	4b7b      	ldr	r3, [pc, #492]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d908      	bls.n	80073fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073e8:	4b78      	ldr	r3, [pc, #480]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	4975      	ldr	r1, [pc, #468]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	4b70      	ldr	r3, [pc, #448]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007412:	429a      	cmp	r2, r3
 8007414:	d908      	bls.n	8007428 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007416:	4b6d      	ldr	r3, [pc, #436]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	496a      	ldr	r1, [pc, #424]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007424:	4313      	orrs	r3, r2
 8007426:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	4b64      	ldr	r3, [pc, #400]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007440:	429a      	cmp	r2, r3
 8007442:	d908      	bls.n	8007456 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007444:	4b61      	ldr	r3, [pc, #388]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	495e      	ldr	r1, [pc, #376]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007452:	4313      	orrs	r3, r2
 8007454:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d010      	beq.n	8007484 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69da      	ldr	r2, [r3, #28]
 8007466:	4b59      	ldr	r3, [pc, #356]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800746e:	429a      	cmp	r2, r3
 8007470:	d908      	bls.n	8007484 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007472:	4b56      	ldr	r3, [pc, #344]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	4953      	ldr	r1, [pc, #332]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007480:	4313      	orrs	r3, r2
 8007482:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d010      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	4b4d      	ldr	r3, [pc, #308]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	429a      	cmp	r2, r3
 800749e:	d908      	bls.n	80074b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a0:	4b4a      	ldr	r3, [pc, #296]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f023 020f 	bic.w	r2, r3, #15
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	4947      	ldr	r1, [pc, #284]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d055      	beq.n	800756a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074be:	4b43      	ldr	r3, [pc, #268]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4940      	ldr	r1, [pc, #256]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d107      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074d8:	4b3c      	ldr	r3, [pc, #240]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d121      	bne.n	8007528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0f6      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d107      	bne.n	8007500 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074f0:	4b36      	ldr	r3, [pc, #216]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d115      	bne.n	8007528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0ea      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d107      	bne.n	8007518 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007508:	4b30      	ldr	r3, [pc, #192]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0de      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007518:	4b2c      	ldr	r3, [pc, #176]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0d6      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007528:	4b28      	ldr	r3, [pc, #160]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f023 0207 	bic.w	r2, r3, #7
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4925      	ldr	r1, [pc, #148]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007536:	4313      	orrs	r3, r2
 8007538:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800753a:	f7fc fdbd 	bl	80040b8 <HAL_GetTick>
 800753e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007540:	e00a      	b.n	8007558 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007542:	f7fc fdb9 	bl	80040b8 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007550:	4293      	cmp	r3, r2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e0be      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007558:	4b1c      	ldr	r3, [pc, #112]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	429a      	cmp	r2, r3
 8007568:	d1eb      	bne.n	8007542 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d010      	beq.n	8007598 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	4b14      	ldr	r3, [pc, #80]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	429a      	cmp	r2, r3
 8007584:	d208      	bcs.n	8007598 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007586:	4b11      	ldr	r3, [pc, #68]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f023 020f 	bic.w	r2, r3, #15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	490e      	ldr	r1, [pc, #56]	@ (80075cc <HAL_RCC_ClockConfig+0x244>)
 8007594:	4313      	orrs	r3, r2
 8007596:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007598:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d214      	bcs.n	80075d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a6:	4b08      	ldr	r3, [pc, #32]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f023 020f 	bic.w	r2, r3, #15
 80075ae:	4906      	ldr	r1, [pc, #24]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b6:	4b04      	ldr	r3, [pc, #16]	@ (80075c8 <HAL_RCC_ClockConfig+0x240>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e086      	b.n	80076d6 <HAL_RCC_ClockConfig+0x34e>
 80075c8:	52002000 	.word	0x52002000
 80075cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	4b3f      	ldr	r3, [pc, #252]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d208      	bcs.n	80075fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075ec:	4b3c      	ldr	r3, [pc, #240]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	4939      	ldr	r1, [pc, #228]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d010      	beq.n	800762c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695a      	ldr	r2, [r3, #20]
 800760e:	4b34      	ldr	r3, [pc, #208]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007616:	429a      	cmp	r2, r3
 8007618:	d208      	bcs.n	800762c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800761a:	4b31      	ldr	r3, [pc, #196]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	492e      	ldr	r1, [pc, #184]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 8007628:	4313      	orrs	r3, r2
 800762a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	d010      	beq.n	800765a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699a      	ldr	r2, [r3, #24]
 800763c:	4b28      	ldr	r3, [pc, #160]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007644:	429a      	cmp	r2, r3
 8007646:	d208      	bcs.n	800765a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007648:	4b25      	ldr	r3, [pc, #148]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	4922      	ldr	r1, [pc, #136]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 8007656:	4313      	orrs	r3, r2
 8007658:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d010      	beq.n	8007688 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69da      	ldr	r2, [r3, #28]
 800766a:	4b1d      	ldr	r3, [pc, #116]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007672:	429a      	cmp	r2, r3
 8007674:	d208      	bcs.n	8007688 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007676:	4b1a      	ldr	r3, [pc, #104]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	4917      	ldr	r1, [pc, #92]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 8007684:	4313      	orrs	r3, r2
 8007686:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007688:	f000 f834 	bl	80076f4 <HAL_RCC_GetSysClockFreq>
 800768c:	4602      	mov	r2, r0
 800768e:	4b14      	ldr	r3, [pc, #80]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	0a1b      	lsrs	r3, r3, #8
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	4912      	ldr	r1, [pc, #72]	@ (80076e4 <HAL_RCC_ClockConfig+0x35c>)
 800769a:	5ccb      	ldrb	r3, [r1, r3]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
 80076a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076a6:	4b0e      	ldr	r3, [pc, #56]	@ (80076e0 <HAL_RCC_ClockConfig+0x358>)
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	4a0d      	ldr	r2, [pc, #52]	@ (80076e4 <HAL_RCC_ClockConfig+0x35c>)
 80076b0:	5cd3      	ldrb	r3, [r2, r3]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
 80076bc:	4a0a      	ldr	r2, [pc, #40]	@ (80076e8 <HAL_RCC_ClockConfig+0x360>)
 80076be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076c0:	4a0a      	ldr	r2, [pc, #40]	@ (80076ec <HAL_RCC_ClockConfig+0x364>)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80076c6:	4b0a      	ldr	r3, [pc, #40]	@ (80076f0 <HAL_RCC_ClockConfig+0x368>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f002 f9da 	bl	8009a84 <HAL_InitTick>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	58024400 	.word	0x58024400
 80076e4:	0800ea8c 	.word	0x0800ea8c
 80076e8:	24000058 	.word	0x24000058
 80076ec:	24000054 	.word	0x24000054
 80076f0:	2400005c 	.word	0x2400005c

080076f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b089      	sub	sp, #36	@ 0x24
 80076f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076fa:	4bb3      	ldr	r3, [pc, #716]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007702:	2b18      	cmp	r3, #24
 8007704:	f200 8155 	bhi.w	80079b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007708:	a201      	add	r2, pc, #4	@ (adr r2, 8007710 <HAL_RCC_GetSysClockFreq+0x1c>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007775 	.word	0x08007775
 8007714:	080079b3 	.word	0x080079b3
 8007718:	080079b3 	.word	0x080079b3
 800771c:	080079b3 	.word	0x080079b3
 8007720:	080079b3 	.word	0x080079b3
 8007724:	080079b3 	.word	0x080079b3
 8007728:	080079b3 	.word	0x080079b3
 800772c:	080079b3 	.word	0x080079b3
 8007730:	0800779b 	.word	0x0800779b
 8007734:	080079b3 	.word	0x080079b3
 8007738:	080079b3 	.word	0x080079b3
 800773c:	080079b3 	.word	0x080079b3
 8007740:	080079b3 	.word	0x080079b3
 8007744:	080079b3 	.word	0x080079b3
 8007748:	080079b3 	.word	0x080079b3
 800774c:	080079b3 	.word	0x080079b3
 8007750:	080077a1 	.word	0x080077a1
 8007754:	080079b3 	.word	0x080079b3
 8007758:	080079b3 	.word	0x080079b3
 800775c:	080079b3 	.word	0x080079b3
 8007760:	080079b3 	.word	0x080079b3
 8007764:	080079b3 	.word	0x080079b3
 8007768:	080079b3 	.word	0x080079b3
 800776c:	080079b3 	.word	0x080079b3
 8007770:	080077a7 	.word	0x080077a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007774:	4b94      	ldr	r3, [pc, #592]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007780:	4b91      	ldr	r3, [pc, #580]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	08db      	lsrs	r3, r3, #3
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	4a90      	ldr	r2, [pc, #576]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800778c:	fa22 f303 	lsr.w	r3, r2, r3
 8007790:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007792:	e111      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007794:	4b8d      	ldr	r3, [pc, #564]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007796:	61bb      	str	r3, [r7, #24]
      break;
 8007798:	e10e      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800779a:	4b8d      	ldr	r3, [pc, #564]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800779c:	61bb      	str	r3, [r7, #24]
      break;
 800779e:	e10b      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80077a0:	4b8c      	ldr	r3, [pc, #560]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077a2:	61bb      	str	r3, [r7, #24]
      break;
 80077a4:	e108      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077a6:	4b88      	ldr	r3, [pc, #544]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80077b0:	4b85      	ldr	r3, [pc, #532]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	091b      	lsrs	r3, r3, #4
 80077b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077bc:	4b82      	ldr	r3, [pc, #520]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077c6:	4b80      	ldr	r3, [pc, #512]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ca:	08db      	lsrs	r3, r3, #3
 80077cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80e1 	beq.w	80079ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	f000 8083 	beq.w	80078f8 <HAL_RCC_GetSysClockFreq+0x204>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	f200 80a1 	bhi.w	800793c <HAL_RCC_GetSysClockFreq+0x248>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_RCC_GetSysClockFreq+0x114>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d056      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007806:	e099      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007808:	4b6f      	ldr	r3, [pc, #444]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d02d      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007814:	4b6c      	ldr	r3, [pc, #432]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	08db      	lsrs	r3, r3, #3
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	4a6b      	ldr	r2, [pc, #428]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
 8007824:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b62      	ldr	r3, [pc, #392]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007852:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80079d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800786e:	e087      	b.n	8007980 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80079dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b51      	ldr	r3, [pc, #324]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a02 	vldr	s12, [r7, #8]
 8007896:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80079d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078b2:	e065      	b.n	8007980 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c6:	4b40      	ldr	r3, [pc, #256]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80078da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80079d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078f6:	e043      	b.n	8007980 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80079e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b2f      	ldr	r3, [pc, #188]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a02 	vldr	s12, [r7, #8]
 800791e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80079d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800793a:	e021      	b.n	8007980 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794e:	4b1e      	ldr	r3, [pc, #120]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007962:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80079d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800797e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007980:	4b11      	ldr	r3, [pc, #68]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007984:	0a5b      	lsrs	r3, r3, #9
 8007986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800798a:	3301      	adds	r3, #1
 800798c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007998:	edd7 6a07 	vldr	s13, [r7, #28]
 800799c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079a4:	ee17 3a90 	vmov	r3, s15
 80079a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80079aa:	e005      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61bb      	str	r3, [r7, #24]
      break;
 80079b0:	e002      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80079b2:	4b07      	ldr	r3, [pc, #28]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079b4:	61bb      	str	r3, [r7, #24]
      break;
 80079b6:	bf00      	nop
  }

  return sysclockfreq;
 80079b8:	69bb      	ldr	r3, [r7, #24]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3724      	adds	r7, #36	@ 0x24
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	58024400 	.word	0x58024400
 80079cc:	03d09000 	.word	0x03d09000
 80079d0:	003d0900 	.word	0x003d0900
 80079d4:	017d7840 	.word	0x017d7840
 80079d8:	46000000 	.word	0x46000000
 80079dc:	4c742400 	.word	0x4c742400
 80079e0:	4a742400 	.word	0x4a742400
 80079e4:	4bbebc20 	.word	0x4bbebc20

080079e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079ee:	f7ff fe81 	bl	80076f4 <HAL_RCC_GetSysClockFreq>
 80079f2:	4602      	mov	r2, r0
 80079f4:	4b10      	ldr	r3, [pc, #64]	@ (8007a38 <HAL_RCC_GetHCLKFreq+0x50>)
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	0a1b      	lsrs	r3, r3, #8
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	490f      	ldr	r1, [pc, #60]	@ (8007a3c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a00:	5ccb      	ldrb	r3, [r1, r3]
 8007a02:	f003 031f 	and.w	r3, r3, #31
 8007a06:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	f003 030f 	and.w	r3, r3, #15
 8007a14:	4a09      	ldr	r2, [pc, #36]	@ (8007a3c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a16:	5cd3      	ldrb	r3, [r2, r3]
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a22:	4a07      	ldr	r2, [pc, #28]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a26:	4a07      	ldr	r2, [pc, #28]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a2c:	4b04      	ldr	r3, [pc, #16]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	0800ea8c 	.word	0x0800ea8c
 8007a40:	24000058 	.word	0x24000058
 8007a44:	24000054 	.word	0x24000054

08007a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a4c:	f7ff ffcc 	bl	80079e8 <HAL_RCC_GetHCLKFreq>
 8007a50:	4602      	mov	r2, r0
 8007a52:	4b06      	ldr	r3, [pc, #24]	@ (8007a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	4904      	ldr	r1, [pc, #16]	@ (8007a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a5e:	5ccb      	ldrb	r3, [r1, r3]
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	0800ea8c 	.word	0x0800ea8c

08007a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a78:	f7ff ffb6 	bl	80079e8 <HAL_RCC_GetHCLKFreq>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	4904      	ldr	r1, [pc, #16]	@ (8007a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a8a:	5ccb      	ldrb	r3, [r1, r3]
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	0800ea8c 	.word	0x0800ea8c

08007aa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	223f      	movs	r2, #63	@ 0x3f
 8007aae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b1c <HAL_RCC_GetClockConfig+0x7c>)
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0207 	and.w	r2, r3, #7
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007abc:	4b17      	ldr	r3, [pc, #92]	@ (8007b1c <HAL_RCC_GetClockConfig+0x7c>)
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ac8:	4b14      	ldr	r3, [pc, #80]	@ (8007b1c <HAL_RCC_GetClockConfig+0x7c>)
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f003 020f 	and.w	r2, r3, #15
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ad4:	4b11      	ldr	r3, [pc, #68]	@ (8007b1c <HAL_RCC_GetClockConfig+0x7c>)
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8007b1c <HAL_RCC_GetClockConfig+0x7c>)
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007aec:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <HAL_RCC_GetClockConfig+0x7c>)
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007af8:	4b08      	ldr	r3, [pc, #32]	@ (8007b1c <HAL_RCC_GetClockConfig+0x7c>)
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b04:	4b06      	ldr	r3, [pc, #24]	@ (8007b20 <HAL_RCC_GetClockConfig+0x80>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 020f 	and.w	r2, r3, #15
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	601a      	str	r2, [r3, #0]
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	58024400 	.word	0x58024400
 8007b20:	52002000 	.word	0x52002000

08007b24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b28:	b0ca      	sub	sp, #296	@ 0x128
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b36:	2300      	movs	r3, #0
 8007b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007b48:	2500      	movs	r5, #0
 8007b4a:	ea54 0305 	orrs.w	r3, r4, r5
 8007b4e:	d049      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b5a:	d02f      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007b5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b60:	d828      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b66:	d01a      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b6c:	d822      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b76:	d007      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b78:	e01c      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b7a:	4bb8      	ldr	r3, [pc, #736]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7e:	4ab7      	ldr	r2, [pc, #732]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b86:	e01a      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	2102      	movs	r1, #2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 f9d1 	bl	8008f38 <RCCEx_PLL2_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b9c:	e00f      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	3328      	adds	r3, #40	@ 0x28
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fa78 	bl	800909c <RCCEx_PLL3_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bb2:	e004      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bba:	e000      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007bc6:	4ba5      	ldr	r3, [pc, #660]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bd4:	4aa1      	ldr	r2, [pc, #644]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bda:	e003      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007bf0:	f04f 0900 	mov.w	r9, #0
 8007bf4:	ea58 0309 	orrs.w	r3, r8, r9
 8007bf8:	d047      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d82a      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007c04:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0a:	bf00      	nop
 8007c0c:	08007c21 	.word	0x08007c21
 8007c10:	08007c2f 	.word	0x08007c2f
 8007c14:	08007c45 	.word	0x08007c45
 8007c18:	08007c63 	.word	0x08007c63
 8007c1c:	08007c63 	.word	0x08007c63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c20:	4b8e      	ldr	r3, [pc, #568]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c24:	4a8d      	ldr	r2, [pc, #564]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c2c:	e01a      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	3308      	adds	r3, #8
 8007c34:	2100      	movs	r1, #0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f001 f97e 	bl	8008f38 <RCCEx_PLL2_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c42:	e00f      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c48:	3328      	adds	r3, #40	@ 0x28
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 fa25 	bl	800909c <RCCEx_PLL3_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c58:	e004      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c70:	f023 0107 	bic.w	r1, r3, #7
 8007c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7a:	4a78      	ldr	r2, [pc, #480]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c80:	e003      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007c96:	f04f 0b00 	mov.w	fp, #0
 8007c9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007c9e:	d04c      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007caa:	d030      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cb0:	d829      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cb4:	d02d      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007cb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cb8:	d825      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cba:	2b80      	cmp	r3, #128	@ 0x80
 8007cbc:	d018      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007cbe:	2b80      	cmp	r3, #128	@ 0x80
 8007cc0:	d821      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007cc6:	2b40      	cmp	r3, #64	@ 0x40
 8007cc8:	d007      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007cca:	e01c      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ccc:	4b63      	ldr	r3, [pc, #396]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	4a62      	ldr	r2, [pc, #392]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007cd8:	e01c      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	3308      	adds	r3, #8
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f928 	bl	8008f38 <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007cee:	e011      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf4:	3328      	adds	r3, #40	@ 0x28
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 f9cf 	bl	800909c <RCCEx_PLL3_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d04:	e006      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d0c:	e002      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d30:	e003      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007d46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007d50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007d54:	460b      	mov	r3, r1
 8007d56:	4313      	orrs	r3, r2
 8007d58:	d053      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d66:	d035      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007d68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d6c:	d82e      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d72:	d031      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007d74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d78:	d828      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d7e:	d01a      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d84:	d822      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007d8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d8e:	d007      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007d90:	e01c      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d92:	4b32      	ldr	r3, [pc, #200]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d96:	4a31      	ldr	r2, [pc, #196]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d9e:	e01c      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	3308      	adds	r3, #8
 8007da6:	2100      	movs	r1, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 f8c5 	bl	8008f38 <RCCEx_PLL2_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007db4:	e011      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dba:	3328      	adds	r3, #40	@ 0x28
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 f96c 	bl	800909c <RCCEx_PLL3_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dca:	e006      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dd2:	e002      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007dd4:	bf00      	nop
 8007dd6:	e000      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10b      	bne.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007de2:	4b1e      	ldr	r3, [pc, #120]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007df2:	4a1a      	ldr	r2, [pc, #104]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007df4:	430b      	orrs	r3, r1
 8007df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007df8:	e003      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007e0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e12:	2300      	movs	r3, #0
 8007e14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	d056      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e2e:	d038      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e34:	d831      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e3a:	d034      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007e3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e40:	d82b      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e46:	d01d      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007e48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e4c:	d825      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d006      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e56:	d00a      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e58:	e01f      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e5a:	bf00      	nop
 8007e5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e60:	4ba2      	ldr	r3, [pc, #648]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	4aa1      	ldr	r2, [pc, #644]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e6c:	e01c      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e72:	3308      	adds	r3, #8
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 f85e 	bl	8008f38 <RCCEx_PLL2_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007e82:	e011      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	3328      	adds	r3, #40	@ 0x28
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f905 	bl	800909c <RCCEx_PLL3_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e98:	e006      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ea0:	e002      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ea2:	bf00      	nop
 8007ea4:	e000      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007eb0:	4b8e      	ldr	r3, [pc, #568]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ec0:	4a8a      	ldr	r2, [pc, #552]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ec6:	e003      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007edc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ee6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007eea:	460b      	mov	r3, r1
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d03a      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef6:	2b30      	cmp	r3, #48	@ 0x30
 8007ef8:	d01f      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007efa:	2b30      	cmp	r3, #48	@ 0x30
 8007efc:	d819      	bhi.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d00c      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d815      	bhi.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d019      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007f0a:	2b10      	cmp	r3, #16
 8007f0c:	d111      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0e:	4b77      	ldr	r3, [pc, #476]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f12:	4a76      	ldr	r2, [pc, #472]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f1a:	e011      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f20:	3308      	adds	r3, #8
 8007f22:	2102      	movs	r1, #2
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 f807 	bl	8008f38 <RCCEx_PLL2_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f30:	e006      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f38:	e002      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f3a:	bf00      	nop
 8007f3c:	e000      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f48:	4b68      	ldr	r3, [pc, #416]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f56:	4a65      	ldr	r2, [pc, #404]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f5c:	e003      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007f72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f76:	2300      	movs	r3, #0
 8007f78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4313      	orrs	r3, r2
 8007f84:	d051      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f90:	d035      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f96:	d82e      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f9c:	d031      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007f9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fa2:	d828      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa8:	d01a      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fae:	d822      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb8:	d007      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007fba:	e01c      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fc8:	e01c      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 ffb0 	bl	8008f38 <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fde:	e011      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe4:	3328      	adds	r3, #40	@ 0x28
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 f857 	bl	800909c <RCCEx_PLL3_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ff4:	e006      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ffc:	e002      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ffe:	bf00      	nop
 8008000:	e000      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800800c:	4b37      	ldr	r3, [pc, #220]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800800e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008010:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800801a:	4a34      	ldr	r2, [pc, #208]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800801c:	430b      	orrs	r3, r1
 800801e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008020:	e003      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008040:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008044:	460b      	mov	r3, r1
 8008046:	4313      	orrs	r3, r2
 8008048:	d056      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008054:	d033      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008056:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800805a:	d82c      	bhi.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800805c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008060:	d02f      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008062:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008066:	d826      	bhi.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800806c:	d02b      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800806e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008072:	d820      	bhi.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008078:	d012      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800807a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800807e:	d81a      	bhi.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d022      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008088:	d115      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	3308      	adds	r3, #8
 8008090:	2101      	movs	r1, #1
 8008092:	4618      	mov	r0, r3
 8008094:	f000 ff50 	bl	8008f38 <RCCEx_PLL2_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800809e:	e015      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a4:	3328      	adds	r3, #40	@ 0x28
 80080a6:	2101      	movs	r1, #1
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fff7 	bl	800909c <RCCEx_PLL3_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080b4:	e00a      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080bc:	e006      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080be:	bf00      	nop
 80080c0:	e004      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080c2:	bf00      	nop
 80080c4:	e002      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10d      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080d4:	4b05      	ldr	r3, [pc, #20]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080e2:	4a02      	ldr	r2, [pc, #8]	@ (80080ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080e4:	430b      	orrs	r3, r1
 80080e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80080e8:	e006      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80080ea:	bf00      	nop
 80080ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80080f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008108:	2300      	movs	r3, #0
 800810a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800810e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d055      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008124:	d033      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008126:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800812a:	d82c      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008130:	d02f      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008136:	d826      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800813c:	d02b      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800813e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008142:	d820      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008148:	d012      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800814a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800814e:	d81a      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d022      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008158:	d115      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	3308      	adds	r3, #8
 8008160:	2101      	movs	r1, #1
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fee8 	bl	8008f38 <RCCEx_PLL2_Config>
 8008168:	4603      	mov	r3, r0
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800816e:	e015      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008174:	3328      	adds	r3, #40	@ 0x28
 8008176:	2101      	movs	r1, #1
 8008178:	4618      	mov	r0, r3
 800817a:	f000 ff8f 	bl	800909c <RCCEx_PLL3_Config>
 800817e:	4603      	mov	r3, r0
 8008180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008184:	e00a      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800818c:	e006      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800818e:	bf00      	nop
 8008190:	e004      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008192:	bf00      	nop
 8008194:	e002      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800819a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800819c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10b      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081a4:	4ba3      	ldr	r3, [pc, #652]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081b4:	4a9f      	ldr	r2, [pc, #636]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b6:	430b      	orrs	r3, r1
 80081b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ba:	e003      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80081d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80081de:	460b      	mov	r3, r1
 80081e0:	4313      	orrs	r3, r2
 80081e2:	d037      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081ee:	d00e      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80081f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f4:	d816      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80081fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081fe:	d111      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008200:	4b8c      	ldr	r3, [pc, #560]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008204:	4a8b      	ldr	r2, [pc, #556]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800820a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800820c:	e00f      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008212:	3308      	adds	r3, #8
 8008214:	2101      	movs	r1, #1
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fe8e 	bl	8008f38 <RCCEx_PLL2_Config>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008222:	e004      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800822a:	e000      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800822c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10a      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008236:	4b7f      	ldr	r3, [pc, #508]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800823a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008244:	4a7b      	ldr	r2, [pc, #492]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008246:	430b      	orrs	r3, r1
 8008248:	6513      	str	r3, [r2, #80]	@ 0x50
 800824a:	e003      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008260:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008264:	2300      	movs	r3, #0
 8008266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800826a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800826e:	460b      	mov	r3, r1
 8008270:	4313      	orrs	r3, r2
 8008272:	d039      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827a:	2b03      	cmp	r3, #3
 800827c:	d81c      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082c1 	.word	0x080082c1
 8008288:	08008295 	.word	0x08008295
 800828c:	080082a3 	.word	0x080082a3
 8008290:	080082c1 	.word	0x080082c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008294:	4b67      	ldr	r3, [pc, #412]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	4a66      	ldr	r2, [pc, #408]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800829a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800829e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082a0:	e00f      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a6:	3308      	adds	r3, #8
 80082a8:	2102      	movs	r1, #2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fe44 	bl	8008f38 <RCCEx_PLL2_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082b6:	e004      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082be:	e000      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80082c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10a      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082ca:	4b5a      	ldr	r3, [pc, #360]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ce:	f023 0103 	bic.w	r1, r3, #3
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082d8:	4a56      	ldr	r2, [pc, #344]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082da:	430b      	orrs	r3, r1
 80082dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082de:	e003      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80082f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008302:	460b      	mov	r3, r1
 8008304:	4313      	orrs	r3, r2
 8008306:	f000 809f 	beq.w	8008448 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800830a:	4b4b      	ldr	r3, [pc, #300]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a4a      	ldr	r2, [pc, #296]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008316:	f7fb fecf 	bl	80040b8 <HAL_GetTick>
 800831a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800831e:	e00b      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008320:	f7fb feca 	bl	80040b8 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b64      	cmp	r3, #100	@ 0x64
 800832e:	d903      	bls.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008336:	e005      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008338:	4b3f      	ldr	r3, [pc, #252]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0ed      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008348:	2b00      	cmp	r3, #0
 800834a:	d179      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800834c:	4b39      	ldr	r3, [pc, #228]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800834e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008358:	4053      	eors	r3, r2
 800835a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800835e:	2b00      	cmp	r3, #0
 8008360:	d015      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008362:	4b34      	ldr	r3, [pc, #208]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800836a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800836e:	4b31      	ldr	r3, [pc, #196]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008372:	4a30      	ldr	r2, [pc, #192]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008378:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800837a:	4b2e      	ldr	r3, [pc, #184]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800837e:	4a2d      	ldr	r2, [pc, #180]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008384:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008386:	4a2b      	ldr	r2, [pc, #172]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800838c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800839a:	d118      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fb fe8c 	bl	80040b8 <HAL_GetTick>
 80083a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083a4:	e00d      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a6:	f7fb fe87 	bl	80040b8 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80083b0:	1ad2      	subs	r2, r2, r3
 80083b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d903      	bls.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80083c0:	e005      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0eb      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80083ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d129      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083e6:	d10e      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80083e8:	4b12      	ldr	r3, [pc, #72]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083f8:	091a      	lsrs	r2, r3, #4
 80083fa:	4b10      	ldr	r3, [pc, #64]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80083fc:	4013      	ands	r3, r2
 80083fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008400:	430b      	orrs	r3, r1
 8008402:	6113      	str	r3, [r2, #16]
 8008404:	e005      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008406:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	4a0a      	ldr	r2, [pc, #40]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800840c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008410:	6113      	str	r3, [r2, #16]
 8008412:	4b08      	ldr	r3, [pc, #32]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008414:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800841e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008422:	4a04      	ldr	r2, [pc, #16]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008424:	430b      	orrs	r3, r1
 8008426:	6713      	str	r3, [r2, #112]	@ 0x70
 8008428:	e00e      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800842a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800842e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008432:	e009      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008434:	58024400 	.word	0x58024400
 8008438:	58024800 	.word	0x58024800
 800843c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f002 0301 	and.w	r3, r2, #1
 8008454:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008458:	2300      	movs	r3, #0
 800845a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800845e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	f000 8089 	beq.w	800857c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008470:	2b28      	cmp	r3, #40	@ 0x28
 8008472:	d86b      	bhi.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008474:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	08008555 	.word	0x08008555
 8008480:	0800854d 	.word	0x0800854d
 8008484:	0800854d 	.word	0x0800854d
 8008488:	0800854d 	.word	0x0800854d
 800848c:	0800854d 	.word	0x0800854d
 8008490:	0800854d 	.word	0x0800854d
 8008494:	0800854d 	.word	0x0800854d
 8008498:	0800854d 	.word	0x0800854d
 800849c:	08008521 	.word	0x08008521
 80084a0:	0800854d 	.word	0x0800854d
 80084a4:	0800854d 	.word	0x0800854d
 80084a8:	0800854d 	.word	0x0800854d
 80084ac:	0800854d 	.word	0x0800854d
 80084b0:	0800854d 	.word	0x0800854d
 80084b4:	0800854d 	.word	0x0800854d
 80084b8:	0800854d 	.word	0x0800854d
 80084bc:	08008537 	.word	0x08008537
 80084c0:	0800854d 	.word	0x0800854d
 80084c4:	0800854d 	.word	0x0800854d
 80084c8:	0800854d 	.word	0x0800854d
 80084cc:	0800854d 	.word	0x0800854d
 80084d0:	0800854d 	.word	0x0800854d
 80084d4:	0800854d 	.word	0x0800854d
 80084d8:	0800854d 	.word	0x0800854d
 80084dc:	08008555 	.word	0x08008555
 80084e0:	0800854d 	.word	0x0800854d
 80084e4:	0800854d 	.word	0x0800854d
 80084e8:	0800854d 	.word	0x0800854d
 80084ec:	0800854d 	.word	0x0800854d
 80084f0:	0800854d 	.word	0x0800854d
 80084f4:	0800854d 	.word	0x0800854d
 80084f8:	0800854d 	.word	0x0800854d
 80084fc:	08008555 	.word	0x08008555
 8008500:	0800854d 	.word	0x0800854d
 8008504:	0800854d 	.word	0x0800854d
 8008508:	0800854d 	.word	0x0800854d
 800850c:	0800854d 	.word	0x0800854d
 8008510:	0800854d 	.word	0x0800854d
 8008514:	0800854d 	.word	0x0800854d
 8008518:	0800854d 	.word	0x0800854d
 800851c:	08008555 	.word	0x08008555
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008524:	3308      	adds	r3, #8
 8008526:	2101      	movs	r1, #1
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fd05 	bl	8008f38 <RCCEx_PLL2_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008534:	e00f      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800853a:	3328      	adds	r3, #40	@ 0x28
 800853c:	2101      	movs	r1, #1
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fdac 	bl	800909c <RCCEx_PLL3_Config>
 8008544:	4603      	mov	r3, r0
 8008546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800854a:	e004      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008552:	e000      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800855e:	4bbf      	ldr	r3, [pc, #764]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008562:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800856c:	4abb      	ldr	r2, [pc, #748]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800856e:	430b      	orrs	r3, r1
 8008570:	6553      	str	r3, [r2, #84]	@ 0x54
 8008572:	e003      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f002 0302 	and.w	r3, r2, #2
 8008588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800858c:	2300      	movs	r3, #0
 800858e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008592:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	d041      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800859c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085a2:	2b05      	cmp	r3, #5
 80085a4:	d824      	bhi.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80085a6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085f9 	.word	0x080085f9
 80085b0:	080085c5 	.word	0x080085c5
 80085b4:	080085db 	.word	0x080085db
 80085b8:	080085f9 	.word	0x080085f9
 80085bc:	080085f9 	.word	0x080085f9
 80085c0:	080085f9 	.word	0x080085f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c8:	3308      	adds	r3, #8
 80085ca:	2101      	movs	r1, #1
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fcb3 	bl	8008f38 <RCCEx_PLL2_Config>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085d8:	e00f      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085de:	3328      	adds	r3, #40	@ 0x28
 80085e0:	2101      	movs	r1, #1
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fd5a 	bl	800909c <RCCEx_PLL3_Config>
 80085e8:	4603      	mov	r3, r0
 80085ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085ee:	e004      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085f6:	e000      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80085f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008602:	4b96      	ldr	r3, [pc, #600]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008606:	f023 0107 	bic.w	r1, r3, #7
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008610:	4a92      	ldr	r2, [pc, #584]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008612:	430b      	orrs	r3, r1
 8008614:	6553      	str	r3, [r2, #84]	@ 0x54
 8008616:	e003      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	f002 0304 	and.w	r3, r2, #4
 800862c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008630:	2300      	movs	r3, #0
 8008632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008636:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800863a:	460b      	mov	r3, r1
 800863c:	4313      	orrs	r3, r2
 800863e:	d044      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008648:	2b05      	cmp	r3, #5
 800864a:	d825      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800864c:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	080086a1 	.word	0x080086a1
 8008658:	0800866d 	.word	0x0800866d
 800865c:	08008683 	.word	0x08008683
 8008660:	080086a1 	.word	0x080086a1
 8008664:	080086a1 	.word	0x080086a1
 8008668:	080086a1 	.word	0x080086a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800866c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008670:	3308      	adds	r3, #8
 8008672:	2101      	movs	r1, #1
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fc5f 	bl	8008f38 <RCCEx_PLL2_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008680:	e00f      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008686:	3328      	adds	r3, #40	@ 0x28
 8008688:	2101      	movs	r1, #1
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fd06 	bl	800909c <RCCEx_PLL3_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008696:	e004      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800869e:	e000      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80086a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086aa:	4b6c      	ldr	r3, [pc, #432]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ae:	f023 0107 	bic.w	r1, r3, #7
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ba:	4a68      	ldr	r2, [pc, #416]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086bc:	430b      	orrs	r3, r1
 80086be:	6593      	str	r3, [r2, #88]	@ 0x58
 80086c0:	e003      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f002 0320 	and.w	r3, r2, #32
 80086d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086da:	2300      	movs	r3, #0
 80086dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086e4:	460b      	mov	r3, r1
 80086e6:	4313      	orrs	r3, r2
 80086e8:	d055      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086f6:	d033      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80086f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086fc:	d82c      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80086fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008702:	d02f      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008708:	d826      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800870a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800870e:	d02b      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008710:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008714:	d820      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871a:	d012      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800871c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008720:	d81a      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d022      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800872a:	d115      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800872c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008730:	3308      	adds	r3, #8
 8008732:	2100      	movs	r1, #0
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fbff 	bl	8008f38 <RCCEx_PLL2_Config>
 800873a:	4603      	mov	r3, r0
 800873c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008740:	e015      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008746:	3328      	adds	r3, #40	@ 0x28
 8008748:	2102      	movs	r1, #2
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fca6 	bl	800909c <RCCEx_PLL3_Config>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008756:	e00a      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800875e:	e006      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008760:	bf00      	nop
 8008762:	e004      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800876c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008776:	4b39      	ldr	r3, [pc, #228]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008786:	4a35      	ldr	r2, [pc, #212]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008788:	430b      	orrs	r3, r1
 800878a:	6553      	str	r3, [r2, #84]	@ 0x54
 800878c:	e003      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80087a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087a6:	2300      	movs	r3, #0
 80087a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4313      	orrs	r3, r2
 80087b4:	d058      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087c2:	d033      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80087c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087c8:	d82c      	bhi.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ce:	d02f      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80087d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d4:	d826      	bhi.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087da:	d02b      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80087dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087e0:	d820      	bhi.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087e6:	d012      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80087e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087ec:	d81a      	bhi.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d022      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80087f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087f6:	d115      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fc:	3308      	adds	r3, #8
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fb99 	bl	8008f38 <RCCEx_PLL2_Config>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800880c:	e015      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008812:	3328      	adds	r3, #40	@ 0x28
 8008814:	2102      	movs	r1, #2
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fc40 	bl	800909c <RCCEx_PLL3_Config>
 800881c:	4603      	mov	r3, r0
 800881e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008822:	e00a      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800882a:	e006      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800882c:	bf00      	nop
 800882e:	e004      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008830:	bf00      	nop
 8008832:	e002      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008834:	bf00      	nop
 8008836:	e000      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10e      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008842:	4b06      	ldr	r3, [pc, #24]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008846:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008852:	4a02      	ldr	r2, [pc, #8]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008854:	430b      	orrs	r3, r1
 8008856:	6593      	str	r3, [r2, #88]	@ 0x58
 8008858:	e006      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008878:	2300      	movs	r3, #0
 800887a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800887e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008882:	460b      	mov	r3, r1
 8008884:	4313      	orrs	r3, r2
 8008886:	d055      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008890:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008894:	d033      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008896:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800889a:	d82c      	bhi.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800889c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088a0:	d02f      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80088a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088a6:	d826      	bhi.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088ac:	d02b      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80088ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088b2:	d820      	bhi.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088b8:	d012      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80088ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088be:	d81a      	bhi.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d022      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80088c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088c8:	d115      	bne.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ce:	3308      	adds	r3, #8
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fb30 	bl	8008f38 <RCCEx_PLL2_Config>
 80088d8:	4603      	mov	r3, r0
 80088da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088de:	e015      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e4:	3328      	adds	r3, #40	@ 0x28
 80088e6:	2102      	movs	r1, #2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fbd7 	bl	800909c <RCCEx_PLL3_Config>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088f4:	e00a      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088fc:	e006      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80088fe:	bf00      	nop
 8008900:	e004      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008902:	bf00      	nop
 8008904:	e002      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008906:	bf00      	nop
 8008908:	e000      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800890a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800890c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10b      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008914:	4ba1      	ldr	r3, [pc, #644]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008918:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800891c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008920:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008924:	4a9d      	ldr	r2, [pc, #628]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008926:	430b      	orrs	r3, r1
 8008928:	6593      	str	r3, [r2, #88]	@ 0x58
 800892a:	e003      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f002 0308 	and.w	r3, r2, #8
 8008940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008944:	2300      	movs	r3, #0
 8008946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800894a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800894e:	460b      	mov	r3, r1
 8008950:	4313      	orrs	r3, r2
 8008952:	d01e      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800895c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008960:	d10c      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008966:	3328      	adds	r3, #40	@ 0x28
 8008968:	2102      	movs	r1, #2
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fb96 	bl	800909c <RCCEx_PLL3_Config>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800897c:	4b87      	ldr	r3, [pc, #540]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800897e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008980:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800898c:	4a83      	ldr	r2, [pc, #524]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800898e:	430b      	orrs	r3, r1
 8008990:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	f002 0310 	and.w	r3, r2, #16
 800899e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089a2:	2300      	movs	r3, #0
 80089a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80089ac:	460b      	mov	r3, r1
 80089ae:	4313      	orrs	r3, r2
 80089b0:	d01e      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80089b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089be:	d10c      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c4:	3328      	adds	r3, #40	@ 0x28
 80089c6:	2102      	movs	r1, #2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fb67 	bl	800909c <RCCEx_PLL3_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089da:	4b70      	ldr	r3, [pc, #448]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089ea:	4a6c      	ldr	r2, [pc, #432]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ec:	430b      	orrs	r3, r1
 80089ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80089fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a00:	2300      	movs	r3, #0
 8008a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	d03e      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a1c:	d022      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a22:	d81b      	bhi.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a2c:	d00b      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008a2e:	e015      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a34:	3308      	adds	r3, #8
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fa7d 	bl	8008f38 <RCCEx_PLL2_Config>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a44:	e00f      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4a:	3328      	adds	r3, #40	@ 0x28
 8008a4c:	2102      	movs	r1, #2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fb24 	bl	800909c <RCCEx_PLL3_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a5a:	e004      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a62:	e000      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a7e:	4a47      	ldr	r2, [pc, #284]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a80:	430b      	orrs	r3, r1
 8008a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a84:	e003      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008aa0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d03b      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ab6:	d01f      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ab8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008abc:	d818      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ac2:	d003      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008ac4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ac8:	d007      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008aca:	e011      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008acc:	4b33      	ldr	r3, [pc, #204]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	4a32      	ldr	r2, [pc, #200]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ad8:	e00f      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ade:	3328      	adds	r3, #40	@ 0x28
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fada 	bl	800909c <RCCEx_PLL3_Config>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008aee:	e004      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008af6:	e000      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10b      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b02:	4b26      	ldr	r3, [pc, #152]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b12:	4a22      	ldr	r2, [pc, #136]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b14:	430b      	orrs	r3, r1
 8008b16:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b18:	e003      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b30:	2300      	movs	r3, #0
 8008b32:	677b      	str	r3, [r7, #116]	@ 0x74
 8008b34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	d034      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4c:	d007      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008b4e:	e011      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b50:	4b12      	ldr	r3, [pc, #72]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b54:	4a11      	ldr	r2, [pc, #68]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b5c:	e00e      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b62:	3308      	adds	r3, #8
 8008b64:	2102      	movs	r1, #2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f9e6 	bl	8008f38 <RCCEx_PLL2_Config>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b72:	e003      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10d      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b84:	4b05      	ldr	r3, [pc, #20]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b92:	4a02      	ldr	r2, [pc, #8]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b94:	430b      	orrs	r3, r1
 8008b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008b98:	e006      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008b9a:	bf00      	nop
 8008b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	d00c      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc8:	3328      	adds	r3, #40	@ 0x28
 8008bca:	2102      	movs	r1, #2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fa65 	bl	800909c <RCCEx_PLL3_Config>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008bea:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bec:	2300      	movs	r3, #0
 8008bee:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bf0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	d038      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c06:	d018      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008c08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c0c:	d811      	bhi.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c12:	d014      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c18:	d80b      	bhi.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d011      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c22:	d106      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c24:	4bc3      	ldr	r3, [pc, #780]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c28:	4ac2      	ldr	r2, [pc, #776]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c30:	e008      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c38:	e004      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c3a:	bf00      	nop
 8008c3c:	e002      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c3e:	bf00      	nop
 8008c40:	e000      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10b      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c4c:	4bb9      	ldr	r3, [pc, #740]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5c:	4ab5      	ldr	r2, [pc, #724]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c62:	e003      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008c82:	460b      	mov	r3, r1
 8008c84:	4313      	orrs	r3, r2
 8008c86:	d009      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c88:	4baa      	ldr	r3, [pc, #680]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c96:	4aa7      	ldr	r2, [pc, #668]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008ca8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008caa:	2300      	movs	r3, #0
 8008cac:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d00a      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008cb8:	4b9e      	ldr	r3, [pc, #632]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008cc8:	4a9a      	ldr	r2, [pc, #616]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cdc:	2300      	movs	r3, #0
 8008cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	d009      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cea:	4b92      	ldr	r3, [pc, #584]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cf8:	4a8e      	ldr	r2, [pc, #568]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008d0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d14:	460b      	mov	r3, r1
 8008d16:	4313      	orrs	r3, r2
 8008d18:	d00e      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d1a:	4b86      	ldr	r3, [pc, #536]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	4a85      	ldr	r2, [pc, #532]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d24:	6113      	str	r3, [r2, #16]
 8008d26:	4b83      	ldr	r3, [pc, #524]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d28:	6919      	ldr	r1, [r3, #16]
 8008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d32:	4a80      	ldr	r2, [pc, #512]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d46:	2300      	movs	r3, #0
 8008d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4313      	orrs	r3, r2
 8008d52:	d009      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d54:	4b77      	ldr	r3, [pc, #476]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d62:	4a74      	ldr	r2, [pc, #464]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d76:	2300      	movs	r3, #0
 8008d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d00a      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d84:	4b6b      	ldr	r3, [pc, #428]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d94:	4a67      	ldr	r2, [pc, #412]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d96:	430b      	orrs	r3, r1
 8008d98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	2100      	movs	r1, #0
 8008da4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008db0:	460b      	mov	r3, r1
 8008db2:	4313      	orrs	r3, r2
 8008db4:	d011      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dba:	3308      	adds	r3, #8
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f8ba 	bl	8008f38 <RCCEx_PLL2_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	2100      	movs	r1, #0
 8008de4:	6239      	str	r1, [r7, #32]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008df0:	460b      	mov	r3, r1
 8008df2:	4313      	orrs	r3, r2
 8008df4:	d011      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f89a 	bl	8008f38 <RCCEx_PLL2_Config>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	2100      	movs	r1, #0
 8008e24:	61b9      	str	r1, [r7, #24]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	61fb      	str	r3, [r7, #28]
 8008e2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008e30:	460b      	mov	r3, r1
 8008e32:	4313      	orrs	r3, r2
 8008e34:	d011      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	2102      	movs	r1, #2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f87a 	bl	8008f38 <RCCEx_PLL2_Config>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	2100      	movs	r1, #0
 8008e64:	6139      	str	r1, [r7, #16]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008e70:	460b      	mov	r3, r1
 8008e72:	4313      	orrs	r3, r2
 8008e74:	d011      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e7a:	3328      	adds	r3, #40	@ 0x28
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 f90c 	bl	800909c <RCCEx_PLL3_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	f003 0310 	and.w	r3, r3, #16
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d011      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eba:	3328      	adds	r3, #40	@ 0x28
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f8ec 	bl	800909c <RCCEx_PLL3_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	607b      	str	r3, [r7, #4]
 8008eec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	d011      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efa:	3328      	adds	r3, #40	@ 0x28
 8008efc:	2102      	movs	r1, #2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 f8cc 	bl	800909c <RCCEx_PLL3_Config>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008f1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e000      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f34:	58024400 	.word	0x58024400

08008f38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f46:	4b53      	ldr	r3, [pc, #332]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d101      	bne.n	8008f56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e099      	b.n	800908a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f56:	4b4f      	ldr	r3, [pc, #316]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f62:	f7fb f8a9 	bl	80040b8 <HAL_GetTick>
 8008f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f68:	e008      	b.n	8008f7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f6a:	f7fb f8a5 	bl	80040b8 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e086      	b.n	800908a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f7c:	4b45      	ldr	r3, [pc, #276]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f0      	bne.n	8008f6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f88:	4b42      	ldr	r3, [pc, #264]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	031b      	lsls	r3, r3, #12
 8008f96:	493f      	ldr	r1, [pc, #252]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	025b      	lsls	r3, r3, #9
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	041b      	lsls	r3, r3, #16
 8008fba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	061b      	lsls	r3, r3, #24
 8008fc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008fcc:	4931      	ldr	r1, [pc, #196]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008fd2:	4b30      	ldr	r3, [pc, #192]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	492d      	ldr	r1, [pc, #180]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	f023 0220 	bic.w	r2, r3, #32
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	4928      	ldr	r1, [pc, #160]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ff6:	4b27      	ldr	r3, [pc, #156]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	4a26      	ldr	r2, [pc, #152]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008ffc:	f023 0310 	bic.w	r3, r3, #16
 8009000:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009002:	4b24      	ldr	r3, [pc, #144]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009004:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009006:	4b24      	ldr	r3, [pc, #144]	@ (8009098 <RCCEx_PLL2_Config+0x160>)
 8009008:	4013      	ands	r3, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	69d2      	ldr	r2, [r2, #28]
 800900e:	00d2      	lsls	r2, r2, #3
 8009010:	4920      	ldr	r1, [pc, #128]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009012:	4313      	orrs	r3, r2
 8009014:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009016:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901a:	4a1e      	ldr	r2, [pc, #120]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800901c:	f043 0310 	orr.w	r3, r3, #16
 8009020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009028:	4b1a      	ldr	r3, [pc, #104]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800902a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902c:	4a19      	ldr	r2, [pc, #100]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800902e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009032:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009034:	e00f      	b.n	8009056 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d106      	bne.n	800904a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800903c:	4b15      	ldr	r3, [pc, #84]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	4a14      	ldr	r2, [pc, #80]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009048:	e005      	b.n	8009056 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800904a:	4b12      	ldr	r3, [pc, #72]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800904c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904e:	4a11      	ldr	r2, [pc, #68]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009050:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009054:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009056:	4b0f      	ldr	r3, [pc, #60]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a0e      	ldr	r2, [pc, #56]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800905c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009062:	f7fb f829 	bl	80040b8 <HAL_GetTick>
 8009066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009068:	e008      	b.n	800907c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800906a:	f7fb f825 	bl	80040b8 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e006      	b.n	800908a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0f0      	beq.n	800906a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
 8009098:	ffff0007 	.word	0xffff0007

0800909c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090aa:	4b53      	ldr	r3, [pc, #332]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d101      	bne.n	80090ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e099      	b.n	80091ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80090ba:	4b4f      	ldr	r3, [pc, #316]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a4e      	ldr	r2, [pc, #312]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c6:	f7fa fff7 	bl	80040b8 <HAL_GetTick>
 80090ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090cc:	e008      	b.n	80090e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ce:	f7fa fff3 	bl	80040b8 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e086      	b.n	80091ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090e0:	4b45      	ldr	r3, [pc, #276]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1f0      	bne.n	80090ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090ec:	4b42      	ldr	r3, [pc, #264]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	051b      	lsls	r3, r3, #20
 80090fa:	493f      	ldr	r1, [pc, #252]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	3b01      	subs	r3, #1
 8009106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	3b01      	subs	r3, #1
 8009110:	025b      	lsls	r3, r3, #9
 8009112:	b29b      	uxth	r3, r3
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	3b01      	subs	r3, #1
 800911c:	041b      	lsls	r3, r3, #16
 800911e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	3b01      	subs	r3, #1
 800912a:	061b      	lsls	r3, r3, #24
 800912c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009130:	4931      	ldr	r1, [pc, #196]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009132:	4313      	orrs	r3, r2
 8009134:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009136:	4b30      	ldr	r3, [pc, #192]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	492d      	ldr	r1, [pc, #180]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009144:	4313      	orrs	r3, r2
 8009146:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009148:	4b2b      	ldr	r3, [pc, #172]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800914a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	4928      	ldr	r1, [pc, #160]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009156:	4313      	orrs	r3, r2
 8009158:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800915a:	4b27      	ldr	r3, [pc, #156]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800915c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915e:	4a26      	ldr	r2, [pc, #152]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009166:	4b24      	ldr	r3, [pc, #144]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800916a:	4b24      	ldr	r3, [pc, #144]	@ (80091fc <RCCEx_PLL3_Config+0x160>)
 800916c:	4013      	ands	r3, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	69d2      	ldr	r2, [r2, #28]
 8009172:	00d2      	lsls	r2, r2, #3
 8009174:	4920      	ldr	r1, [pc, #128]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800917a:	4b1f      	ldr	r3, [pc, #124]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	4a1e      	ldr	r2, [pc, #120]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800918c:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	4a19      	ldr	r2, [pc, #100]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009192:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009198:	e00f      	b.n	80091ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d106      	bne.n	80091ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091a0:	4b15      	ldr	r3, [pc, #84]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	4a14      	ldr	r2, [pc, #80]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091ac:	e005      	b.n	80091ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091ae:	4b12      	ldr	r3, [pc, #72]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b2:	4a11      	ldr	r2, [pc, #68]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091ba:	4b0f      	ldr	r3, [pc, #60]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a0e      	ldr	r2, [pc, #56]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c6:	f7fa ff77 	bl	80040b8 <HAL_GetTick>
 80091ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091cc:	e008      	b.n	80091e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091ce:	f7fa ff73 	bl	80040b8 <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d901      	bls.n	80091e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e006      	b.n	80091ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091e0:	4b05      	ldr	r3, [pc, #20]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0f0      	beq.n	80091ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	58024400 	.word	0x58024400
 80091fc:	ffff0007 	.word	0xffff0007

08009200 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e02b      	b.n	800926c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f825 	bl	8009278 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3304      	adds	r3, #4
 800923e:	4619      	mov	r1, r3
 8009240:	4610      	mov	r0, r2
 8009242:	f000 fca9 	bl	8009b98 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	461a      	mov	r2, r3
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	f000 fcfd 	bl	8009c50 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009256:	4b07      	ldr	r3, [pc, #28]	@ (8009274 <HAL_SDRAM_Init+0x74>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a06      	ldr	r2, [pc, #24]	@ (8009274 <HAL_SDRAM_Init+0x74>)
 800925c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009260:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	52004000 	.word	0x52004000

08009278 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800929e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d101      	bne.n	80092aa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80092a6:	2302      	movs	r3, #2
 80092a8:	e021      	b.n	80092ee <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d002      	beq.n	80092b6 <HAL_SDRAM_SendCommand+0x2a>
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d118      	bne.n	80092e8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fd2c 	bl	8009d24 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d104      	bne.n	80092de <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2205      	movs	r2, #5
 80092d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092dc:	e006      	b.n	80092ec <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092e6:	e001      	b.n	80092ec <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d101      	bne.n	8009310 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800930c:	2302      	movs	r3, #2
 800930e:	e016      	b.n	800933e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b01      	cmp	r3, #1
 800931a:	d10f      	bne.n	800933c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fd1e 	bl	8009d6c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	e000      	b.n	800933e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e049      	b.n	80093ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f841 	bl	80093f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3304      	adds	r3, #4
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f000 fac5 	bl	8009914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	d001      	beq.n	8009420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e054      	b.n	80094ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f042 0201 	orr.w	r2, r2, #1
 8009436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a26      	ldr	r2, [pc, #152]	@ (80094d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d022      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x80>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800944a:	d01d      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x80>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a22      	ldr	r2, [pc, #136]	@ (80094dc <HAL_TIM_Base_Start_IT+0xd4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d018      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x80>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a21      	ldr	r2, [pc, #132]	@ (80094e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d013      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x80>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a1f      	ldr	r2, [pc, #124]	@ (80094e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00e      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x80>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a1e      	ldr	r2, [pc, #120]	@ (80094e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d009      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x80>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a1c      	ldr	r2, [pc, #112]	@ (80094ec <HAL_TIM_Base_Start_IT+0xe4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d004      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x80>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a1b      	ldr	r2, [pc, #108]	@ (80094f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d115      	bne.n	80094b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	4b19      	ldr	r3, [pc, #100]	@ (80094f4 <HAL_TIM_Base_Start_IT+0xec>)
 8009490:	4013      	ands	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b06      	cmp	r3, #6
 8009498:	d015      	beq.n	80094c6 <HAL_TIM_Base_Start_IT+0xbe>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094a0:	d011      	beq.n	80094c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0201 	orr.w	r2, r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b2:	e008      	b.n	80094c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0201 	orr.w	r2, r2, #1
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	e000      	b.n	80094c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	40010000 	.word	0x40010000
 80094dc:	40000400 	.word	0x40000400
 80094e0:	40000800 	.word	0x40000800
 80094e4:	40000c00 	.word	0x40000c00
 80094e8:	40010400 	.word	0x40010400
 80094ec:	40001800 	.word	0x40001800
 80094f0:	40014000 	.word	0x40014000
 80094f4:	00010007 	.word	0x00010007

080094f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e049      	b.n	800959e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f89d 	bl	800965e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f000 f9ec 	bl	8009914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6a1a      	ldr	r2, [r3, #32]
 80095bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80095c0:	4013      	ands	r3, r2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10f      	bne.n	80095e6 <HAL_TIM_PWM_DeInit+0x40>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6a1a      	ldr	r2, [r3, #32]
 80095cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d107      	bne.n	80095e6 <HAL_TIM_PWM_DeInit+0x40>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0201 	bic.w	r2, r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f843 	bl	8009672 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009666:	bf00      	nop
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b02      	cmp	r3, #2
 800969a:	d122      	bne.n	80096e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d11b      	bne.n	80096e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f06f 0202 	mvn.w	r2, #2
 80096b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	f003 0303 	and.w	r3, r3, #3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f905 	bl	80098d8 <HAL_TIM_IC_CaptureCallback>
 80096ce:	e005      	b.n	80096dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f8f7 	bl	80098c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f908 	bl	80098ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d122      	bne.n	8009736 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b04      	cmp	r3, #4
 80096fc:	d11b      	bne.n	8009736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f06f 0204 	mvn.w	r2, #4
 8009706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009718:	2b00      	cmp	r3, #0
 800971a:	d003      	beq.n	8009724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f8db 	bl	80098d8 <HAL_TIM_IC_CaptureCallback>
 8009722:	e005      	b.n	8009730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f8cd 	bl	80098c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8de 	bl	80098ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	f003 0308 	and.w	r3, r3, #8
 8009740:	2b08      	cmp	r3, #8
 8009742:	d122      	bne.n	800978a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b08      	cmp	r3, #8
 8009750:	d11b      	bne.n	800978a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f06f 0208 	mvn.w	r2, #8
 800975a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2204      	movs	r2, #4
 8009760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f8b1 	bl	80098d8 <HAL_TIM_IC_CaptureCallback>
 8009776:	e005      	b.n	8009784 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f8a3 	bl	80098c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f8b4 	bl	80098ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b10      	cmp	r3, #16
 8009796:	d122      	bne.n	80097de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f003 0310 	and.w	r3, r3, #16
 80097a2:	2b10      	cmp	r3, #16
 80097a4:	d11b      	bne.n	80097de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f06f 0210 	mvn.w	r2, #16
 80097ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2208      	movs	r2, #8
 80097b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f887 	bl	80098d8 <HAL_TIM_IC_CaptureCallback>
 80097ca:	e005      	b.n	80097d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f879 	bl	80098c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f88a 	bl	80098ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d10e      	bne.n	800980a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d107      	bne.n	800980a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f06f 0201 	mvn.w	r2, #1
 8009802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f9b3 	bl	8009b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009814:	2b80      	cmp	r3, #128	@ 0x80
 8009816:	d10e      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009822:	2b80      	cmp	r3, #128	@ 0x80
 8009824:	d107      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f913 	bl	8009a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009844:	d10e      	bne.n	8009864 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009850:	2b80      	cmp	r3, #128	@ 0x80
 8009852:	d107      	bne.n	8009864 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800985c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f906 	bl	8009a70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800986e:	2b40      	cmp	r3, #64	@ 0x40
 8009870:	d10e      	bne.n	8009890 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987c:	2b40      	cmp	r3, #64	@ 0x40
 800987e:	d107      	bne.n	8009890 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f838 	bl	8009900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0320 	and.w	r3, r3, #32
 800989a:	2b20      	cmp	r3, #32
 800989c:	d10e      	bne.n	80098bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d107      	bne.n	80098bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f06f 0220 	mvn.w	r2, #32
 80098b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f8c6 	bl	8009a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a40      	ldr	r2, [pc, #256]	@ (8009a28 <TIM_Base_SetConfig+0x114>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d013      	beq.n	8009954 <TIM_Base_SetConfig+0x40>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009932:	d00f      	beq.n	8009954 <TIM_Base_SetConfig+0x40>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a3d      	ldr	r2, [pc, #244]	@ (8009a2c <TIM_Base_SetConfig+0x118>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d00b      	beq.n	8009954 <TIM_Base_SetConfig+0x40>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a3c      	ldr	r2, [pc, #240]	@ (8009a30 <TIM_Base_SetConfig+0x11c>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d007      	beq.n	8009954 <TIM_Base_SetConfig+0x40>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a3b      	ldr	r2, [pc, #236]	@ (8009a34 <TIM_Base_SetConfig+0x120>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d003      	beq.n	8009954 <TIM_Base_SetConfig+0x40>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a3a      	ldr	r2, [pc, #232]	@ (8009a38 <TIM_Base_SetConfig+0x124>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d108      	bne.n	8009966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800995a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4313      	orrs	r3, r2
 8009964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a2f      	ldr	r2, [pc, #188]	@ (8009a28 <TIM_Base_SetConfig+0x114>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d01f      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009974:	d01b      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a2c      	ldr	r2, [pc, #176]	@ (8009a2c <TIM_Base_SetConfig+0x118>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d017      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a2b      	ldr	r2, [pc, #172]	@ (8009a30 <TIM_Base_SetConfig+0x11c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d013      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a2a      	ldr	r2, [pc, #168]	@ (8009a34 <TIM_Base_SetConfig+0x120>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d00f      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a29      	ldr	r2, [pc, #164]	@ (8009a38 <TIM_Base_SetConfig+0x124>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d00b      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a28      	ldr	r2, [pc, #160]	@ (8009a3c <TIM_Base_SetConfig+0x128>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d007      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a27      	ldr	r2, [pc, #156]	@ (8009a40 <TIM_Base_SetConfig+0x12c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d003      	beq.n	80099ae <TIM_Base_SetConfig+0x9a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a26      	ldr	r2, [pc, #152]	@ (8009a44 <TIM_Base_SetConfig+0x130>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d108      	bne.n	80099c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a10      	ldr	r2, [pc, #64]	@ (8009a28 <TIM_Base_SetConfig+0x114>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d00f      	beq.n	8009a0c <TIM_Base_SetConfig+0xf8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a12      	ldr	r2, [pc, #72]	@ (8009a38 <TIM_Base_SetConfig+0x124>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00b      	beq.n	8009a0c <TIM_Base_SetConfig+0xf8>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a11      	ldr	r2, [pc, #68]	@ (8009a3c <TIM_Base_SetConfig+0x128>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d007      	beq.n	8009a0c <TIM_Base_SetConfig+0xf8>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a10      	ldr	r2, [pc, #64]	@ (8009a40 <TIM_Base_SetConfig+0x12c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d003      	beq.n	8009a0c <TIM_Base_SetConfig+0xf8>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a0f      	ldr	r2, [pc, #60]	@ (8009a44 <TIM_Base_SetConfig+0x130>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d103      	bne.n	8009a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	691a      	ldr	r2, [r3, #16]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	615a      	str	r2, [r3, #20]
}
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	40010000 	.word	0x40010000
 8009a2c:	40000400 	.word	0x40000400
 8009a30:	40000800 	.word	0x40000800
 8009a34:	40000c00 	.word	0x40000c00
 8009a38:	40010400 	.word	0x40010400
 8009a3c:	40014000 	.word	0x40014000
 8009a40:	40014400 	.word	0x40014400
 8009a44:	40014800 	.word	0x40014800

08009a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b090      	sub	sp, #64	@ 0x40
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009a8c:	4b33      	ldr	r3, [pc, #204]	@ (8009b5c <HAL_InitTick+0xd8>)
 8009a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a92:	4a32      	ldr	r2, [pc, #200]	@ (8009b5c <HAL_InitTick+0xd8>)
 8009a94:	f043 0310 	orr.w	r3, r3, #16
 8009a98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8009b5c <HAL_InitTick+0xd8>)
 8009a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	60bb      	str	r3, [r7, #8]
 8009aa8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009aaa:	f107 020c 	add.w	r2, r7, #12
 8009aae:	f107 0310 	add.w	r3, r7, #16
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fd fff3 	bl	8007aa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8009abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009ac4:	f7fd ffc0 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8009ac8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009aca:	e004      	b.n	8009ad6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8009acc:	f7fd ffbc 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad8:	4a21      	ldr	r2, [pc, #132]	@ (8009b60 <HAL_InitTick+0xdc>)
 8009ada:	fba2 2303 	umull	r2, r3, r2, r3
 8009ade:	0c9b      	lsrs	r3, r3, #18
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8009ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8009b64 <HAL_InitTick+0xe0>)
 8009ae6:	4a20      	ldr	r2, [pc, #128]	@ (8009b68 <HAL_InitTick+0xe4>)
 8009ae8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8009aea:	4b1e      	ldr	r3, [pc, #120]	@ (8009b64 <HAL_InitTick+0xe0>)
 8009aec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009af0:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8009af2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b64 <HAL_InitTick+0xe0>)
 8009af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af6:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 8009af8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b64 <HAL_InitTick+0xe0>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009afe:	4b19      	ldr	r3, [pc, #100]	@ (8009b64 <HAL_InitTick+0xe0>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&TimHandle);
 8009b04:	4817      	ldr	r0, [pc, #92]	@ (8009b64 <HAL_InitTick+0xe0>)
 8009b06:	f7ff fc1e 	bl	8009346 <HAL_TIM_Base_Init>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status == HAL_OK)
 8009b10:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d11b      	bne.n	8009b50 <HAL_InitTick+0xcc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 8009b18:	4812      	ldr	r0, [pc, #72]	@ (8009b64 <HAL_InitTick+0xe0>)
 8009b1a:	f7ff fc75 	bl	8009408 <HAL_TIM_Base_Start_IT>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (status == HAL_OK)
 8009b24:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d111      	bne.n	8009b50 <HAL_InitTick+0xcc>
    {
	  /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009b2c:	2036      	movs	r0, #54	@ 0x36
 8009b2e:	f7fa fbe1 	bl	80042f4 <HAL_NVIC_EnableIRQ>
   
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b0f      	cmp	r3, #15
 8009b36:	d808      	bhi.n	8009b4a <HAL_InitTick+0xc6>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 8009b38:	2200      	movs	r2, #0
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	2036      	movs	r0, #54	@ 0x36
 8009b3e:	f7fa fbbf 	bl	80042c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009b42:	4a0a      	ldr	r2, [pc, #40]	@ (8009b6c <HAL_InitTick+0xe8>)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	e002      	b.n	8009b50 <HAL_InitTick+0xcc>
      }
      else
      {
        status = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
   }
}

  /* Return function status */
  return status;
 8009b50:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3740      	adds	r7, #64	@ 0x40
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	58024400 	.word	0x58024400
 8009b60:	431bde83 	.word	0x431bde83
 8009b64:	2400114c 	.word	0x2400114c
 8009b68:	40001000 	.word	0x40001000
 8009b6c:	2400005c 	.word	0x2400005c

08009b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8009b78:	f7fa fa8a 	bl	8004090 <HAL_IncTick>
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8009b88:	4802      	ldr	r0, [pc, #8]	@ (8009b94 <TIM6_DAC_IRQHandler+0x10>)
 8009b8a:	f7ff fd7c 	bl	8009686 <HAL_TIM_IRQHandler>
}
 8009b8e:	bf00      	nop
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	2400114c 	.word	0x2400114c

08009b98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d121      	bne.n	8009bee <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	4b27      	ldr	r3, [pc, #156]	@ (8009c4c <FMC_SDRAM_Init+0xb4>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	6851      	ldr	r1, [r2, #4]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	6892      	ldr	r2, [r2, #8]
 8009bba:	4311      	orrs	r1, r2
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	68d2      	ldr	r2, [r2, #12]
 8009bc0:	4311      	orrs	r1, r2
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	6912      	ldr	r2, [r2, #16]
 8009bc6:	4311      	orrs	r1, r2
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	6952      	ldr	r2, [r2, #20]
 8009bcc:	4311      	orrs	r1, r2
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	6992      	ldr	r2, [r2, #24]
 8009bd2:	4311      	orrs	r1, r2
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	69d2      	ldr	r2, [r2, #28]
 8009bd8:	4311      	orrs	r1, r2
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	6a12      	ldr	r2, [r2, #32]
 8009bde:	4311      	orrs	r1, r2
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009be4:	430a      	orrs	r2, r1
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	e026      	b.n	8009c3c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	69d9      	ldr	r1, [r3, #28]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	4319      	orrs	r1, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c04:	430b      	orrs	r3, r1
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	4b0e      	ldr	r3, [pc, #56]	@ (8009c4c <FMC_SDRAM_Init+0xb4>)
 8009c12:	4013      	ands	r3, r2
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	6851      	ldr	r1, [r2, #4]
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	6892      	ldr	r2, [r2, #8]
 8009c1c:	4311      	orrs	r1, r2
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	68d2      	ldr	r2, [r2, #12]
 8009c22:	4311      	orrs	r1, r2
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	6912      	ldr	r2, [r2, #16]
 8009c28:	4311      	orrs	r1, r2
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	6952      	ldr	r2, [r2, #20]
 8009c2e:	4311      	orrs	r1, r2
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	6992      	ldr	r2, [r2, #24]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	431a      	orrs	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	ffff8000 	.word	0xffff8000

08009c50 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d128      	bne.n	8009cb4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	1e59      	subs	r1, r3, #1
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	4319      	orrs	r1, r3
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	4319      	orrs	r1, r3
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	031b      	lsls	r3, r3, #12
 8009c8c:	4319      	orrs	r1, r3
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	4319      	orrs	r1, r3
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	051b      	lsls	r3, r3, #20
 8009ca0:	4319      	orrs	r1, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	061b      	lsls	r3, r3, #24
 8009caa:	430b      	orrs	r3, r1
 8009cac:	431a      	orrs	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	609a      	str	r2, [r3, #8]
 8009cb2:	e02d      	b.n	8009d10 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	689a      	ldr	r2, [r3, #8]
 8009cb8:	4b19      	ldr	r3, [pc, #100]	@ (8009d20 <FMC_SDRAM_Timing_Init+0xd0>)
 8009cba:	4013      	ands	r3, r2
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	68d2      	ldr	r2, [r2, #12]
 8009cc0:	3a01      	subs	r2, #1
 8009cc2:	0311      	lsls	r1, r2, #12
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	6952      	ldr	r2, [r2, #20]
 8009cc8:	3a01      	subs	r2, #1
 8009cca:	0512      	lsls	r2, r2, #20
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	1e59      	subs	r1, r3, #1
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	011b      	lsls	r3, r3, #4
 8009cea:	4319      	orrs	r1, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	4319      	orrs	r1, r3
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	041b      	lsls	r3, r3, #16
 8009cfe:	4319      	orrs	r1, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	061b      	lsls	r3, r3, #24
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	ff0f0fff 	.word	0xff0f0fff

08009d24 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	4b0c      	ldr	r3, [pc, #48]	@ (8009d68 <FMC_SDRAM_SendCommand+0x44>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	6811      	ldr	r1, [r2, #0]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	6852      	ldr	r2, [r2, #4]
 8009d40:	4311      	orrs	r1, r2
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	6892      	ldr	r2, [r2, #8]
 8009d46:	3a01      	subs	r2, #1
 8009d48:	0152      	lsls	r2, r2, #5
 8009d4a:	4311      	orrs	r1, r2
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	68d2      	ldr	r2, [r2, #12]
 8009d50:	0252      	lsls	r2, r2, #9
 8009d52:	430a      	orrs	r2, r1
 8009d54:	431a      	orrs	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	ffc00000 	.word	0xffc00000

08009d6c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	695a      	ldr	r2, [r3, #20]
 8009d7a:	4b07      	ldr	r3, [pc, #28]	@ (8009d98 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	0052      	lsls	r2, r2, #1
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	ffffc001 	.word	0xffffc001

08009d9c <__cvt>:
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	ed2d 8b02 	vpush	{d8}
 8009da2:	eeb0 8b40 	vmov.f64	d8, d0
 8009da6:	b085      	sub	sp, #20
 8009da8:	4617      	mov	r7, r2
 8009daa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009dac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dae:	ee18 2a90 	vmov	r2, s17
 8009db2:	f025 0520 	bic.w	r5, r5, #32
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	bfb6      	itet	lt
 8009dba:	222d      	movlt	r2, #45	@ 0x2d
 8009dbc:	2200      	movge	r2, #0
 8009dbe:	eeb1 8b40 	vneglt.f64	d8, d0
 8009dc2:	2d46      	cmp	r5, #70	@ 0x46
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	d004      	beq.n	8009dd4 <__cvt+0x38>
 8009dca:	2d45      	cmp	r5, #69	@ 0x45
 8009dcc:	d100      	bne.n	8009dd0 <__cvt+0x34>
 8009dce:	3401      	adds	r4, #1
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	e000      	b.n	8009dd6 <__cvt+0x3a>
 8009dd4:	2103      	movs	r1, #3
 8009dd6:	ab03      	add	r3, sp, #12
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	ab02      	add	r3, sp, #8
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	4622      	mov	r2, r4
 8009de0:	4633      	mov	r3, r6
 8009de2:	eeb0 0b48 	vmov.f64	d0, d8
 8009de6:	f000 fe53 	bl	800aa90 <_dtoa_r>
 8009dea:	2d47      	cmp	r5, #71	@ 0x47
 8009dec:	d114      	bne.n	8009e18 <__cvt+0x7c>
 8009dee:	07fb      	lsls	r3, r7, #31
 8009df0:	d50a      	bpl.n	8009e08 <__cvt+0x6c>
 8009df2:	1902      	adds	r2, r0, r4
 8009df4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfc:	bf08      	it	eq
 8009dfe:	9203      	streq	r2, [sp, #12]
 8009e00:	2130      	movs	r1, #48	@ 0x30
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d319      	bcc.n	8009e3c <__cvt+0xa0>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e0c:	1a1b      	subs	r3, r3, r0
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	b005      	add	sp, #20
 8009e12:	ecbd 8b02 	vpop	{d8}
 8009e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e18:	2d46      	cmp	r5, #70	@ 0x46
 8009e1a:	eb00 0204 	add.w	r2, r0, r4
 8009e1e:	d1e9      	bne.n	8009df4 <__cvt+0x58>
 8009e20:	7803      	ldrb	r3, [r0, #0]
 8009e22:	2b30      	cmp	r3, #48	@ 0x30
 8009e24:	d107      	bne.n	8009e36 <__cvt+0x9a>
 8009e26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2e:	bf1c      	itt	ne
 8009e30:	f1c4 0401 	rsbne	r4, r4, #1
 8009e34:	6034      	strne	r4, [r6, #0]
 8009e36:	6833      	ldr	r3, [r6, #0]
 8009e38:	441a      	add	r2, r3
 8009e3a:	e7db      	b.n	8009df4 <__cvt+0x58>
 8009e3c:	1c5c      	adds	r4, r3, #1
 8009e3e:	9403      	str	r4, [sp, #12]
 8009e40:	7019      	strb	r1, [r3, #0]
 8009e42:	e7de      	b.n	8009e02 <__cvt+0x66>

08009e44 <__exponent>:
 8009e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e46:	2900      	cmp	r1, #0
 8009e48:	bfba      	itte	lt
 8009e4a:	4249      	neglt	r1, r1
 8009e4c:	232d      	movlt	r3, #45	@ 0x2d
 8009e4e:	232b      	movge	r3, #43	@ 0x2b
 8009e50:	2909      	cmp	r1, #9
 8009e52:	7002      	strb	r2, [r0, #0]
 8009e54:	7043      	strb	r3, [r0, #1]
 8009e56:	dd29      	ble.n	8009eac <__exponent+0x68>
 8009e58:	f10d 0307 	add.w	r3, sp, #7
 8009e5c:	461d      	mov	r5, r3
 8009e5e:	270a      	movs	r7, #10
 8009e60:	461a      	mov	r2, r3
 8009e62:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e66:	fb07 1416 	mls	r4, r7, r6, r1
 8009e6a:	3430      	adds	r4, #48	@ 0x30
 8009e6c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009e70:	460c      	mov	r4, r1
 8009e72:	2c63      	cmp	r4, #99	@ 0x63
 8009e74:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e78:	4631      	mov	r1, r6
 8009e7a:	dcf1      	bgt.n	8009e60 <__exponent+0x1c>
 8009e7c:	3130      	adds	r1, #48	@ 0x30
 8009e7e:	1e94      	subs	r4, r2, #2
 8009e80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e84:	1c41      	adds	r1, r0, #1
 8009e86:	4623      	mov	r3, r4
 8009e88:	42ab      	cmp	r3, r5
 8009e8a:	d30a      	bcc.n	8009ea2 <__exponent+0x5e>
 8009e8c:	f10d 0309 	add.w	r3, sp, #9
 8009e90:	1a9b      	subs	r3, r3, r2
 8009e92:	42ac      	cmp	r4, r5
 8009e94:	bf88      	it	hi
 8009e96:	2300      	movhi	r3, #0
 8009e98:	3302      	adds	r3, #2
 8009e9a:	4403      	add	r3, r0
 8009e9c:	1a18      	subs	r0, r3, r0
 8009e9e:	b003      	add	sp, #12
 8009ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ea6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009eaa:	e7ed      	b.n	8009e88 <__exponent+0x44>
 8009eac:	2330      	movs	r3, #48	@ 0x30
 8009eae:	3130      	adds	r1, #48	@ 0x30
 8009eb0:	7083      	strb	r3, [r0, #2]
 8009eb2:	70c1      	strb	r1, [r0, #3]
 8009eb4:	1d03      	adds	r3, r0, #4
 8009eb6:	e7f1      	b.n	8009e9c <__exponent+0x58>

08009eb8 <_printf_float>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	b08d      	sub	sp, #52	@ 0x34
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	461f      	mov	r7, r3
 8009ec8:	4605      	mov	r5, r0
 8009eca:	f000 fcdf 	bl	800a88c <_localeconv_r>
 8009ece:	f8d0 b000 	ldr.w	fp, [r0]
 8009ed2:	4658      	mov	r0, fp
 8009ed4:	f7f6 fa54 	bl	8000380 <strlen>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8009edc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009ee4:	6822      	ldr	r2, [r4, #0]
 8009ee6:	9005      	str	r0, [sp, #20]
 8009ee8:	3307      	adds	r3, #7
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	f103 0108 	add.w	r1, r3, #8
 8009ef2:	f8c8 1000 	str.w	r1, [r8]
 8009ef6:	ed93 0b00 	vldr	d0, [r3]
 8009efa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a158 <_printf_float+0x2a0>
 8009efe:	eeb0 7bc0 	vabs.f64	d7, d0
 8009f02:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009f0e:	dd24      	ble.n	8009f5a <_printf_float+0xa2>
 8009f10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f18:	d502      	bpl.n	8009f20 <_printf_float+0x68>
 8009f1a:	232d      	movs	r3, #45	@ 0x2d
 8009f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f20:	498f      	ldr	r1, [pc, #572]	@ (800a160 <_printf_float+0x2a8>)
 8009f22:	4b90      	ldr	r3, [pc, #576]	@ (800a164 <_printf_float+0x2ac>)
 8009f24:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009f28:	bf94      	ite	ls
 8009f2a:	4688      	movls	r8, r1
 8009f2c:	4698      	movhi	r8, r3
 8009f2e:	f022 0204 	bic.w	r2, r2, #4
 8009f32:	2303      	movs	r3, #3
 8009f34:	6123      	str	r3, [r4, #16]
 8009f36:	6022      	str	r2, [r4, #0]
 8009f38:	f04f 0a00 	mov.w	sl, #0
 8009f3c:	9700      	str	r7, [sp, #0]
 8009f3e:	4633      	mov	r3, r6
 8009f40:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009f42:	4621      	mov	r1, r4
 8009f44:	4628      	mov	r0, r5
 8009f46:	f000 f9d1 	bl	800a2ec <_printf_common>
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	f040 8089 	bne.w	800a062 <_printf_float+0x1aa>
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	b00d      	add	sp, #52	@ 0x34
 8009f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8009f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f62:	d709      	bvc.n	8009f78 <_printf_float+0xc0>
 8009f64:	ee10 3a90 	vmov	r3, s1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bfbc      	itt	lt
 8009f6c:	232d      	movlt	r3, #45	@ 0x2d
 8009f6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009f72:	497d      	ldr	r1, [pc, #500]	@ (800a168 <_printf_float+0x2b0>)
 8009f74:	4b7d      	ldr	r3, [pc, #500]	@ (800a16c <_printf_float+0x2b4>)
 8009f76:	e7d5      	b.n	8009f24 <_printf_float+0x6c>
 8009f78:	6863      	ldr	r3, [r4, #4]
 8009f7a:	1c59      	adds	r1, r3, #1
 8009f7c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009f80:	d139      	bne.n	8009ff6 <_printf_float+0x13e>
 8009f82:	2306      	movs	r3, #6
 8009f84:	6063      	str	r3, [r4, #4]
 8009f86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6022      	str	r2, [r4, #0]
 8009f8e:	9303      	str	r3, [sp, #12]
 8009f90:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009f96:	ab09      	add	r3, sp, #36	@ 0x24
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	6861      	ldr	r1, [r4, #4]
 8009f9c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f7ff fefb 	bl	8009d9c <__cvt>
 8009fa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009faa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fac:	4680      	mov	r8, r0
 8009fae:	d129      	bne.n	800a004 <_printf_float+0x14c>
 8009fb0:	1cc8      	adds	r0, r1, #3
 8009fb2:	db02      	blt.n	8009fba <_printf_float+0x102>
 8009fb4:	6863      	ldr	r3, [r4, #4]
 8009fb6:	4299      	cmp	r1, r3
 8009fb8:	dd41      	ble.n	800a03e <_printf_float+0x186>
 8009fba:	f1a9 0902 	sub.w	r9, r9, #2
 8009fbe:	fa5f f989 	uxtb.w	r9, r9
 8009fc2:	3901      	subs	r1, #1
 8009fc4:	464a      	mov	r2, r9
 8009fc6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009fca:	9109      	str	r1, [sp, #36]	@ 0x24
 8009fcc:	f7ff ff3a 	bl	8009e44 <__exponent>
 8009fd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fd2:	1813      	adds	r3, r2, r0
 8009fd4:	2a01      	cmp	r2, #1
 8009fd6:	4682      	mov	sl, r0
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	dc02      	bgt.n	8009fe2 <_printf_float+0x12a>
 8009fdc:	6822      	ldr	r2, [r4, #0]
 8009fde:	07d2      	lsls	r2, r2, #31
 8009fe0:	d501      	bpl.n	8009fe6 <_printf_float+0x12e>
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0a6      	beq.n	8009f3c <_printf_float+0x84>
 8009fee:	232d      	movs	r3, #45	@ 0x2d
 8009ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ff4:	e7a2      	b.n	8009f3c <_printf_float+0x84>
 8009ff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ffa:	d1c4      	bne.n	8009f86 <_printf_float+0xce>
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1c2      	bne.n	8009f86 <_printf_float+0xce>
 800a000:	2301      	movs	r3, #1
 800a002:	e7bf      	b.n	8009f84 <_printf_float+0xcc>
 800a004:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a008:	d9db      	bls.n	8009fc2 <_printf_float+0x10a>
 800a00a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a00e:	d118      	bne.n	800a042 <_printf_float+0x18a>
 800a010:	2900      	cmp	r1, #0
 800a012:	6863      	ldr	r3, [r4, #4]
 800a014:	dd0b      	ble.n	800a02e <_printf_float+0x176>
 800a016:	6121      	str	r1, [r4, #16]
 800a018:	b913      	cbnz	r3, 800a020 <_printf_float+0x168>
 800a01a:	6822      	ldr	r2, [r4, #0]
 800a01c:	07d0      	lsls	r0, r2, #31
 800a01e:	d502      	bpl.n	800a026 <_printf_float+0x16e>
 800a020:	3301      	adds	r3, #1
 800a022:	440b      	add	r3, r1
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a028:	f04f 0a00 	mov.w	sl, #0
 800a02c:	e7db      	b.n	8009fe6 <_printf_float+0x12e>
 800a02e:	b913      	cbnz	r3, 800a036 <_printf_float+0x17e>
 800a030:	6822      	ldr	r2, [r4, #0]
 800a032:	07d2      	lsls	r2, r2, #31
 800a034:	d501      	bpl.n	800a03a <_printf_float+0x182>
 800a036:	3302      	adds	r3, #2
 800a038:	e7f4      	b.n	800a024 <_printf_float+0x16c>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e7f2      	b.n	800a024 <_printf_float+0x16c>
 800a03e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a044:	4299      	cmp	r1, r3
 800a046:	db05      	blt.n	800a054 <_printf_float+0x19c>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	6121      	str	r1, [r4, #16]
 800a04c:	07d8      	lsls	r0, r3, #31
 800a04e:	d5ea      	bpl.n	800a026 <_printf_float+0x16e>
 800a050:	1c4b      	adds	r3, r1, #1
 800a052:	e7e7      	b.n	800a024 <_printf_float+0x16c>
 800a054:	2900      	cmp	r1, #0
 800a056:	bfd4      	ite	le
 800a058:	f1c1 0202 	rsble	r2, r1, #2
 800a05c:	2201      	movgt	r2, #1
 800a05e:	4413      	add	r3, r2
 800a060:	e7e0      	b.n	800a024 <_printf_float+0x16c>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	055a      	lsls	r2, r3, #21
 800a066:	d407      	bmi.n	800a078 <_printf_float+0x1c0>
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	4642      	mov	r2, r8
 800a06c:	4631      	mov	r1, r6
 800a06e:	4628      	mov	r0, r5
 800a070:	47b8      	blx	r7
 800a072:	3001      	adds	r0, #1
 800a074:	d12a      	bne.n	800a0cc <_printf_float+0x214>
 800a076:	e76b      	b.n	8009f50 <_printf_float+0x98>
 800a078:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a07c:	f240 80e0 	bls.w	800a240 <_printf_float+0x388>
 800a080:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a084:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08c:	d133      	bne.n	800a0f6 <_printf_float+0x23e>
 800a08e:	4a38      	ldr	r2, [pc, #224]	@ (800a170 <_printf_float+0x2b8>)
 800a090:	2301      	movs	r3, #1
 800a092:	4631      	mov	r1, r6
 800a094:	4628      	mov	r0, r5
 800a096:	47b8      	blx	r7
 800a098:	3001      	adds	r0, #1
 800a09a:	f43f af59 	beq.w	8009f50 <_printf_float+0x98>
 800a09e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a0a2:	4543      	cmp	r3, r8
 800a0a4:	db02      	blt.n	800a0ac <_printf_float+0x1f4>
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	07d8      	lsls	r0, r3, #31
 800a0aa:	d50f      	bpl.n	800a0cc <_printf_float+0x214>
 800a0ac:	9b05      	ldr	r3, [sp, #20]
 800a0ae:	465a      	mov	r2, fp
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b8      	blx	r7
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	f43f af4a 	beq.w	8009f50 <_printf_float+0x98>
 800a0bc:	f04f 0900 	mov.w	r9, #0
 800a0c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0c4:	f104 0a1a 	add.w	sl, r4, #26
 800a0c8:	45c8      	cmp	r8, r9
 800a0ca:	dc09      	bgt.n	800a0e0 <_printf_float+0x228>
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	079b      	lsls	r3, r3, #30
 800a0d0:	f100 8107 	bmi.w	800a2e2 <_printf_float+0x42a>
 800a0d4:	68e0      	ldr	r0, [r4, #12]
 800a0d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0d8:	4298      	cmp	r0, r3
 800a0da:	bfb8      	it	lt
 800a0dc:	4618      	movlt	r0, r3
 800a0de:	e739      	b.n	8009f54 <_printf_float+0x9c>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	4652      	mov	r2, sl
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f af30 	beq.w	8009f50 <_printf_float+0x98>
 800a0f0:	f109 0901 	add.w	r9, r9, #1
 800a0f4:	e7e8      	b.n	800a0c8 <_printf_float+0x210>
 800a0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dc3b      	bgt.n	800a174 <_printf_float+0x2bc>
 800a0fc:	4a1c      	ldr	r2, [pc, #112]	@ (800a170 <_printf_float+0x2b8>)
 800a0fe:	2301      	movs	r3, #1
 800a100:	4631      	mov	r1, r6
 800a102:	4628      	mov	r0, r5
 800a104:	47b8      	blx	r7
 800a106:	3001      	adds	r0, #1
 800a108:	f43f af22 	beq.w	8009f50 <_printf_float+0x98>
 800a10c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a110:	ea59 0303 	orrs.w	r3, r9, r3
 800a114:	d102      	bne.n	800a11c <_printf_float+0x264>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	07d9      	lsls	r1, r3, #31
 800a11a:	d5d7      	bpl.n	800a0cc <_printf_float+0x214>
 800a11c:	9b05      	ldr	r3, [sp, #20]
 800a11e:	465a      	mov	r2, fp
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	47b8      	blx	r7
 800a126:	3001      	adds	r0, #1
 800a128:	f43f af12 	beq.w	8009f50 <_printf_float+0x98>
 800a12c:	f04f 0a00 	mov.w	sl, #0
 800a130:	f104 0b1a 	add.w	fp, r4, #26
 800a134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a136:	425b      	negs	r3, r3
 800a138:	4553      	cmp	r3, sl
 800a13a:	dc01      	bgt.n	800a140 <_printf_float+0x288>
 800a13c:	464b      	mov	r3, r9
 800a13e:	e794      	b.n	800a06a <_printf_float+0x1b2>
 800a140:	2301      	movs	r3, #1
 800a142:	465a      	mov	r2, fp
 800a144:	4631      	mov	r1, r6
 800a146:	4628      	mov	r0, r5
 800a148:	47b8      	blx	r7
 800a14a:	3001      	adds	r0, #1
 800a14c:	f43f af00 	beq.w	8009f50 <_printf_float+0x98>
 800a150:	f10a 0a01 	add.w	sl, sl, #1
 800a154:	e7ee      	b.n	800a134 <_printf_float+0x27c>
 800a156:	bf00      	nop
 800a158:	ffffffff 	.word	0xffffffff
 800a15c:	7fefffff 	.word	0x7fefffff
 800a160:	0800ea9c 	.word	0x0800ea9c
 800a164:	0800eaa0 	.word	0x0800eaa0
 800a168:	0800eaa4 	.word	0x0800eaa4
 800a16c:	0800eaa8 	.word	0x0800eaa8
 800a170:	0800eaac 	.word	0x0800eaac
 800a174:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a176:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a17a:	4553      	cmp	r3, sl
 800a17c:	bfa8      	it	ge
 800a17e:	4653      	movge	r3, sl
 800a180:	2b00      	cmp	r3, #0
 800a182:	4699      	mov	r9, r3
 800a184:	dc37      	bgt.n	800a1f6 <_printf_float+0x33e>
 800a186:	2300      	movs	r3, #0
 800a188:	9307      	str	r3, [sp, #28]
 800a18a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a18e:	f104 021a 	add.w	r2, r4, #26
 800a192:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a194:	9907      	ldr	r1, [sp, #28]
 800a196:	9306      	str	r3, [sp, #24]
 800a198:	eba3 0309 	sub.w	r3, r3, r9
 800a19c:	428b      	cmp	r3, r1
 800a19e:	dc31      	bgt.n	800a204 <_printf_float+0x34c>
 800a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a2:	459a      	cmp	sl, r3
 800a1a4:	dc3b      	bgt.n	800a21e <_printf_float+0x366>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	07da      	lsls	r2, r3, #31
 800a1aa:	d438      	bmi.n	800a21e <_printf_float+0x366>
 800a1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ae:	ebaa 0903 	sub.w	r9, sl, r3
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a1b8:	4599      	cmp	r9, r3
 800a1ba:	bfa8      	it	ge
 800a1bc:	4699      	movge	r9, r3
 800a1be:	f1b9 0f00 	cmp.w	r9, #0
 800a1c2:	dc34      	bgt.n	800a22e <_printf_float+0x376>
 800a1c4:	f04f 0800 	mov.w	r8, #0
 800a1c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1cc:	f104 0b1a 	add.w	fp, r4, #26
 800a1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d2:	ebaa 0303 	sub.w	r3, sl, r3
 800a1d6:	eba3 0309 	sub.w	r3, r3, r9
 800a1da:	4543      	cmp	r3, r8
 800a1dc:	f77f af76 	ble.w	800a0cc <_printf_float+0x214>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	465a      	mov	r2, fp
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f43f aeb0 	beq.w	8009f50 <_printf_float+0x98>
 800a1f0:	f108 0801 	add.w	r8, r8, #1
 800a1f4:	e7ec      	b.n	800a1d0 <_printf_float+0x318>
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	4631      	mov	r1, r6
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b8      	blx	r7
 800a1fe:	3001      	adds	r0, #1
 800a200:	d1c1      	bne.n	800a186 <_printf_float+0x2ce>
 800a202:	e6a5      	b.n	8009f50 <_printf_float+0x98>
 800a204:	2301      	movs	r3, #1
 800a206:	4631      	mov	r1, r6
 800a208:	4628      	mov	r0, r5
 800a20a:	9206      	str	r2, [sp, #24]
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	f43f ae9e 	beq.w	8009f50 <_printf_float+0x98>
 800a214:	9b07      	ldr	r3, [sp, #28]
 800a216:	9a06      	ldr	r2, [sp, #24]
 800a218:	3301      	adds	r3, #1
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	e7b9      	b.n	800a192 <_printf_float+0x2da>
 800a21e:	9b05      	ldr	r3, [sp, #20]
 800a220:	465a      	mov	r2, fp
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	d1bf      	bne.n	800a1ac <_printf_float+0x2f4>
 800a22c:	e690      	b.n	8009f50 <_printf_float+0x98>
 800a22e:	9a06      	ldr	r2, [sp, #24]
 800a230:	464b      	mov	r3, r9
 800a232:	4442      	add	r2, r8
 800a234:	4631      	mov	r1, r6
 800a236:	4628      	mov	r0, r5
 800a238:	47b8      	blx	r7
 800a23a:	3001      	adds	r0, #1
 800a23c:	d1c2      	bne.n	800a1c4 <_printf_float+0x30c>
 800a23e:	e687      	b.n	8009f50 <_printf_float+0x98>
 800a240:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a244:	f1b9 0f01 	cmp.w	r9, #1
 800a248:	dc01      	bgt.n	800a24e <_printf_float+0x396>
 800a24a:	07db      	lsls	r3, r3, #31
 800a24c:	d536      	bpl.n	800a2bc <_printf_float+0x404>
 800a24e:	2301      	movs	r3, #1
 800a250:	4642      	mov	r2, r8
 800a252:	4631      	mov	r1, r6
 800a254:	4628      	mov	r0, r5
 800a256:	47b8      	blx	r7
 800a258:	3001      	adds	r0, #1
 800a25a:	f43f ae79 	beq.w	8009f50 <_printf_float+0x98>
 800a25e:	9b05      	ldr	r3, [sp, #20]
 800a260:	465a      	mov	r2, fp
 800a262:	4631      	mov	r1, r6
 800a264:	4628      	mov	r0, r5
 800a266:	47b8      	blx	r7
 800a268:	3001      	adds	r0, #1
 800a26a:	f43f ae71 	beq.w	8009f50 <_printf_float+0x98>
 800a26e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a272:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a27a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a27e:	d018      	beq.n	800a2b2 <_printf_float+0x3fa>
 800a280:	464b      	mov	r3, r9
 800a282:	f108 0201 	add.w	r2, r8, #1
 800a286:	4631      	mov	r1, r6
 800a288:	4628      	mov	r0, r5
 800a28a:	47b8      	blx	r7
 800a28c:	3001      	adds	r0, #1
 800a28e:	d10c      	bne.n	800a2aa <_printf_float+0x3f2>
 800a290:	e65e      	b.n	8009f50 <_printf_float+0x98>
 800a292:	2301      	movs	r3, #1
 800a294:	465a      	mov	r2, fp
 800a296:	4631      	mov	r1, r6
 800a298:	4628      	mov	r0, r5
 800a29a:	47b8      	blx	r7
 800a29c:	3001      	adds	r0, #1
 800a29e:	f43f ae57 	beq.w	8009f50 <_printf_float+0x98>
 800a2a2:	f108 0801 	add.w	r8, r8, #1
 800a2a6:	45c8      	cmp	r8, r9
 800a2a8:	dbf3      	blt.n	800a292 <_printf_float+0x3da>
 800a2aa:	4653      	mov	r3, sl
 800a2ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a2b0:	e6dc      	b.n	800a06c <_printf_float+0x1b4>
 800a2b2:	f04f 0800 	mov.w	r8, #0
 800a2b6:	f104 0b1a 	add.w	fp, r4, #26
 800a2ba:	e7f4      	b.n	800a2a6 <_printf_float+0x3ee>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	4642      	mov	r2, r8
 800a2c0:	e7e1      	b.n	800a286 <_printf_float+0x3ce>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	464a      	mov	r2, r9
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	47b8      	blx	r7
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	f43f ae3f 	beq.w	8009f50 <_printf_float+0x98>
 800a2d2:	f108 0801 	add.w	r8, r8, #1
 800a2d6:	68e3      	ldr	r3, [r4, #12]
 800a2d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2da:	1a5b      	subs	r3, r3, r1
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	dcf0      	bgt.n	800a2c2 <_printf_float+0x40a>
 800a2e0:	e6f8      	b.n	800a0d4 <_printf_float+0x21c>
 800a2e2:	f04f 0800 	mov.w	r8, #0
 800a2e6:	f104 0919 	add.w	r9, r4, #25
 800a2ea:	e7f4      	b.n	800a2d6 <_printf_float+0x41e>

0800a2ec <_printf_common>:
 800a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	4616      	mov	r6, r2
 800a2f2:	4698      	mov	r8, r3
 800a2f4:	688a      	ldr	r2, [r1, #8]
 800a2f6:	690b      	ldr	r3, [r1, #16]
 800a2f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	bfb8      	it	lt
 800a300:	4613      	movlt	r3, r2
 800a302:	6033      	str	r3, [r6, #0]
 800a304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a308:	4607      	mov	r7, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	b10a      	cbz	r2, 800a312 <_printf_common+0x26>
 800a30e:	3301      	adds	r3, #1
 800a310:	6033      	str	r3, [r6, #0]
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	0699      	lsls	r1, r3, #26
 800a316:	bf42      	ittt	mi
 800a318:	6833      	ldrmi	r3, [r6, #0]
 800a31a:	3302      	addmi	r3, #2
 800a31c:	6033      	strmi	r3, [r6, #0]
 800a31e:	6825      	ldr	r5, [r4, #0]
 800a320:	f015 0506 	ands.w	r5, r5, #6
 800a324:	d106      	bne.n	800a334 <_printf_common+0x48>
 800a326:	f104 0a19 	add.w	sl, r4, #25
 800a32a:	68e3      	ldr	r3, [r4, #12]
 800a32c:	6832      	ldr	r2, [r6, #0]
 800a32e:	1a9b      	subs	r3, r3, r2
 800a330:	42ab      	cmp	r3, r5
 800a332:	dc26      	bgt.n	800a382 <_printf_common+0x96>
 800a334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	3b00      	subs	r3, #0
 800a33c:	bf18      	it	ne
 800a33e:	2301      	movne	r3, #1
 800a340:	0692      	lsls	r2, r2, #26
 800a342:	d42b      	bmi.n	800a39c <_printf_common+0xb0>
 800a344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a348:	4641      	mov	r1, r8
 800a34a:	4638      	mov	r0, r7
 800a34c:	47c8      	blx	r9
 800a34e:	3001      	adds	r0, #1
 800a350:	d01e      	beq.n	800a390 <_printf_common+0xa4>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	6922      	ldr	r2, [r4, #16]
 800a356:	f003 0306 	and.w	r3, r3, #6
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	bf02      	ittt	eq
 800a35e:	68e5      	ldreq	r5, [r4, #12]
 800a360:	6833      	ldreq	r3, [r6, #0]
 800a362:	1aed      	subeq	r5, r5, r3
 800a364:	68a3      	ldr	r3, [r4, #8]
 800a366:	bf0c      	ite	eq
 800a368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a36c:	2500      	movne	r5, #0
 800a36e:	4293      	cmp	r3, r2
 800a370:	bfc4      	itt	gt
 800a372:	1a9b      	subgt	r3, r3, r2
 800a374:	18ed      	addgt	r5, r5, r3
 800a376:	2600      	movs	r6, #0
 800a378:	341a      	adds	r4, #26
 800a37a:	42b5      	cmp	r5, r6
 800a37c:	d11a      	bne.n	800a3b4 <_printf_common+0xc8>
 800a37e:	2000      	movs	r0, #0
 800a380:	e008      	b.n	800a394 <_printf_common+0xa8>
 800a382:	2301      	movs	r3, #1
 800a384:	4652      	mov	r2, sl
 800a386:	4641      	mov	r1, r8
 800a388:	4638      	mov	r0, r7
 800a38a:	47c8      	blx	r9
 800a38c:	3001      	adds	r0, #1
 800a38e:	d103      	bne.n	800a398 <_printf_common+0xac>
 800a390:	f04f 30ff 	mov.w	r0, #4294967295
 800a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a398:	3501      	adds	r5, #1
 800a39a:	e7c6      	b.n	800a32a <_printf_common+0x3e>
 800a39c:	18e1      	adds	r1, r4, r3
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	2030      	movs	r0, #48	@ 0x30
 800a3a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3a6:	4422      	add	r2, r4
 800a3a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a3ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	e7c7      	b.n	800a344 <_printf_common+0x58>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	4641      	mov	r1, r8
 800a3ba:	4638      	mov	r0, r7
 800a3bc:	47c8      	blx	r9
 800a3be:	3001      	adds	r0, #1
 800a3c0:	d0e6      	beq.n	800a390 <_printf_common+0xa4>
 800a3c2:	3601      	adds	r6, #1
 800a3c4:	e7d9      	b.n	800a37a <_printf_common+0x8e>
	...

0800a3c8 <_printf_i>:
 800a3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3cc:	7e0f      	ldrb	r7, [r1, #24]
 800a3ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3d0:	2f78      	cmp	r7, #120	@ 0x78
 800a3d2:	4691      	mov	r9, r2
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	469a      	mov	sl, r3
 800a3da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3de:	d807      	bhi.n	800a3f0 <_printf_i+0x28>
 800a3e0:	2f62      	cmp	r7, #98	@ 0x62
 800a3e2:	d80a      	bhi.n	800a3fa <_printf_i+0x32>
 800a3e4:	2f00      	cmp	r7, #0
 800a3e6:	f000 80d2 	beq.w	800a58e <_printf_i+0x1c6>
 800a3ea:	2f58      	cmp	r7, #88	@ 0x58
 800a3ec:	f000 80b9 	beq.w	800a562 <_printf_i+0x19a>
 800a3f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3f8:	e03a      	b.n	800a470 <_printf_i+0xa8>
 800a3fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3fe:	2b15      	cmp	r3, #21
 800a400:	d8f6      	bhi.n	800a3f0 <_printf_i+0x28>
 800a402:	a101      	add	r1, pc, #4	@ (adr r1, 800a408 <_printf_i+0x40>)
 800a404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a408:	0800a461 	.word	0x0800a461
 800a40c:	0800a475 	.word	0x0800a475
 800a410:	0800a3f1 	.word	0x0800a3f1
 800a414:	0800a3f1 	.word	0x0800a3f1
 800a418:	0800a3f1 	.word	0x0800a3f1
 800a41c:	0800a3f1 	.word	0x0800a3f1
 800a420:	0800a475 	.word	0x0800a475
 800a424:	0800a3f1 	.word	0x0800a3f1
 800a428:	0800a3f1 	.word	0x0800a3f1
 800a42c:	0800a3f1 	.word	0x0800a3f1
 800a430:	0800a3f1 	.word	0x0800a3f1
 800a434:	0800a575 	.word	0x0800a575
 800a438:	0800a49f 	.word	0x0800a49f
 800a43c:	0800a52f 	.word	0x0800a52f
 800a440:	0800a3f1 	.word	0x0800a3f1
 800a444:	0800a3f1 	.word	0x0800a3f1
 800a448:	0800a597 	.word	0x0800a597
 800a44c:	0800a3f1 	.word	0x0800a3f1
 800a450:	0800a49f 	.word	0x0800a49f
 800a454:	0800a3f1 	.word	0x0800a3f1
 800a458:	0800a3f1 	.word	0x0800a3f1
 800a45c:	0800a537 	.word	0x0800a537
 800a460:	6833      	ldr	r3, [r6, #0]
 800a462:	1d1a      	adds	r2, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6032      	str	r2, [r6, #0]
 800a468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a46c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a470:	2301      	movs	r3, #1
 800a472:	e09d      	b.n	800a5b0 <_printf_i+0x1e8>
 800a474:	6833      	ldr	r3, [r6, #0]
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	1d19      	adds	r1, r3, #4
 800a47a:	6031      	str	r1, [r6, #0]
 800a47c:	0606      	lsls	r6, r0, #24
 800a47e:	d501      	bpl.n	800a484 <_printf_i+0xbc>
 800a480:	681d      	ldr	r5, [r3, #0]
 800a482:	e003      	b.n	800a48c <_printf_i+0xc4>
 800a484:	0645      	lsls	r5, r0, #25
 800a486:	d5fb      	bpl.n	800a480 <_printf_i+0xb8>
 800a488:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a48c:	2d00      	cmp	r5, #0
 800a48e:	da03      	bge.n	800a498 <_printf_i+0xd0>
 800a490:	232d      	movs	r3, #45	@ 0x2d
 800a492:	426d      	negs	r5, r5
 800a494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a498:	4859      	ldr	r0, [pc, #356]	@ (800a600 <_printf_i+0x238>)
 800a49a:	230a      	movs	r3, #10
 800a49c:	e011      	b.n	800a4c2 <_printf_i+0xfa>
 800a49e:	6821      	ldr	r1, [r4, #0]
 800a4a0:	6833      	ldr	r3, [r6, #0]
 800a4a2:	0608      	lsls	r0, r1, #24
 800a4a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4a8:	d402      	bmi.n	800a4b0 <_printf_i+0xe8>
 800a4aa:	0649      	lsls	r1, r1, #25
 800a4ac:	bf48      	it	mi
 800a4ae:	b2ad      	uxthmi	r5, r5
 800a4b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a4b2:	4853      	ldr	r0, [pc, #332]	@ (800a600 <_printf_i+0x238>)
 800a4b4:	6033      	str	r3, [r6, #0]
 800a4b6:	bf14      	ite	ne
 800a4b8:	230a      	movne	r3, #10
 800a4ba:	2308      	moveq	r3, #8
 800a4bc:	2100      	movs	r1, #0
 800a4be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a4c2:	6866      	ldr	r6, [r4, #4]
 800a4c4:	60a6      	str	r6, [r4, #8]
 800a4c6:	2e00      	cmp	r6, #0
 800a4c8:	bfa2      	ittt	ge
 800a4ca:	6821      	ldrge	r1, [r4, #0]
 800a4cc:	f021 0104 	bicge.w	r1, r1, #4
 800a4d0:	6021      	strge	r1, [r4, #0]
 800a4d2:	b90d      	cbnz	r5, 800a4d8 <_printf_i+0x110>
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	d04b      	beq.n	800a570 <_printf_i+0x1a8>
 800a4d8:	4616      	mov	r6, r2
 800a4da:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4de:	fb03 5711 	mls	r7, r3, r1, r5
 800a4e2:	5dc7      	ldrb	r7, [r0, r7]
 800a4e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4e8:	462f      	mov	r7, r5
 800a4ea:	42bb      	cmp	r3, r7
 800a4ec:	460d      	mov	r5, r1
 800a4ee:	d9f4      	bls.n	800a4da <_printf_i+0x112>
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d10b      	bne.n	800a50c <_printf_i+0x144>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	07df      	lsls	r7, r3, #31
 800a4f8:	d508      	bpl.n	800a50c <_printf_i+0x144>
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	6861      	ldr	r1, [r4, #4]
 800a4fe:	4299      	cmp	r1, r3
 800a500:	bfde      	ittt	le
 800a502:	2330      	movle	r3, #48	@ 0x30
 800a504:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a508:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a50c:	1b92      	subs	r2, r2, r6
 800a50e:	6122      	str	r2, [r4, #16]
 800a510:	f8cd a000 	str.w	sl, [sp]
 800a514:	464b      	mov	r3, r9
 800a516:	aa03      	add	r2, sp, #12
 800a518:	4621      	mov	r1, r4
 800a51a:	4640      	mov	r0, r8
 800a51c:	f7ff fee6 	bl	800a2ec <_printf_common>
 800a520:	3001      	adds	r0, #1
 800a522:	d14a      	bne.n	800a5ba <_printf_i+0x1f2>
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	b004      	add	sp, #16
 800a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	f043 0320 	orr.w	r3, r3, #32
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	4833      	ldr	r0, [pc, #204]	@ (800a604 <_printf_i+0x23c>)
 800a538:	2778      	movs	r7, #120	@ 0x78
 800a53a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	6831      	ldr	r1, [r6, #0]
 800a542:	061f      	lsls	r7, r3, #24
 800a544:	f851 5b04 	ldr.w	r5, [r1], #4
 800a548:	d402      	bmi.n	800a550 <_printf_i+0x188>
 800a54a:	065f      	lsls	r7, r3, #25
 800a54c:	bf48      	it	mi
 800a54e:	b2ad      	uxthmi	r5, r5
 800a550:	6031      	str	r1, [r6, #0]
 800a552:	07d9      	lsls	r1, r3, #31
 800a554:	bf44      	itt	mi
 800a556:	f043 0320 	orrmi.w	r3, r3, #32
 800a55a:	6023      	strmi	r3, [r4, #0]
 800a55c:	b11d      	cbz	r5, 800a566 <_printf_i+0x19e>
 800a55e:	2310      	movs	r3, #16
 800a560:	e7ac      	b.n	800a4bc <_printf_i+0xf4>
 800a562:	4827      	ldr	r0, [pc, #156]	@ (800a600 <_printf_i+0x238>)
 800a564:	e7e9      	b.n	800a53a <_printf_i+0x172>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	f023 0320 	bic.w	r3, r3, #32
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	e7f6      	b.n	800a55e <_printf_i+0x196>
 800a570:	4616      	mov	r6, r2
 800a572:	e7bd      	b.n	800a4f0 <_printf_i+0x128>
 800a574:	6833      	ldr	r3, [r6, #0]
 800a576:	6825      	ldr	r5, [r4, #0]
 800a578:	6961      	ldr	r1, [r4, #20]
 800a57a:	1d18      	adds	r0, r3, #4
 800a57c:	6030      	str	r0, [r6, #0]
 800a57e:	062e      	lsls	r6, r5, #24
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	d501      	bpl.n	800a588 <_printf_i+0x1c0>
 800a584:	6019      	str	r1, [r3, #0]
 800a586:	e002      	b.n	800a58e <_printf_i+0x1c6>
 800a588:	0668      	lsls	r0, r5, #25
 800a58a:	d5fb      	bpl.n	800a584 <_printf_i+0x1bc>
 800a58c:	8019      	strh	r1, [r3, #0]
 800a58e:	2300      	movs	r3, #0
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	4616      	mov	r6, r2
 800a594:	e7bc      	b.n	800a510 <_printf_i+0x148>
 800a596:	6833      	ldr	r3, [r6, #0]
 800a598:	1d1a      	adds	r2, r3, #4
 800a59a:	6032      	str	r2, [r6, #0]
 800a59c:	681e      	ldr	r6, [r3, #0]
 800a59e:	6862      	ldr	r2, [r4, #4]
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7f5 fe9c 	bl	80002e0 <memchr>
 800a5a8:	b108      	cbz	r0, 800a5ae <_printf_i+0x1e6>
 800a5aa:	1b80      	subs	r0, r0, r6
 800a5ac:	6060      	str	r0, [r4, #4]
 800a5ae:	6863      	ldr	r3, [r4, #4]
 800a5b0:	6123      	str	r3, [r4, #16]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5b8:	e7aa      	b.n	800a510 <_printf_i+0x148>
 800a5ba:	6923      	ldr	r3, [r4, #16]
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	47d0      	blx	sl
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d0ad      	beq.n	800a524 <_printf_i+0x15c>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	079b      	lsls	r3, r3, #30
 800a5cc:	d413      	bmi.n	800a5f6 <_printf_i+0x22e>
 800a5ce:	68e0      	ldr	r0, [r4, #12]
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	4298      	cmp	r0, r3
 800a5d4:	bfb8      	it	lt
 800a5d6:	4618      	movlt	r0, r3
 800a5d8:	e7a6      	b.n	800a528 <_printf_i+0x160>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	4632      	mov	r2, r6
 800a5de:	4649      	mov	r1, r9
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	47d0      	blx	sl
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d09d      	beq.n	800a524 <_printf_i+0x15c>
 800a5e8:	3501      	adds	r5, #1
 800a5ea:	68e3      	ldr	r3, [r4, #12]
 800a5ec:	9903      	ldr	r1, [sp, #12]
 800a5ee:	1a5b      	subs	r3, r3, r1
 800a5f0:	42ab      	cmp	r3, r5
 800a5f2:	dcf2      	bgt.n	800a5da <_printf_i+0x212>
 800a5f4:	e7eb      	b.n	800a5ce <_printf_i+0x206>
 800a5f6:	2500      	movs	r5, #0
 800a5f8:	f104 0619 	add.w	r6, r4, #25
 800a5fc:	e7f5      	b.n	800a5ea <_printf_i+0x222>
 800a5fe:	bf00      	nop
 800a600:	0800eaae 	.word	0x0800eaae
 800a604:	0800eabf 	.word	0x0800eabf

0800a608 <std>:
 800a608:	2300      	movs	r3, #0
 800a60a:	b510      	push	{r4, lr}
 800a60c:	4604      	mov	r4, r0
 800a60e:	e9c0 3300 	strd	r3, r3, [r0]
 800a612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a616:	6083      	str	r3, [r0, #8]
 800a618:	8181      	strh	r1, [r0, #12]
 800a61a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a61c:	81c2      	strh	r2, [r0, #14]
 800a61e:	6183      	str	r3, [r0, #24]
 800a620:	4619      	mov	r1, r3
 800a622:	2208      	movs	r2, #8
 800a624:	305c      	adds	r0, #92	@ 0x5c
 800a626:	f000 f928 	bl	800a87a <memset>
 800a62a:	4b0d      	ldr	r3, [pc, #52]	@ (800a660 <std+0x58>)
 800a62c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a62e:	4b0d      	ldr	r3, [pc, #52]	@ (800a664 <std+0x5c>)
 800a630:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a632:	4b0d      	ldr	r3, [pc, #52]	@ (800a668 <std+0x60>)
 800a634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a636:	4b0d      	ldr	r3, [pc, #52]	@ (800a66c <std+0x64>)
 800a638:	6323      	str	r3, [r4, #48]	@ 0x30
 800a63a:	4b0d      	ldr	r3, [pc, #52]	@ (800a670 <std+0x68>)
 800a63c:	6224      	str	r4, [r4, #32]
 800a63e:	429c      	cmp	r4, r3
 800a640:	d006      	beq.n	800a650 <std+0x48>
 800a642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a646:	4294      	cmp	r4, r2
 800a648:	d002      	beq.n	800a650 <std+0x48>
 800a64a:	33d0      	adds	r3, #208	@ 0xd0
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d105      	bne.n	800a65c <std+0x54>
 800a650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a658:	f000 b98c 	b.w	800a974 <__retarget_lock_init_recursive>
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	bf00      	nop
 800a660:	0800a7f5 	.word	0x0800a7f5
 800a664:	0800a817 	.word	0x0800a817
 800a668:	0800a84f 	.word	0x0800a84f
 800a66c:	0800a873 	.word	0x0800a873
 800a670:	24001198 	.word	0x24001198

0800a674 <stdio_exit_handler>:
 800a674:	4a02      	ldr	r2, [pc, #8]	@ (800a680 <stdio_exit_handler+0xc>)
 800a676:	4903      	ldr	r1, [pc, #12]	@ (800a684 <stdio_exit_handler+0x10>)
 800a678:	4803      	ldr	r0, [pc, #12]	@ (800a688 <stdio_exit_handler+0x14>)
 800a67a:	f000 b869 	b.w	800a750 <_fwalk_sglue>
 800a67e:	bf00      	nop
 800a680:	24000064 	.word	0x24000064
 800a684:	0800c1f9 	.word	0x0800c1f9
 800a688:	24000074 	.word	0x24000074

0800a68c <cleanup_stdio>:
 800a68c:	6841      	ldr	r1, [r0, #4]
 800a68e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c0 <cleanup_stdio+0x34>)
 800a690:	4299      	cmp	r1, r3
 800a692:	b510      	push	{r4, lr}
 800a694:	4604      	mov	r4, r0
 800a696:	d001      	beq.n	800a69c <cleanup_stdio+0x10>
 800a698:	f001 fdae 	bl	800c1f8 <_fflush_r>
 800a69c:	68a1      	ldr	r1, [r4, #8]
 800a69e:	4b09      	ldr	r3, [pc, #36]	@ (800a6c4 <cleanup_stdio+0x38>)
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	d002      	beq.n	800a6aa <cleanup_stdio+0x1e>
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f001 fda7 	bl	800c1f8 <_fflush_r>
 800a6aa:	68e1      	ldr	r1, [r4, #12]
 800a6ac:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <cleanup_stdio+0x3c>)
 800a6ae:	4299      	cmp	r1, r3
 800a6b0:	d004      	beq.n	800a6bc <cleanup_stdio+0x30>
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b8:	f001 bd9e 	b.w	800c1f8 <_fflush_r>
 800a6bc:	bd10      	pop	{r4, pc}
 800a6be:	bf00      	nop
 800a6c0:	24001198 	.word	0x24001198
 800a6c4:	24001200 	.word	0x24001200
 800a6c8:	24001268 	.word	0x24001268

0800a6cc <global_stdio_init.part.0>:
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a6fc <global_stdio_init.part.0+0x30>)
 800a6d0:	4c0b      	ldr	r4, [pc, #44]	@ (800a700 <global_stdio_init.part.0+0x34>)
 800a6d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a704 <global_stdio_init.part.0+0x38>)
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2104      	movs	r1, #4
 800a6dc:	f7ff ff94 	bl	800a608 <std>
 800a6e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	2109      	movs	r1, #9
 800a6e8:	f7ff ff8e 	bl	800a608 <std>
 800a6ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f6:	2112      	movs	r1, #18
 800a6f8:	f7ff bf86 	b.w	800a608 <std>
 800a6fc:	240012d0 	.word	0x240012d0
 800a700:	24001198 	.word	0x24001198
 800a704:	0800a675 	.word	0x0800a675

0800a708 <__sfp_lock_acquire>:
 800a708:	4801      	ldr	r0, [pc, #4]	@ (800a710 <__sfp_lock_acquire+0x8>)
 800a70a:	f000 b934 	b.w	800a976 <__retarget_lock_acquire_recursive>
 800a70e:	bf00      	nop
 800a710:	240012d9 	.word	0x240012d9

0800a714 <__sfp_lock_release>:
 800a714:	4801      	ldr	r0, [pc, #4]	@ (800a71c <__sfp_lock_release+0x8>)
 800a716:	f000 b92f 	b.w	800a978 <__retarget_lock_release_recursive>
 800a71a:	bf00      	nop
 800a71c:	240012d9 	.word	0x240012d9

0800a720 <__sinit>:
 800a720:	b510      	push	{r4, lr}
 800a722:	4604      	mov	r4, r0
 800a724:	f7ff fff0 	bl	800a708 <__sfp_lock_acquire>
 800a728:	6a23      	ldr	r3, [r4, #32]
 800a72a:	b11b      	cbz	r3, 800a734 <__sinit+0x14>
 800a72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a730:	f7ff bff0 	b.w	800a714 <__sfp_lock_release>
 800a734:	4b04      	ldr	r3, [pc, #16]	@ (800a748 <__sinit+0x28>)
 800a736:	6223      	str	r3, [r4, #32]
 800a738:	4b04      	ldr	r3, [pc, #16]	@ (800a74c <__sinit+0x2c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1f5      	bne.n	800a72c <__sinit+0xc>
 800a740:	f7ff ffc4 	bl	800a6cc <global_stdio_init.part.0>
 800a744:	e7f2      	b.n	800a72c <__sinit+0xc>
 800a746:	bf00      	nop
 800a748:	0800a68d 	.word	0x0800a68d
 800a74c:	240012d0 	.word	0x240012d0

0800a750 <_fwalk_sglue>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	4607      	mov	r7, r0
 800a756:	4688      	mov	r8, r1
 800a758:	4614      	mov	r4, r2
 800a75a:	2600      	movs	r6, #0
 800a75c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a760:	f1b9 0901 	subs.w	r9, r9, #1
 800a764:	d505      	bpl.n	800a772 <_fwalk_sglue+0x22>
 800a766:	6824      	ldr	r4, [r4, #0]
 800a768:	2c00      	cmp	r4, #0
 800a76a:	d1f7      	bne.n	800a75c <_fwalk_sglue+0xc>
 800a76c:	4630      	mov	r0, r6
 800a76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a772:	89ab      	ldrh	r3, [r5, #12]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d907      	bls.n	800a788 <_fwalk_sglue+0x38>
 800a778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a77c:	3301      	adds	r3, #1
 800a77e:	d003      	beq.n	800a788 <_fwalk_sglue+0x38>
 800a780:	4629      	mov	r1, r5
 800a782:	4638      	mov	r0, r7
 800a784:	47c0      	blx	r8
 800a786:	4306      	orrs	r6, r0
 800a788:	3568      	adds	r5, #104	@ 0x68
 800a78a:	e7e9      	b.n	800a760 <_fwalk_sglue+0x10>

0800a78c <sniprintf>:
 800a78c:	b40c      	push	{r2, r3}
 800a78e:	b530      	push	{r4, r5, lr}
 800a790:	4b17      	ldr	r3, [pc, #92]	@ (800a7f0 <sniprintf+0x64>)
 800a792:	1e0c      	subs	r4, r1, #0
 800a794:	681d      	ldr	r5, [r3, #0]
 800a796:	b09d      	sub	sp, #116	@ 0x74
 800a798:	da08      	bge.n	800a7ac <sniprintf+0x20>
 800a79a:	238b      	movs	r3, #139	@ 0x8b
 800a79c:	602b      	str	r3, [r5, #0]
 800a79e:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a2:	b01d      	add	sp, #116	@ 0x74
 800a7a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7a8:	b002      	add	sp, #8
 800a7aa:	4770      	bx	lr
 800a7ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a7b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7b4:	bf14      	ite	ne
 800a7b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a7ba:	4623      	moveq	r3, r4
 800a7bc:	9304      	str	r3, [sp, #16]
 800a7be:	9307      	str	r3, [sp, #28]
 800a7c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7c4:	9002      	str	r0, [sp, #8]
 800a7c6:	9006      	str	r0, [sp, #24]
 800a7c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a7ce:	ab21      	add	r3, sp, #132	@ 0x84
 800a7d0:	a902      	add	r1, sp, #8
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	f001 fb8f 	bl	800bef8 <_svfiprintf_r>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	bfbc      	itt	lt
 800a7de:	238b      	movlt	r3, #139	@ 0x8b
 800a7e0:	602b      	strlt	r3, [r5, #0]
 800a7e2:	2c00      	cmp	r4, #0
 800a7e4:	d0dd      	beq.n	800a7a2 <sniprintf+0x16>
 800a7e6:	9b02      	ldr	r3, [sp, #8]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	e7d9      	b.n	800a7a2 <sniprintf+0x16>
 800a7ee:	bf00      	nop
 800a7f0:	24000070 	.word	0x24000070

0800a7f4 <__sread>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fc:	f000 f86c 	bl	800a8d8 <_read_r>
 800a800:	2800      	cmp	r0, #0
 800a802:	bfab      	itete	ge
 800a804:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a806:	89a3      	ldrhlt	r3, [r4, #12]
 800a808:	181b      	addge	r3, r3, r0
 800a80a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a80e:	bfac      	ite	ge
 800a810:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a812:	81a3      	strhlt	r3, [r4, #12]
 800a814:	bd10      	pop	{r4, pc}

0800a816 <__swrite>:
 800a816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81a:	461f      	mov	r7, r3
 800a81c:	898b      	ldrh	r3, [r1, #12]
 800a81e:	05db      	lsls	r3, r3, #23
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	4616      	mov	r6, r2
 800a826:	d505      	bpl.n	800a834 <__swrite+0x1e>
 800a828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82c:	2302      	movs	r3, #2
 800a82e:	2200      	movs	r2, #0
 800a830:	f000 f840 	bl	800a8b4 <_lseek_r>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a83a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	4632      	mov	r2, r6
 800a842:	463b      	mov	r3, r7
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a84a:	f000 b857 	b.w	800a8fc <_write_r>

0800a84e <__sseek>:
 800a84e:	b510      	push	{r4, lr}
 800a850:	460c      	mov	r4, r1
 800a852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a856:	f000 f82d 	bl	800a8b4 <_lseek_r>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	bf15      	itete	ne
 800a860:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a862:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a866:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a86a:	81a3      	strheq	r3, [r4, #12]
 800a86c:	bf18      	it	ne
 800a86e:	81a3      	strhne	r3, [r4, #12]
 800a870:	bd10      	pop	{r4, pc}

0800a872 <__sclose>:
 800a872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a876:	f000 b80d 	b.w	800a894 <_close_r>

0800a87a <memset>:
 800a87a:	4402      	add	r2, r0
 800a87c:	4603      	mov	r3, r0
 800a87e:	4293      	cmp	r3, r2
 800a880:	d100      	bne.n	800a884 <memset+0xa>
 800a882:	4770      	bx	lr
 800a884:	f803 1b01 	strb.w	r1, [r3], #1
 800a888:	e7f9      	b.n	800a87e <memset+0x4>
	...

0800a88c <_localeconv_r>:
 800a88c:	4800      	ldr	r0, [pc, #0]	@ (800a890 <_localeconv_r+0x4>)
 800a88e:	4770      	bx	lr
 800a890:	240001b0 	.word	0x240001b0

0800a894 <_close_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d06      	ldr	r5, [pc, #24]	@ (800a8b0 <_close_r+0x1c>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	f7f9 f9d5 	bl	8003c4e <_close>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_close_r+0x1a>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_close_r+0x1a>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	240012d4 	.word	0x240012d4

0800a8b4 <_lseek_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d07      	ldr	r5, [pc, #28]	@ (800a8d4 <_lseek_r+0x20>)
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	4608      	mov	r0, r1
 800a8bc:	4611      	mov	r1, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	602a      	str	r2, [r5, #0]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f7f9 f9ea 	bl	8003c9c <_lseek>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	d102      	bne.n	800a8d2 <_lseek_r+0x1e>
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	b103      	cbz	r3, 800a8d2 <_lseek_r+0x1e>
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	240012d4 	.word	0x240012d4

0800a8d8 <_read_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4d07      	ldr	r5, [pc, #28]	@ (800a8f8 <_read_r+0x20>)
 800a8dc:	4604      	mov	r4, r0
 800a8de:	4608      	mov	r0, r1
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	602a      	str	r2, [r5, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f7f9 f978 	bl	8003bdc <_read>
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	d102      	bne.n	800a8f6 <_read_r+0x1e>
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	b103      	cbz	r3, 800a8f6 <_read_r+0x1e>
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	bd38      	pop	{r3, r4, r5, pc}
 800a8f8:	240012d4 	.word	0x240012d4

0800a8fc <_write_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d07      	ldr	r5, [pc, #28]	@ (800a91c <_write_r+0x20>)
 800a900:	4604      	mov	r4, r0
 800a902:	4608      	mov	r0, r1
 800a904:	4611      	mov	r1, r2
 800a906:	2200      	movs	r2, #0
 800a908:	602a      	str	r2, [r5, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	f7f9 f983 	bl	8003c16 <_write>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_write_r+0x1e>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	b103      	cbz	r3, 800a91a <_write_r+0x1e>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	240012d4 	.word	0x240012d4

0800a920 <__errno>:
 800a920:	4b01      	ldr	r3, [pc, #4]	@ (800a928 <__errno+0x8>)
 800a922:	6818      	ldr	r0, [r3, #0]
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	24000070 	.word	0x24000070

0800a92c <__libc_init_array>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	4d0d      	ldr	r5, [pc, #52]	@ (800a964 <__libc_init_array+0x38>)
 800a930:	4c0d      	ldr	r4, [pc, #52]	@ (800a968 <__libc_init_array+0x3c>)
 800a932:	1b64      	subs	r4, r4, r5
 800a934:	10a4      	asrs	r4, r4, #2
 800a936:	2600      	movs	r6, #0
 800a938:	42a6      	cmp	r6, r4
 800a93a:	d109      	bne.n	800a950 <__libc_init_array+0x24>
 800a93c:	4d0b      	ldr	r5, [pc, #44]	@ (800a96c <__libc_init_array+0x40>)
 800a93e:	4c0c      	ldr	r4, [pc, #48]	@ (800a970 <__libc_init_array+0x44>)
 800a940:	f001 fff8 	bl	800c934 <_init>
 800a944:	1b64      	subs	r4, r4, r5
 800a946:	10a4      	asrs	r4, r4, #2
 800a948:	2600      	movs	r6, #0
 800a94a:	42a6      	cmp	r6, r4
 800a94c:	d105      	bne.n	800a95a <__libc_init_array+0x2e>
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	f855 3b04 	ldr.w	r3, [r5], #4
 800a954:	4798      	blx	r3
 800a956:	3601      	adds	r6, #1
 800a958:	e7ee      	b.n	800a938 <__libc_init_array+0xc>
 800a95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a95e:	4798      	blx	r3
 800a960:	3601      	adds	r6, #1
 800a962:	e7f2      	b.n	800a94a <__libc_init_array+0x1e>
 800a964:	0800ee18 	.word	0x0800ee18
 800a968:	0800ee18 	.word	0x0800ee18
 800a96c:	0800ee18 	.word	0x0800ee18
 800a970:	0800ee1c 	.word	0x0800ee1c

0800a974 <__retarget_lock_init_recursive>:
 800a974:	4770      	bx	lr

0800a976 <__retarget_lock_acquire_recursive>:
 800a976:	4770      	bx	lr

0800a978 <__retarget_lock_release_recursive>:
 800a978:	4770      	bx	lr

0800a97a <quorem>:
 800a97a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97e:	6903      	ldr	r3, [r0, #16]
 800a980:	690c      	ldr	r4, [r1, #16]
 800a982:	42a3      	cmp	r3, r4
 800a984:	4607      	mov	r7, r0
 800a986:	db7e      	blt.n	800aa86 <quorem+0x10c>
 800a988:	3c01      	subs	r4, #1
 800a98a:	f101 0814 	add.w	r8, r1, #20
 800a98e:	00a3      	lsls	r3, r4, #2
 800a990:	f100 0514 	add.w	r5, r0, #20
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9b0:	d32e      	bcc.n	800aa10 <quorem+0x96>
 800a9b2:	f04f 0a00 	mov.w	sl, #0
 800a9b6:	46c4      	mov	ip, r8
 800a9b8:	46ae      	mov	lr, r5
 800a9ba:	46d3      	mov	fp, sl
 800a9bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9c0:	b298      	uxth	r0, r3
 800a9c2:	fb06 a000 	mla	r0, r6, r0, sl
 800a9c6:	0c02      	lsrs	r2, r0, #16
 800a9c8:	0c1b      	lsrs	r3, r3, #16
 800a9ca:	fb06 2303 	mla	r3, r6, r3, r2
 800a9ce:	f8de 2000 	ldr.w	r2, [lr]
 800a9d2:	b280      	uxth	r0, r0
 800a9d4:	b292      	uxth	r2, r2
 800a9d6:	1a12      	subs	r2, r2, r0
 800a9d8:	445a      	add	r2, fp
 800a9da:	f8de 0000 	ldr.w	r0, [lr]
 800a9de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a9e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a9ec:	b292      	uxth	r2, r2
 800a9ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9f2:	45e1      	cmp	r9, ip
 800a9f4:	f84e 2b04 	str.w	r2, [lr], #4
 800a9f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a9fc:	d2de      	bcs.n	800a9bc <quorem+0x42>
 800a9fe:	9b00      	ldr	r3, [sp, #0]
 800aa00:	58eb      	ldr	r3, [r5, r3]
 800aa02:	b92b      	cbnz	r3, 800aa10 <quorem+0x96>
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	3b04      	subs	r3, #4
 800aa08:	429d      	cmp	r5, r3
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	d32f      	bcc.n	800aa6e <quorem+0xf4>
 800aa0e:	613c      	str	r4, [r7, #16]
 800aa10:	4638      	mov	r0, r7
 800aa12:	f001 f90d 	bl	800bc30 <__mcmp>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	db25      	blt.n	800aa66 <quorem+0xec>
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa22:	f8d1 c000 	ldr.w	ip, [r1]
 800aa26:	fa1f fe82 	uxth.w	lr, r2
 800aa2a:	fa1f f38c 	uxth.w	r3, ip
 800aa2e:	eba3 030e 	sub.w	r3, r3, lr
 800aa32:	4403      	add	r3, r0
 800aa34:	0c12      	lsrs	r2, r2, #16
 800aa36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa44:	45c1      	cmp	r9, r8
 800aa46:	f841 3b04 	str.w	r3, [r1], #4
 800aa4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa4e:	d2e6      	bcs.n	800aa1e <quorem+0xa4>
 800aa50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa58:	b922      	cbnz	r2, 800aa64 <quorem+0xea>
 800aa5a:	3b04      	subs	r3, #4
 800aa5c:	429d      	cmp	r5, r3
 800aa5e:	461a      	mov	r2, r3
 800aa60:	d30b      	bcc.n	800aa7a <quorem+0x100>
 800aa62:	613c      	str	r4, [r7, #16]
 800aa64:	3601      	adds	r6, #1
 800aa66:	4630      	mov	r0, r6
 800aa68:	b003      	add	sp, #12
 800aa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6e:	6812      	ldr	r2, [r2, #0]
 800aa70:	3b04      	subs	r3, #4
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	d1cb      	bne.n	800aa0e <quorem+0x94>
 800aa76:	3c01      	subs	r4, #1
 800aa78:	e7c6      	b.n	800aa08 <quorem+0x8e>
 800aa7a:	6812      	ldr	r2, [r2, #0]
 800aa7c:	3b04      	subs	r3, #4
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	d1ef      	bne.n	800aa62 <quorem+0xe8>
 800aa82:	3c01      	subs	r4, #1
 800aa84:	e7ea      	b.n	800aa5c <quorem+0xe2>
 800aa86:	2000      	movs	r0, #0
 800aa88:	e7ee      	b.n	800aa68 <quorem+0xee>
 800aa8a:	0000      	movs	r0, r0
 800aa8c:	0000      	movs	r0, r0
	...

0800aa90 <_dtoa_r>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	ed2d 8b02 	vpush	{d8}
 800aa98:	69c7      	ldr	r7, [r0, #28]
 800aa9a:	b091      	sub	sp, #68	@ 0x44
 800aa9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aaa0:	ec55 4b10 	vmov	r4, r5, d0
 800aaa4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800aaa6:	9107      	str	r1, [sp, #28]
 800aaa8:	4681      	mov	r9, r0
 800aaaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800aaac:	930d      	str	r3, [sp, #52]	@ 0x34
 800aaae:	b97f      	cbnz	r7, 800aad0 <_dtoa_r+0x40>
 800aab0:	2010      	movs	r0, #16
 800aab2:	f000 fd8d 	bl	800b5d0 <malloc>
 800aab6:	4602      	mov	r2, r0
 800aab8:	f8c9 001c 	str.w	r0, [r9, #28]
 800aabc:	b920      	cbnz	r0, 800aac8 <_dtoa_r+0x38>
 800aabe:	4ba0      	ldr	r3, [pc, #640]	@ (800ad40 <_dtoa_r+0x2b0>)
 800aac0:	21ef      	movs	r1, #239	@ 0xef
 800aac2:	48a0      	ldr	r0, [pc, #640]	@ (800ad44 <_dtoa_r+0x2b4>)
 800aac4:	f001 fbf8 	bl	800c2b8 <__assert_func>
 800aac8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aacc:	6007      	str	r7, [r0, #0]
 800aace:	60c7      	str	r7, [r0, #12]
 800aad0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aad4:	6819      	ldr	r1, [r3, #0]
 800aad6:	b159      	cbz	r1, 800aaf0 <_dtoa_r+0x60>
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	604a      	str	r2, [r1, #4]
 800aadc:	2301      	movs	r3, #1
 800aade:	4093      	lsls	r3, r2
 800aae0:	608b      	str	r3, [r1, #8]
 800aae2:	4648      	mov	r0, r9
 800aae4:	f000 fe6a 	bl	800b7bc <_Bfree>
 800aae8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	1e2b      	subs	r3, r5, #0
 800aaf2:	bfbb      	ittet	lt
 800aaf4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aaf8:	9303      	strlt	r3, [sp, #12]
 800aafa:	2300      	movge	r3, #0
 800aafc:	2201      	movlt	r2, #1
 800aafe:	bfac      	ite	ge
 800ab00:	6033      	strge	r3, [r6, #0]
 800ab02:	6032      	strlt	r2, [r6, #0]
 800ab04:	4b90      	ldr	r3, [pc, #576]	@ (800ad48 <_dtoa_r+0x2b8>)
 800ab06:	9e03      	ldr	r6, [sp, #12]
 800ab08:	43b3      	bics	r3, r6
 800ab0a:	d110      	bne.n	800ab2e <_dtoa_r+0x9e>
 800ab0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ab18:	4323      	orrs	r3, r4
 800ab1a:	f000 84de 	beq.w	800b4da <_dtoa_r+0xa4a>
 800ab1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab20:	4f8a      	ldr	r7, [pc, #552]	@ (800ad4c <_dtoa_r+0x2bc>)
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f000 84e0 	beq.w	800b4e8 <_dtoa_r+0xa58>
 800ab28:	1cfb      	adds	r3, r7, #3
 800ab2a:	f000 bcdb 	b.w	800b4e4 <_dtoa_r+0xa54>
 800ab2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ab32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	d10a      	bne.n	800ab52 <_dtoa_r+0xc2>
 800ab3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab3e:	2301      	movs	r3, #1
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab44:	b113      	cbz	r3, 800ab4c <_dtoa_r+0xbc>
 800ab46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ab48:	4b81      	ldr	r3, [pc, #516]	@ (800ad50 <_dtoa_r+0x2c0>)
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	4f81      	ldr	r7, [pc, #516]	@ (800ad54 <_dtoa_r+0x2c4>)
 800ab4e:	f000 bccb 	b.w	800b4e8 <_dtoa_r+0xa58>
 800ab52:	aa0e      	add	r2, sp, #56	@ 0x38
 800ab54:	a90f      	add	r1, sp, #60	@ 0x3c
 800ab56:	4648      	mov	r0, r9
 800ab58:	eeb0 0b48 	vmov.f64	d0, d8
 800ab5c:	f001 f918 	bl	800bd90 <__d2b>
 800ab60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ab64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab66:	9001      	str	r0, [sp, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d045      	beq.n	800abf8 <_dtoa_r+0x168>
 800ab6c:	eeb0 7b48 	vmov.f64	d7, d8
 800ab70:	ee18 1a90 	vmov	r1, s17
 800ab74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ab78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ab7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ab80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ab84:	2500      	movs	r5, #0
 800ab86:	ee07 1a90 	vmov	s15, r1
 800ab8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ab8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ad28 <_dtoa_r+0x298>
 800ab92:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ad30 <_dtoa_r+0x2a0>
 800ab9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ab9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ad38 <_dtoa_r+0x2a8>
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800abaa:	eeb0 7b46 	vmov.f64	d7, d6
 800abae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800abb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800abb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800abba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abbe:	ee16 8a90 	vmov	r8, s13
 800abc2:	d508      	bpl.n	800abd6 <_dtoa_r+0x146>
 800abc4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800abc8:	eeb4 6b47 	vcmp.f64	d6, d7
 800abcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd0:	bf18      	it	ne
 800abd2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800abd6:	f1b8 0f16 	cmp.w	r8, #22
 800abda:	d82b      	bhi.n	800ac34 <_dtoa_r+0x1a4>
 800abdc:	495e      	ldr	r1, [pc, #376]	@ (800ad58 <_dtoa_r+0x2c8>)
 800abde:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800abe2:	ed91 7b00 	vldr	d7, [r1]
 800abe6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800abea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abee:	d501      	bpl.n	800abf4 <_dtoa_r+0x164>
 800abf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800abf4:	2100      	movs	r1, #0
 800abf6:	e01e      	b.n	800ac36 <_dtoa_r+0x1a6>
 800abf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abfa:	4413      	add	r3, r2
 800abfc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ac00:	2920      	cmp	r1, #32
 800ac02:	bfc1      	itttt	gt
 800ac04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ac08:	408e      	lslgt	r6, r1
 800ac0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ac0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ac12:	bfd6      	itet	le
 800ac14:	f1c1 0120 	rsble	r1, r1, #32
 800ac18:	4331      	orrgt	r1, r6
 800ac1a:	fa04 f101 	lslle.w	r1, r4, r1
 800ac1e:	ee07 1a90 	vmov	s15, r1
 800ac22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ac26:	3b01      	subs	r3, #1
 800ac28:	ee17 1a90 	vmov	r1, s15
 800ac2c:	2501      	movs	r5, #1
 800ac2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ac32:	e7a8      	b.n	800ab86 <_dtoa_r+0xf6>
 800ac34:	2101      	movs	r1, #1
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	1e53      	subs	r3, r2, #1
 800ac3a:	9306      	str	r3, [sp, #24]
 800ac3c:	bf45      	ittet	mi
 800ac3e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ac42:	9305      	strmi	r3, [sp, #20]
 800ac44:	2300      	movpl	r3, #0
 800ac46:	2300      	movmi	r3, #0
 800ac48:	bf4c      	ite	mi
 800ac4a:	9306      	strmi	r3, [sp, #24]
 800ac4c:	9305      	strpl	r3, [sp, #20]
 800ac4e:	f1b8 0f00 	cmp.w	r8, #0
 800ac52:	910c      	str	r1, [sp, #48]	@ 0x30
 800ac54:	db18      	blt.n	800ac88 <_dtoa_r+0x1f8>
 800ac56:	9b06      	ldr	r3, [sp, #24]
 800ac58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ac5c:	4443      	add	r3, r8
 800ac5e:	9306      	str	r3, [sp, #24]
 800ac60:	2300      	movs	r3, #0
 800ac62:	9a07      	ldr	r2, [sp, #28]
 800ac64:	2a09      	cmp	r2, #9
 800ac66:	d849      	bhi.n	800acfc <_dtoa_r+0x26c>
 800ac68:	2a05      	cmp	r2, #5
 800ac6a:	bfc4      	itt	gt
 800ac6c:	3a04      	subgt	r2, #4
 800ac6e:	9207      	strgt	r2, [sp, #28]
 800ac70:	9a07      	ldr	r2, [sp, #28]
 800ac72:	f1a2 0202 	sub.w	r2, r2, #2
 800ac76:	bfcc      	ite	gt
 800ac78:	2400      	movgt	r4, #0
 800ac7a:	2401      	movle	r4, #1
 800ac7c:	2a03      	cmp	r2, #3
 800ac7e:	d848      	bhi.n	800ad12 <_dtoa_r+0x282>
 800ac80:	e8df f002 	tbb	[pc, r2]
 800ac84:	3a2c2e0b 	.word	0x3a2c2e0b
 800ac88:	9b05      	ldr	r3, [sp, #20]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	eba3 0308 	sub.w	r3, r3, r8
 800ac90:	9305      	str	r3, [sp, #20]
 800ac92:	920a      	str	r2, [sp, #40]	@ 0x28
 800ac94:	f1c8 0300 	rsb	r3, r8, #0
 800ac98:	e7e3      	b.n	800ac62 <_dtoa_r+0x1d2>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	9208      	str	r2, [sp, #32]
 800ac9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aca0:	2a00      	cmp	r2, #0
 800aca2:	dc39      	bgt.n	800ad18 <_dtoa_r+0x288>
 800aca4:	f04f 0b01 	mov.w	fp, #1
 800aca8:	46da      	mov	sl, fp
 800acaa:	465a      	mov	r2, fp
 800acac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800acb0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800acb4:	2100      	movs	r1, #0
 800acb6:	2004      	movs	r0, #4
 800acb8:	f100 0614 	add.w	r6, r0, #20
 800acbc:	4296      	cmp	r6, r2
 800acbe:	d930      	bls.n	800ad22 <_dtoa_r+0x292>
 800acc0:	6079      	str	r1, [r7, #4]
 800acc2:	4648      	mov	r0, r9
 800acc4:	9304      	str	r3, [sp, #16]
 800acc6:	f000 fd39 	bl	800b73c <_Balloc>
 800acca:	9b04      	ldr	r3, [sp, #16]
 800accc:	4607      	mov	r7, r0
 800acce:	2800      	cmp	r0, #0
 800acd0:	d146      	bne.n	800ad60 <_dtoa_r+0x2d0>
 800acd2:	4b22      	ldr	r3, [pc, #136]	@ (800ad5c <_dtoa_r+0x2cc>)
 800acd4:	4602      	mov	r2, r0
 800acd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800acda:	e6f2      	b.n	800aac2 <_dtoa_r+0x32>
 800acdc:	2201      	movs	r2, #1
 800acde:	e7dd      	b.n	800ac9c <_dtoa_r+0x20c>
 800ace0:	2200      	movs	r2, #0
 800ace2:	9208      	str	r2, [sp, #32]
 800ace4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ace6:	eb08 0b02 	add.w	fp, r8, r2
 800acea:	f10b 0a01 	add.w	sl, fp, #1
 800acee:	4652      	mov	r2, sl
 800acf0:	2a01      	cmp	r2, #1
 800acf2:	bfb8      	it	lt
 800acf4:	2201      	movlt	r2, #1
 800acf6:	e7db      	b.n	800acb0 <_dtoa_r+0x220>
 800acf8:	2201      	movs	r2, #1
 800acfa:	e7f2      	b.n	800ace2 <_dtoa_r+0x252>
 800acfc:	2401      	movs	r4, #1
 800acfe:	2200      	movs	r2, #0
 800ad00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ad04:	f04f 3bff 	mov.w	fp, #4294967295
 800ad08:	2100      	movs	r1, #0
 800ad0a:	46da      	mov	sl, fp
 800ad0c:	2212      	movs	r2, #18
 800ad0e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad10:	e7ce      	b.n	800acb0 <_dtoa_r+0x220>
 800ad12:	2201      	movs	r2, #1
 800ad14:	9208      	str	r2, [sp, #32]
 800ad16:	e7f5      	b.n	800ad04 <_dtoa_r+0x274>
 800ad18:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ad1c:	46da      	mov	sl, fp
 800ad1e:	465a      	mov	r2, fp
 800ad20:	e7c6      	b.n	800acb0 <_dtoa_r+0x220>
 800ad22:	3101      	adds	r1, #1
 800ad24:	0040      	lsls	r0, r0, #1
 800ad26:	e7c7      	b.n	800acb8 <_dtoa_r+0x228>
 800ad28:	636f4361 	.word	0x636f4361
 800ad2c:	3fd287a7 	.word	0x3fd287a7
 800ad30:	8b60c8b3 	.word	0x8b60c8b3
 800ad34:	3fc68a28 	.word	0x3fc68a28
 800ad38:	509f79fb 	.word	0x509f79fb
 800ad3c:	3fd34413 	.word	0x3fd34413
 800ad40:	0800eadd 	.word	0x0800eadd
 800ad44:	0800eaf4 	.word	0x0800eaf4
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	0800ead9 	.word	0x0800ead9
 800ad50:	0800eaad 	.word	0x0800eaad
 800ad54:	0800eaac 	.word	0x0800eaac
 800ad58:	0800ebf0 	.word	0x0800ebf0
 800ad5c:	0800eb4c 	.word	0x0800eb4c
 800ad60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ad64:	f1ba 0f0e 	cmp.w	sl, #14
 800ad68:	6010      	str	r0, [r2, #0]
 800ad6a:	d86f      	bhi.n	800ae4c <_dtoa_r+0x3bc>
 800ad6c:	2c00      	cmp	r4, #0
 800ad6e:	d06d      	beq.n	800ae4c <_dtoa_r+0x3bc>
 800ad70:	f1b8 0f00 	cmp.w	r8, #0
 800ad74:	f340 80c2 	ble.w	800aefc <_dtoa_r+0x46c>
 800ad78:	4aca      	ldr	r2, [pc, #808]	@ (800b0a4 <_dtoa_r+0x614>)
 800ad7a:	f008 010f 	and.w	r1, r8, #15
 800ad7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ad82:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ad86:	ed92 7b00 	vldr	d7, [r2]
 800ad8a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ad8e:	f000 80a9 	beq.w	800aee4 <_dtoa_r+0x454>
 800ad92:	4ac5      	ldr	r2, [pc, #788]	@ (800b0a8 <_dtoa_r+0x618>)
 800ad94:	ed92 6b08 	vldr	d6, [r2, #32]
 800ad98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ad9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ada0:	f001 010f 	and.w	r1, r1, #15
 800ada4:	2203      	movs	r2, #3
 800ada6:	48c0      	ldr	r0, [pc, #768]	@ (800b0a8 <_dtoa_r+0x618>)
 800ada8:	2900      	cmp	r1, #0
 800adaa:	f040 809d 	bne.w	800aee8 <_dtoa_r+0x458>
 800adae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800adb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800adb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800adba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800adbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adc0:	2900      	cmp	r1, #0
 800adc2:	f000 80c1 	beq.w	800af48 <_dtoa_r+0x4b8>
 800adc6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800adca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800adce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add2:	f140 80b9 	bpl.w	800af48 <_dtoa_r+0x4b8>
 800add6:	f1ba 0f00 	cmp.w	sl, #0
 800adda:	f000 80b5 	beq.w	800af48 <_dtoa_r+0x4b8>
 800adde:	f1bb 0f00 	cmp.w	fp, #0
 800ade2:	dd31      	ble.n	800ae48 <_dtoa_r+0x3b8>
 800ade4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ade8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800adec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800adf0:	f108 31ff 	add.w	r1, r8, #4294967295
 800adf4:	9104      	str	r1, [sp, #16]
 800adf6:	3201      	adds	r2, #1
 800adf8:	465c      	mov	r4, fp
 800adfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800adfe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ae02:	ee07 2a90 	vmov	s15, r2
 800ae06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ae0e:	ee15 2a90 	vmov	r2, s11
 800ae12:	ec51 0b15 	vmov	r0, r1, d5
 800ae16:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	f040 8098 	bne.w	800af50 <_dtoa_r+0x4c0>
 800ae20:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ae24:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ae28:	ec41 0b17 	vmov	d7, r0, r1
 800ae2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae34:	f300 8261 	bgt.w	800b2fa <_dtoa_r+0x86a>
 800ae38:	eeb1 7b47 	vneg.f64	d7, d7
 800ae3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae44:	f100 80f5 	bmi.w	800b032 <_dtoa_r+0x5a2>
 800ae48:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ae4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	f2c0 812c 	blt.w	800b0ac <_dtoa_r+0x61c>
 800ae54:	f1b8 0f0e 	cmp.w	r8, #14
 800ae58:	f300 8128 	bgt.w	800b0ac <_dtoa_r+0x61c>
 800ae5c:	4b91      	ldr	r3, [pc, #580]	@ (800b0a4 <_dtoa_r+0x614>)
 800ae5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae62:	ed93 6b00 	vldr	d6, [r3]
 800ae66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	da03      	bge.n	800ae74 <_dtoa_r+0x3e4>
 800ae6c:	f1ba 0f00 	cmp.w	sl, #0
 800ae70:	f340 80d2 	ble.w	800b018 <_dtoa_r+0x588>
 800ae74:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ae78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae7c:	463e      	mov	r6, r7
 800ae7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ae82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ae86:	ee15 3a10 	vmov	r3, s10
 800ae8a:	3330      	adds	r3, #48	@ 0x30
 800ae8c:	f806 3b01 	strb.w	r3, [r6], #1
 800ae90:	1bf3      	subs	r3, r6, r7
 800ae92:	459a      	cmp	sl, r3
 800ae94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ae98:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ae9c:	f040 80f8 	bne.w	800b090 <_dtoa_r+0x600>
 800aea0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aea4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeac:	f300 80dd 	bgt.w	800b06a <_dtoa_r+0x5da>
 800aeb0:	eeb4 7b46 	vcmp.f64	d7, d6
 800aeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb8:	d104      	bne.n	800aec4 <_dtoa_r+0x434>
 800aeba:	ee15 3a10 	vmov	r3, s10
 800aebe:	07db      	lsls	r3, r3, #31
 800aec0:	f100 80d3 	bmi.w	800b06a <_dtoa_r+0x5da>
 800aec4:	9901      	ldr	r1, [sp, #4]
 800aec6:	4648      	mov	r0, r9
 800aec8:	f000 fc78 	bl	800b7bc <_Bfree>
 800aecc:	2300      	movs	r3, #0
 800aece:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aed0:	7033      	strb	r3, [r6, #0]
 800aed2:	f108 0301 	add.w	r3, r8, #1
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 8304 	beq.w	800b4e8 <_dtoa_r+0xa58>
 800aee0:	601e      	str	r6, [r3, #0]
 800aee2:	e301      	b.n	800b4e8 <_dtoa_r+0xa58>
 800aee4:	2202      	movs	r2, #2
 800aee6:	e75e      	b.n	800ada6 <_dtoa_r+0x316>
 800aee8:	07cc      	lsls	r4, r1, #31
 800aeea:	d504      	bpl.n	800aef6 <_dtoa_r+0x466>
 800aeec:	ed90 6b00 	vldr	d6, [r0]
 800aef0:	3201      	adds	r2, #1
 800aef2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aef6:	1049      	asrs	r1, r1, #1
 800aef8:	3008      	adds	r0, #8
 800aefa:	e755      	b.n	800ada8 <_dtoa_r+0x318>
 800aefc:	d022      	beq.n	800af44 <_dtoa_r+0x4b4>
 800aefe:	f1c8 0100 	rsb	r1, r8, #0
 800af02:	4a68      	ldr	r2, [pc, #416]	@ (800b0a4 <_dtoa_r+0x614>)
 800af04:	f001 000f 	and.w	r0, r1, #15
 800af08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800af0c:	ed92 7b00 	vldr	d7, [r2]
 800af10:	ee28 7b07 	vmul.f64	d7, d8, d7
 800af14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af18:	4863      	ldr	r0, [pc, #396]	@ (800b0a8 <_dtoa_r+0x618>)
 800af1a:	1109      	asrs	r1, r1, #4
 800af1c:	2400      	movs	r4, #0
 800af1e:	2202      	movs	r2, #2
 800af20:	b929      	cbnz	r1, 800af2e <_dtoa_r+0x49e>
 800af22:	2c00      	cmp	r4, #0
 800af24:	f43f af49 	beq.w	800adba <_dtoa_r+0x32a>
 800af28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af2c:	e745      	b.n	800adba <_dtoa_r+0x32a>
 800af2e:	07ce      	lsls	r6, r1, #31
 800af30:	d505      	bpl.n	800af3e <_dtoa_r+0x4ae>
 800af32:	ed90 6b00 	vldr	d6, [r0]
 800af36:	3201      	adds	r2, #1
 800af38:	2401      	movs	r4, #1
 800af3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af3e:	1049      	asrs	r1, r1, #1
 800af40:	3008      	adds	r0, #8
 800af42:	e7ed      	b.n	800af20 <_dtoa_r+0x490>
 800af44:	2202      	movs	r2, #2
 800af46:	e738      	b.n	800adba <_dtoa_r+0x32a>
 800af48:	f8cd 8010 	str.w	r8, [sp, #16]
 800af4c:	4654      	mov	r4, sl
 800af4e:	e754      	b.n	800adfa <_dtoa_r+0x36a>
 800af50:	4a54      	ldr	r2, [pc, #336]	@ (800b0a4 <_dtoa_r+0x614>)
 800af52:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800af56:	ed12 4b02 	vldr	d4, [r2, #-8]
 800af5a:	9a08      	ldr	r2, [sp, #32]
 800af5c:	ec41 0b17 	vmov	d7, r0, r1
 800af60:	443c      	add	r4, r7
 800af62:	b34a      	cbz	r2, 800afb8 <_dtoa_r+0x528>
 800af64:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800af68:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800af6c:	463e      	mov	r6, r7
 800af6e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800af72:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800af76:	ee35 7b47 	vsub.f64	d7, d5, d7
 800af7a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800af7e:	ee14 2a90 	vmov	r2, s9
 800af82:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800af86:	3230      	adds	r2, #48	@ 0x30
 800af88:	ee36 6b45 	vsub.f64	d6, d6, d5
 800af8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af94:	f806 2b01 	strb.w	r2, [r6], #1
 800af98:	d438      	bmi.n	800b00c <_dtoa_r+0x57c>
 800af9a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800af9e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800afa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa6:	d462      	bmi.n	800b06e <_dtoa_r+0x5de>
 800afa8:	42a6      	cmp	r6, r4
 800afaa:	f43f af4d 	beq.w	800ae48 <_dtoa_r+0x3b8>
 800afae:	ee27 7b03 	vmul.f64	d7, d7, d3
 800afb2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800afb6:	e7e0      	b.n	800af7a <_dtoa_r+0x4ea>
 800afb8:	4621      	mov	r1, r4
 800afba:	463e      	mov	r6, r7
 800afbc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800afc0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800afc4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800afc8:	ee14 2a90 	vmov	r2, s9
 800afcc:	3230      	adds	r2, #48	@ 0x30
 800afce:	f806 2b01 	strb.w	r2, [r6], #1
 800afd2:	42a6      	cmp	r6, r4
 800afd4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800afd8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800afdc:	d119      	bne.n	800b012 <_dtoa_r+0x582>
 800afde:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800afe2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800afe6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800afea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afee:	dc3e      	bgt.n	800b06e <_dtoa_r+0x5de>
 800aff0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800aff4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800aff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800affc:	f57f af24 	bpl.w	800ae48 <_dtoa_r+0x3b8>
 800b000:	460e      	mov	r6, r1
 800b002:	3901      	subs	r1, #1
 800b004:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b008:	2b30      	cmp	r3, #48	@ 0x30
 800b00a:	d0f9      	beq.n	800b000 <_dtoa_r+0x570>
 800b00c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b010:	e758      	b.n	800aec4 <_dtoa_r+0x434>
 800b012:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b016:	e7d5      	b.n	800afc4 <_dtoa_r+0x534>
 800b018:	d10b      	bne.n	800b032 <_dtoa_r+0x5a2>
 800b01a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b01e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b022:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02e:	f2c0 8161 	blt.w	800b2f4 <_dtoa_r+0x864>
 800b032:	2400      	movs	r4, #0
 800b034:	4625      	mov	r5, r4
 800b036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b038:	43db      	mvns	r3, r3
 800b03a:	9304      	str	r3, [sp, #16]
 800b03c:	463e      	mov	r6, r7
 800b03e:	f04f 0800 	mov.w	r8, #0
 800b042:	4621      	mov	r1, r4
 800b044:	4648      	mov	r0, r9
 800b046:	f000 fbb9 	bl	800b7bc <_Bfree>
 800b04a:	2d00      	cmp	r5, #0
 800b04c:	d0de      	beq.n	800b00c <_dtoa_r+0x57c>
 800b04e:	f1b8 0f00 	cmp.w	r8, #0
 800b052:	d005      	beq.n	800b060 <_dtoa_r+0x5d0>
 800b054:	45a8      	cmp	r8, r5
 800b056:	d003      	beq.n	800b060 <_dtoa_r+0x5d0>
 800b058:	4641      	mov	r1, r8
 800b05a:	4648      	mov	r0, r9
 800b05c:	f000 fbae 	bl	800b7bc <_Bfree>
 800b060:	4629      	mov	r1, r5
 800b062:	4648      	mov	r0, r9
 800b064:	f000 fbaa 	bl	800b7bc <_Bfree>
 800b068:	e7d0      	b.n	800b00c <_dtoa_r+0x57c>
 800b06a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b06e:	4633      	mov	r3, r6
 800b070:	461e      	mov	r6, r3
 800b072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b076:	2a39      	cmp	r2, #57	@ 0x39
 800b078:	d106      	bne.n	800b088 <_dtoa_r+0x5f8>
 800b07a:	429f      	cmp	r7, r3
 800b07c:	d1f8      	bne.n	800b070 <_dtoa_r+0x5e0>
 800b07e:	9a04      	ldr	r2, [sp, #16]
 800b080:	3201      	adds	r2, #1
 800b082:	9204      	str	r2, [sp, #16]
 800b084:	2230      	movs	r2, #48	@ 0x30
 800b086:	703a      	strb	r2, [r7, #0]
 800b088:	781a      	ldrb	r2, [r3, #0]
 800b08a:	3201      	adds	r2, #1
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	e7bd      	b.n	800b00c <_dtoa_r+0x57c>
 800b090:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b094:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09c:	f47f aeef 	bne.w	800ae7e <_dtoa_r+0x3ee>
 800b0a0:	e710      	b.n	800aec4 <_dtoa_r+0x434>
 800b0a2:	bf00      	nop
 800b0a4:	0800ebf0 	.word	0x0800ebf0
 800b0a8:	0800ebc8 	.word	0x0800ebc8
 800b0ac:	9908      	ldr	r1, [sp, #32]
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	f000 80e3 	beq.w	800b27a <_dtoa_r+0x7ea>
 800b0b4:	9907      	ldr	r1, [sp, #28]
 800b0b6:	2901      	cmp	r1, #1
 800b0b8:	f300 80c8 	bgt.w	800b24c <_dtoa_r+0x7bc>
 800b0bc:	2d00      	cmp	r5, #0
 800b0be:	f000 80c1 	beq.w	800b244 <_dtoa_r+0x7b4>
 800b0c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b0c6:	9e05      	ldr	r6, [sp, #20]
 800b0c8:	461c      	mov	r4, r3
 800b0ca:	9304      	str	r3, [sp, #16]
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	9305      	str	r3, [sp, #20]
 800b0d2:	9b06      	ldr	r3, [sp, #24]
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	4413      	add	r3, r2
 800b0d8:	4648      	mov	r0, r9
 800b0da:	9306      	str	r3, [sp, #24]
 800b0dc:	f000 fc22 	bl	800b924 <__i2b>
 800b0e0:	9b04      	ldr	r3, [sp, #16]
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	b166      	cbz	r6, 800b100 <_dtoa_r+0x670>
 800b0e6:	9a06      	ldr	r2, [sp, #24]
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	dd09      	ble.n	800b100 <_dtoa_r+0x670>
 800b0ec:	42b2      	cmp	r2, r6
 800b0ee:	9905      	ldr	r1, [sp, #20]
 800b0f0:	bfa8      	it	ge
 800b0f2:	4632      	movge	r2, r6
 800b0f4:	1a89      	subs	r1, r1, r2
 800b0f6:	9105      	str	r1, [sp, #20]
 800b0f8:	9906      	ldr	r1, [sp, #24]
 800b0fa:	1ab6      	subs	r6, r6, r2
 800b0fc:	1a8a      	subs	r2, r1, r2
 800b0fe:	9206      	str	r2, [sp, #24]
 800b100:	b1fb      	cbz	r3, 800b142 <_dtoa_r+0x6b2>
 800b102:	9a08      	ldr	r2, [sp, #32]
 800b104:	2a00      	cmp	r2, #0
 800b106:	f000 80bc 	beq.w	800b282 <_dtoa_r+0x7f2>
 800b10a:	b19c      	cbz	r4, 800b134 <_dtoa_r+0x6a4>
 800b10c:	4629      	mov	r1, r5
 800b10e:	4622      	mov	r2, r4
 800b110:	4648      	mov	r0, r9
 800b112:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b114:	f000 fcc6 	bl	800baa4 <__pow5mult>
 800b118:	9a01      	ldr	r2, [sp, #4]
 800b11a:	4601      	mov	r1, r0
 800b11c:	4605      	mov	r5, r0
 800b11e:	4648      	mov	r0, r9
 800b120:	f000 fc16 	bl	800b950 <__multiply>
 800b124:	9901      	ldr	r1, [sp, #4]
 800b126:	9004      	str	r0, [sp, #16]
 800b128:	4648      	mov	r0, r9
 800b12a:	f000 fb47 	bl	800b7bc <_Bfree>
 800b12e:	9a04      	ldr	r2, [sp, #16]
 800b130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b132:	9201      	str	r2, [sp, #4]
 800b134:	1b1a      	subs	r2, r3, r4
 800b136:	d004      	beq.n	800b142 <_dtoa_r+0x6b2>
 800b138:	9901      	ldr	r1, [sp, #4]
 800b13a:	4648      	mov	r0, r9
 800b13c:	f000 fcb2 	bl	800baa4 <__pow5mult>
 800b140:	9001      	str	r0, [sp, #4]
 800b142:	2101      	movs	r1, #1
 800b144:	4648      	mov	r0, r9
 800b146:	f000 fbed 	bl	800b924 <__i2b>
 800b14a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b14c:	4604      	mov	r4, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 81d0 	beq.w	800b4f4 <_dtoa_r+0xa64>
 800b154:	461a      	mov	r2, r3
 800b156:	4601      	mov	r1, r0
 800b158:	4648      	mov	r0, r9
 800b15a:	f000 fca3 	bl	800baa4 <__pow5mult>
 800b15e:	9b07      	ldr	r3, [sp, #28]
 800b160:	2b01      	cmp	r3, #1
 800b162:	4604      	mov	r4, r0
 800b164:	f300 8095 	bgt.w	800b292 <_dtoa_r+0x802>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f040 808b 	bne.w	800b286 <_dtoa_r+0x7f6>
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b176:	2a00      	cmp	r2, #0
 800b178:	f040 8087 	bne.w	800b28a <_dtoa_r+0x7fa>
 800b17c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b180:	0d12      	lsrs	r2, r2, #20
 800b182:	0512      	lsls	r2, r2, #20
 800b184:	2a00      	cmp	r2, #0
 800b186:	f000 8082 	beq.w	800b28e <_dtoa_r+0x7fe>
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	3301      	adds	r3, #1
 800b18e:	9305      	str	r3, [sp, #20]
 800b190:	9b06      	ldr	r3, [sp, #24]
 800b192:	3301      	adds	r3, #1
 800b194:	9306      	str	r3, [sp, #24]
 800b196:	2301      	movs	r3, #1
 800b198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b19a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 81af 	beq.w	800b500 <_dtoa_r+0xa70>
 800b1a2:	6922      	ldr	r2, [r4, #16]
 800b1a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b1a8:	6910      	ldr	r0, [r2, #16]
 800b1aa:	f000 fb6f 	bl	800b88c <__hi0bits>
 800b1ae:	f1c0 0020 	rsb	r0, r0, #32
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	4418      	add	r0, r3
 800b1b6:	f010 001f 	ands.w	r0, r0, #31
 800b1ba:	d076      	beq.n	800b2aa <_dtoa_r+0x81a>
 800b1bc:	f1c0 0220 	rsb	r2, r0, #32
 800b1c0:	2a04      	cmp	r2, #4
 800b1c2:	dd69      	ble.n	800b298 <_dtoa_r+0x808>
 800b1c4:	9b05      	ldr	r3, [sp, #20]
 800b1c6:	f1c0 001c 	rsb	r0, r0, #28
 800b1ca:	4403      	add	r3, r0
 800b1cc:	9305      	str	r3, [sp, #20]
 800b1ce:	9b06      	ldr	r3, [sp, #24]
 800b1d0:	4406      	add	r6, r0
 800b1d2:	4403      	add	r3, r0
 800b1d4:	9306      	str	r3, [sp, #24]
 800b1d6:	9b05      	ldr	r3, [sp, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dd05      	ble.n	800b1e8 <_dtoa_r+0x758>
 800b1dc:	9901      	ldr	r1, [sp, #4]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	4648      	mov	r0, r9
 800b1e2:	f000 fcb9 	bl	800bb58 <__lshift>
 800b1e6:	9001      	str	r0, [sp, #4]
 800b1e8:	9b06      	ldr	r3, [sp, #24]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	dd05      	ble.n	800b1fa <_dtoa_r+0x76a>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	4648      	mov	r0, r9
 800b1f4:	f000 fcb0 	bl	800bb58 <__lshift>
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d056      	beq.n	800b2ae <_dtoa_r+0x81e>
 800b200:	9801      	ldr	r0, [sp, #4]
 800b202:	4621      	mov	r1, r4
 800b204:	f000 fd14 	bl	800bc30 <__mcmp>
 800b208:	2800      	cmp	r0, #0
 800b20a:	da50      	bge.n	800b2ae <_dtoa_r+0x81e>
 800b20c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b210:	9304      	str	r3, [sp, #16]
 800b212:	9901      	ldr	r1, [sp, #4]
 800b214:	2300      	movs	r3, #0
 800b216:	220a      	movs	r2, #10
 800b218:	4648      	mov	r0, r9
 800b21a:	f000 faf1 	bl	800b800 <__multadd>
 800b21e:	9b08      	ldr	r3, [sp, #32]
 800b220:	9001      	str	r0, [sp, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 816e 	beq.w	800b504 <_dtoa_r+0xa74>
 800b228:	4629      	mov	r1, r5
 800b22a:	2300      	movs	r3, #0
 800b22c:	220a      	movs	r2, #10
 800b22e:	4648      	mov	r0, r9
 800b230:	f000 fae6 	bl	800b800 <__multadd>
 800b234:	f1bb 0f00 	cmp.w	fp, #0
 800b238:	4605      	mov	r5, r0
 800b23a:	dc64      	bgt.n	800b306 <_dtoa_r+0x876>
 800b23c:	9b07      	ldr	r3, [sp, #28]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	dc3e      	bgt.n	800b2c0 <_dtoa_r+0x830>
 800b242:	e060      	b.n	800b306 <_dtoa_r+0x876>
 800b244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b246:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b24a:	e73c      	b.n	800b0c6 <_dtoa_r+0x636>
 800b24c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b250:	42a3      	cmp	r3, r4
 800b252:	bfbf      	itttt	lt
 800b254:	1ae2      	sublt	r2, r4, r3
 800b256:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b258:	189b      	addlt	r3, r3, r2
 800b25a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b25c:	bfae      	itee	ge
 800b25e:	1b1c      	subge	r4, r3, r4
 800b260:	4623      	movlt	r3, r4
 800b262:	2400      	movlt	r4, #0
 800b264:	f1ba 0f00 	cmp.w	sl, #0
 800b268:	bfb5      	itete	lt
 800b26a:	9a05      	ldrlt	r2, [sp, #20]
 800b26c:	9e05      	ldrge	r6, [sp, #20]
 800b26e:	eba2 060a 	sublt.w	r6, r2, sl
 800b272:	4652      	movge	r2, sl
 800b274:	bfb8      	it	lt
 800b276:	2200      	movlt	r2, #0
 800b278:	e727      	b.n	800b0ca <_dtoa_r+0x63a>
 800b27a:	9e05      	ldr	r6, [sp, #20]
 800b27c:	9d08      	ldr	r5, [sp, #32]
 800b27e:	461c      	mov	r4, r3
 800b280:	e730      	b.n	800b0e4 <_dtoa_r+0x654>
 800b282:	461a      	mov	r2, r3
 800b284:	e758      	b.n	800b138 <_dtoa_r+0x6a8>
 800b286:	2300      	movs	r3, #0
 800b288:	e786      	b.n	800b198 <_dtoa_r+0x708>
 800b28a:	9b02      	ldr	r3, [sp, #8]
 800b28c:	e784      	b.n	800b198 <_dtoa_r+0x708>
 800b28e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b290:	e783      	b.n	800b19a <_dtoa_r+0x70a>
 800b292:	2300      	movs	r3, #0
 800b294:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b296:	e784      	b.n	800b1a2 <_dtoa_r+0x712>
 800b298:	d09d      	beq.n	800b1d6 <_dtoa_r+0x746>
 800b29a:	9b05      	ldr	r3, [sp, #20]
 800b29c:	321c      	adds	r2, #28
 800b29e:	4413      	add	r3, r2
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	9b06      	ldr	r3, [sp, #24]
 800b2a4:	4416      	add	r6, r2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	e794      	b.n	800b1d4 <_dtoa_r+0x744>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	e7f5      	b.n	800b29a <_dtoa_r+0x80a>
 800b2ae:	f1ba 0f00 	cmp.w	sl, #0
 800b2b2:	f8cd 8010 	str.w	r8, [sp, #16]
 800b2b6:	46d3      	mov	fp, sl
 800b2b8:	dc21      	bgt.n	800b2fe <_dtoa_r+0x86e>
 800b2ba:	9b07      	ldr	r3, [sp, #28]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	dd1e      	ble.n	800b2fe <_dtoa_r+0x86e>
 800b2c0:	f1bb 0f00 	cmp.w	fp, #0
 800b2c4:	f47f aeb7 	bne.w	800b036 <_dtoa_r+0x5a6>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	2205      	movs	r2, #5
 800b2ce:	4648      	mov	r0, r9
 800b2d0:	f000 fa96 	bl	800b800 <__multadd>
 800b2d4:	4601      	mov	r1, r0
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	9801      	ldr	r0, [sp, #4]
 800b2da:	f000 fca9 	bl	800bc30 <__mcmp>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f77f aea9 	ble.w	800b036 <_dtoa_r+0x5a6>
 800b2e4:	463e      	mov	r6, r7
 800b2e6:	2331      	movs	r3, #49	@ 0x31
 800b2e8:	f806 3b01 	strb.w	r3, [r6], #1
 800b2ec:	9b04      	ldr	r3, [sp, #16]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	e6a4      	b.n	800b03e <_dtoa_r+0x5ae>
 800b2f4:	f8cd 8010 	str.w	r8, [sp, #16]
 800b2f8:	4654      	mov	r4, sl
 800b2fa:	4625      	mov	r5, r4
 800b2fc:	e7f2      	b.n	800b2e4 <_dtoa_r+0x854>
 800b2fe:	9b08      	ldr	r3, [sp, #32]
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 8103 	beq.w	800b50c <_dtoa_r+0xa7c>
 800b306:	2e00      	cmp	r6, #0
 800b308:	dd05      	ble.n	800b316 <_dtoa_r+0x886>
 800b30a:	4629      	mov	r1, r5
 800b30c:	4632      	mov	r2, r6
 800b30e:	4648      	mov	r0, r9
 800b310:	f000 fc22 	bl	800bb58 <__lshift>
 800b314:	4605      	mov	r5, r0
 800b316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d058      	beq.n	800b3ce <_dtoa_r+0x93e>
 800b31c:	6869      	ldr	r1, [r5, #4]
 800b31e:	4648      	mov	r0, r9
 800b320:	f000 fa0c 	bl	800b73c <_Balloc>
 800b324:	4606      	mov	r6, r0
 800b326:	b928      	cbnz	r0, 800b334 <_dtoa_r+0x8a4>
 800b328:	4b82      	ldr	r3, [pc, #520]	@ (800b534 <_dtoa_r+0xaa4>)
 800b32a:	4602      	mov	r2, r0
 800b32c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b330:	f7ff bbc7 	b.w	800aac2 <_dtoa_r+0x32>
 800b334:	692a      	ldr	r2, [r5, #16]
 800b336:	3202      	adds	r2, #2
 800b338:	0092      	lsls	r2, r2, #2
 800b33a:	f105 010c 	add.w	r1, r5, #12
 800b33e:	300c      	adds	r0, #12
 800b340:	f000 ffac 	bl	800c29c <memcpy>
 800b344:	2201      	movs	r2, #1
 800b346:	4631      	mov	r1, r6
 800b348:	4648      	mov	r0, r9
 800b34a:	f000 fc05 	bl	800bb58 <__lshift>
 800b34e:	1c7b      	adds	r3, r7, #1
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	eb07 030b 	add.w	r3, r7, fp
 800b356:	9309      	str	r3, [sp, #36]	@ 0x24
 800b358:	9b02      	ldr	r3, [sp, #8]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	46a8      	mov	r8, r5
 800b360:	9308      	str	r3, [sp, #32]
 800b362:	4605      	mov	r5, r0
 800b364:	9b05      	ldr	r3, [sp, #20]
 800b366:	9801      	ldr	r0, [sp, #4]
 800b368:	4621      	mov	r1, r4
 800b36a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b36e:	f7ff fb04 	bl	800a97a <quorem>
 800b372:	4641      	mov	r1, r8
 800b374:	9002      	str	r0, [sp, #8]
 800b376:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b37a:	9801      	ldr	r0, [sp, #4]
 800b37c:	f000 fc58 	bl	800bc30 <__mcmp>
 800b380:	462a      	mov	r2, r5
 800b382:	9006      	str	r0, [sp, #24]
 800b384:	4621      	mov	r1, r4
 800b386:	4648      	mov	r0, r9
 800b388:	f000 fc6e 	bl	800bc68 <__mdiff>
 800b38c:	68c2      	ldr	r2, [r0, #12]
 800b38e:	4606      	mov	r6, r0
 800b390:	b9fa      	cbnz	r2, 800b3d2 <_dtoa_r+0x942>
 800b392:	4601      	mov	r1, r0
 800b394:	9801      	ldr	r0, [sp, #4]
 800b396:	f000 fc4b 	bl	800bc30 <__mcmp>
 800b39a:	4602      	mov	r2, r0
 800b39c:	4631      	mov	r1, r6
 800b39e:	4648      	mov	r0, r9
 800b3a0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3a2:	f000 fa0b 	bl	800b7bc <_Bfree>
 800b3a6:	9b07      	ldr	r3, [sp, #28]
 800b3a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3aa:	9e05      	ldr	r6, [sp, #20]
 800b3ac:	ea43 0102 	orr.w	r1, r3, r2
 800b3b0:	9b08      	ldr	r3, [sp, #32]
 800b3b2:	4319      	orrs	r1, r3
 800b3b4:	d10f      	bne.n	800b3d6 <_dtoa_r+0x946>
 800b3b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b3ba:	d028      	beq.n	800b40e <_dtoa_r+0x97e>
 800b3bc:	9b06      	ldr	r3, [sp, #24]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	dd02      	ble.n	800b3c8 <_dtoa_r+0x938>
 800b3c2:	9b02      	ldr	r3, [sp, #8]
 800b3c4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b3c8:	f88b a000 	strb.w	sl, [fp]
 800b3cc:	e639      	b.n	800b042 <_dtoa_r+0x5b2>
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	e7bd      	b.n	800b34e <_dtoa_r+0x8be>
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	e7e2      	b.n	800b39c <_dtoa_r+0x90c>
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db04      	blt.n	800b3e6 <_dtoa_r+0x956>
 800b3dc:	9907      	ldr	r1, [sp, #28]
 800b3de:	430b      	orrs	r3, r1
 800b3e0:	9908      	ldr	r1, [sp, #32]
 800b3e2:	430b      	orrs	r3, r1
 800b3e4:	d120      	bne.n	800b428 <_dtoa_r+0x998>
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	ddee      	ble.n	800b3c8 <_dtoa_r+0x938>
 800b3ea:	9901      	ldr	r1, [sp, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	4648      	mov	r0, r9
 800b3f0:	f000 fbb2 	bl	800bb58 <__lshift>
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	9001      	str	r0, [sp, #4]
 800b3f8:	f000 fc1a 	bl	800bc30 <__mcmp>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	dc03      	bgt.n	800b408 <_dtoa_r+0x978>
 800b400:	d1e2      	bne.n	800b3c8 <_dtoa_r+0x938>
 800b402:	f01a 0f01 	tst.w	sl, #1
 800b406:	d0df      	beq.n	800b3c8 <_dtoa_r+0x938>
 800b408:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b40c:	d1d9      	bne.n	800b3c2 <_dtoa_r+0x932>
 800b40e:	2339      	movs	r3, #57	@ 0x39
 800b410:	f88b 3000 	strb.w	r3, [fp]
 800b414:	4633      	mov	r3, r6
 800b416:	461e      	mov	r6, r3
 800b418:	3b01      	subs	r3, #1
 800b41a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b41e:	2a39      	cmp	r2, #57	@ 0x39
 800b420:	d053      	beq.n	800b4ca <_dtoa_r+0xa3a>
 800b422:	3201      	adds	r2, #1
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	e60c      	b.n	800b042 <_dtoa_r+0x5b2>
 800b428:	2a00      	cmp	r2, #0
 800b42a:	dd07      	ble.n	800b43c <_dtoa_r+0x9ac>
 800b42c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b430:	d0ed      	beq.n	800b40e <_dtoa_r+0x97e>
 800b432:	f10a 0301 	add.w	r3, sl, #1
 800b436:	f88b 3000 	strb.w	r3, [fp]
 800b43a:	e602      	b.n	800b042 <_dtoa_r+0x5b2>
 800b43c:	9b05      	ldr	r3, [sp, #20]
 800b43e:	9a05      	ldr	r2, [sp, #20]
 800b440:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b446:	4293      	cmp	r3, r2
 800b448:	d029      	beq.n	800b49e <_dtoa_r+0xa0e>
 800b44a:	9901      	ldr	r1, [sp, #4]
 800b44c:	2300      	movs	r3, #0
 800b44e:	220a      	movs	r2, #10
 800b450:	4648      	mov	r0, r9
 800b452:	f000 f9d5 	bl	800b800 <__multadd>
 800b456:	45a8      	cmp	r8, r5
 800b458:	9001      	str	r0, [sp, #4]
 800b45a:	f04f 0300 	mov.w	r3, #0
 800b45e:	f04f 020a 	mov.w	r2, #10
 800b462:	4641      	mov	r1, r8
 800b464:	4648      	mov	r0, r9
 800b466:	d107      	bne.n	800b478 <_dtoa_r+0x9e8>
 800b468:	f000 f9ca 	bl	800b800 <__multadd>
 800b46c:	4680      	mov	r8, r0
 800b46e:	4605      	mov	r5, r0
 800b470:	9b05      	ldr	r3, [sp, #20]
 800b472:	3301      	adds	r3, #1
 800b474:	9305      	str	r3, [sp, #20]
 800b476:	e775      	b.n	800b364 <_dtoa_r+0x8d4>
 800b478:	f000 f9c2 	bl	800b800 <__multadd>
 800b47c:	4629      	mov	r1, r5
 800b47e:	4680      	mov	r8, r0
 800b480:	2300      	movs	r3, #0
 800b482:	220a      	movs	r2, #10
 800b484:	4648      	mov	r0, r9
 800b486:	f000 f9bb 	bl	800b800 <__multadd>
 800b48a:	4605      	mov	r5, r0
 800b48c:	e7f0      	b.n	800b470 <_dtoa_r+0x9e0>
 800b48e:	f1bb 0f00 	cmp.w	fp, #0
 800b492:	bfcc      	ite	gt
 800b494:	465e      	movgt	r6, fp
 800b496:	2601      	movle	r6, #1
 800b498:	443e      	add	r6, r7
 800b49a:	f04f 0800 	mov.w	r8, #0
 800b49e:	9901      	ldr	r1, [sp, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	4648      	mov	r0, r9
 800b4a4:	f000 fb58 	bl	800bb58 <__lshift>
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	9001      	str	r0, [sp, #4]
 800b4ac:	f000 fbc0 	bl	800bc30 <__mcmp>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	dcaf      	bgt.n	800b414 <_dtoa_r+0x984>
 800b4b4:	d102      	bne.n	800b4bc <_dtoa_r+0xa2c>
 800b4b6:	f01a 0f01 	tst.w	sl, #1
 800b4ba:	d1ab      	bne.n	800b414 <_dtoa_r+0x984>
 800b4bc:	4633      	mov	r3, r6
 800b4be:	461e      	mov	r6, r3
 800b4c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4c4:	2a30      	cmp	r2, #48	@ 0x30
 800b4c6:	d0fa      	beq.n	800b4be <_dtoa_r+0xa2e>
 800b4c8:	e5bb      	b.n	800b042 <_dtoa_r+0x5b2>
 800b4ca:	429f      	cmp	r7, r3
 800b4cc:	d1a3      	bne.n	800b416 <_dtoa_r+0x986>
 800b4ce:	9b04      	ldr	r3, [sp, #16]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	2331      	movs	r3, #49	@ 0x31
 800b4d6:	703b      	strb	r3, [r7, #0]
 800b4d8:	e5b3      	b.n	800b042 <_dtoa_r+0x5b2>
 800b4da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b4dc:	4f16      	ldr	r7, [pc, #88]	@ (800b538 <_dtoa_r+0xaa8>)
 800b4de:	b11b      	cbz	r3, 800b4e8 <_dtoa_r+0xa58>
 800b4e0:	f107 0308 	add.w	r3, r7, #8
 800b4e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b4e6:	6013      	str	r3, [r2, #0]
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	b011      	add	sp, #68	@ 0x44
 800b4ec:	ecbd 8b02 	vpop	{d8}
 800b4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f4:	9b07      	ldr	r3, [sp, #28]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	f77f ae36 	ble.w	800b168 <_dtoa_r+0x6d8>
 800b4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b500:	2001      	movs	r0, #1
 800b502:	e656      	b.n	800b1b2 <_dtoa_r+0x722>
 800b504:	f1bb 0f00 	cmp.w	fp, #0
 800b508:	f77f aed7 	ble.w	800b2ba <_dtoa_r+0x82a>
 800b50c:	463e      	mov	r6, r7
 800b50e:	9801      	ldr	r0, [sp, #4]
 800b510:	4621      	mov	r1, r4
 800b512:	f7ff fa32 	bl	800a97a <quorem>
 800b516:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b51a:	f806 ab01 	strb.w	sl, [r6], #1
 800b51e:	1bf2      	subs	r2, r6, r7
 800b520:	4593      	cmp	fp, r2
 800b522:	ddb4      	ble.n	800b48e <_dtoa_r+0x9fe>
 800b524:	9901      	ldr	r1, [sp, #4]
 800b526:	2300      	movs	r3, #0
 800b528:	220a      	movs	r2, #10
 800b52a:	4648      	mov	r0, r9
 800b52c:	f000 f968 	bl	800b800 <__multadd>
 800b530:	9001      	str	r0, [sp, #4]
 800b532:	e7ec      	b.n	800b50e <_dtoa_r+0xa7e>
 800b534:	0800eb4c 	.word	0x0800eb4c
 800b538:	0800ead0 	.word	0x0800ead0

0800b53c <_free_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4605      	mov	r5, r0
 800b540:	2900      	cmp	r1, #0
 800b542:	d041      	beq.n	800b5c8 <_free_r+0x8c>
 800b544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b548:	1f0c      	subs	r4, r1, #4
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfb8      	it	lt
 800b54e:	18e4      	addlt	r4, r4, r3
 800b550:	f000 f8e8 	bl	800b724 <__malloc_lock>
 800b554:	4a1d      	ldr	r2, [pc, #116]	@ (800b5cc <_free_r+0x90>)
 800b556:	6813      	ldr	r3, [r2, #0]
 800b558:	b933      	cbnz	r3, 800b568 <_free_r+0x2c>
 800b55a:	6063      	str	r3, [r4, #4]
 800b55c:	6014      	str	r4, [r2, #0]
 800b55e:	4628      	mov	r0, r5
 800b560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b564:	f000 b8e4 	b.w	800b730 <__malloc_unlock>
 800b568:	42a3      	cmp	r3, r4
 800b56a:	d908      	bls.n	800b57e <_free_r+0x42>
 800b56c:	6820      	ldr	r0, [r4, #0]
 800b56e:	1821      	adds	r1, r4, r0
 800b570:	428b      	cmp	r3, r1
 800b572:	bf01      	itttt	eq
 800b574:	6819      	ldreq	r1, [r3, #0]
 800b576:	685b      	ldreq	r3, [r3, #4]
 800b578:	1809      	addeq	r1, r1, r0
 800b57a:	6021      	streq	r1, [r4, #0]
 800b57c:	e7ed      	b.n	800b55a <_free_r+0x1e>
 800b57e:	461a      	mov	r2, r3
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	b10b      	cbz	r3, 800b588 <_free_r+0x4c>
 800b584:	42a3      	cmp	r3, r4
 800b586:	d9fa      	bls.n	800b57e <_free_r+0x42>
 800b588:	6811      	ldr	r1, [r2, #0]
 800b58a:	1850      	adds	r0, r2, r1
 800b58c:	42a0      	cmp	r0, r4
 800b58e:	d10b      	bne.n	800b5a8 <_free_r+0x6c>
 800b590:	6820      	ldr	r0, [r4, #0]
 800b592:	4401      	add	r1, r0
 800b594:	1850      	adds	r0, r2, r1
 800b596:	4283      	cmp	r3, r0
 800b598:	6011      	str	r1, [r2, #0]
 800b59a:	d1e0      	bne.n	800b55e <_free_r+0x22>
 800b59c:	6818      	ldr	r0, [r3, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	6053      	str	r3, [r2, #4]
 800b5a2:	4408      	add	r0, r1
 800b5a4:	6010      	str	r0, [r2, #0]
 800b5a6:	e7da      	b.n	800b55e <_free_r+0x22>
 800b5a8:	d902      	bls.n	800b5b0 <_free_r+0x74>
 800b5aa:	230c      	movs	r3, #12
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	e7d6      	b.n	800b55e <_free_r+0x22>
 800b5b0:	6820      	ldr	r0, [r4, #0]
 800b5b2:	1821      	adds	r1, r4, r0
 800b5b4:	428b      	cmp	r3, r1
 800b5b6:	bf04      	itt	eq
 800b5b8:	6819      	ldreq	r1, [r3, #0]
 800b5ba:	685b      	ldreq	r3, [r3, #4]
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	bf04      	itt	eq
 800b5c0:	1809      	addeq	r1, r1, r0
 800b5c2:	6021      	streq	r1, [r4, #0]
 800b5c4:	6054      	str	r4, [r2, #4]
 800b5c6:	e7ca      	b.n	800b55e <_free_r+0x22>
 800b5c8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ca:	bf00      	nop
 800b5cc:	240012e0 	.word	0x240012e0

0800b5d0 <malloc>:
 800b5d0:	4b02      	ldr	r3, [pc, #8]	@ (800b5dc <malloc+0xc>)
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	6818      	ldr	r0, [r3, #0]
 800b5d6:	f000 b825 	b.w	800b624 <_malloc_r>
 800b5da:	bf00      	nop
 800b5dc:	24000070 	.word	0x24000070

0800b5e0 <sbrk_aligned>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	4e0f      	ldr	r6, [pc, #60]	@ (800b620 <sbrk_aligned+0x40>)
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	6831      	ldr	r1, [r6, #0]
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	b911      	cbnz	r1, 800b5f2 <sbrk_aligned+0x12>
 800b5ec:	f000 fe46 	bl	800c27c <_sbrk_r>
 800b5f0:	6030      	str	r0, [r6, #0]
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f000 fe41 	bl	800c27c <_sbrk_r>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	d103      	bne.n	800b606 <sbrk_aligned+0x26>
 800b5fe:	f04f 34ff 	mov.w	r4, #4294967295
 800b602:	4620      	mov	r0, r4
 800b604:	bd70      	pop	{r4, r5, r6, pc}
 800b606:	1cc4      	adds	r4, r0, #3
 800b608:	f024 0403 	bic.w	r4, r4, #3
 800b60c:	42a0      	cmp	r0, r4
 800b60e:	d0f8      	beq.n	800b602 <sbrk_aligned+0x22>
 800b610:	1a21      	subs	r1, r4, r0
 800b612:	4628      	mov	r0, r5
 800b614:	f000 fe32 	bl	800c27c <_sbrk_r>
 800b618:	3001      	adds	r0, #1
 800b61a:	d1f2      	bne.n	800b602 <sbrk_aligned+0x22>
 800b61c:	e7ef      	b.n	800b5fe <sbrk_aligned+0x1e>
 800b61e:	bf00      	nop
 800b620:	240012dc 	.word	0x240012dc

0800b624 <_malloc_r>:
 800b624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b628:	1ccd      	adds	r5, r1, #3
 800b62a:	f025 0503 	bic.w	r5, r5, #3
 800b62e:	3508      	adds	r5, #8
 800b630:	2d0c      	cmp	r5, #12
 800b632:	bf38      	it	cc
 800b634:	250c      	movcc	r5, #12
 800b636:	2d00      	cmp	r5, #0
 800b638:	4606      	mov	r6, r0
 800b63a:	db01      	blt.n	800b640 <_malloc_r+0x1c>
 800b63c:	42a9      	cmp	r1, r5
 800b63e:	d904      	bls.n	800b64a <_malloc_r+0x26>
 800b640:	230c      	movs	r3, #12
 800b642:	6033      	str	r3, [r6, #0]
 800b644:	2000      	movs	r0, #0
 800b646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b720 <_malloc_r+0xfc>
 800b64e:	f000 f869 	bl	800b724 <__malloc_lock>
 800b652:	f8d8 3000 	ldr.w	r3, [r8]
 800b656:	461c      	mov	r4, r3
 800b658:	bb44      	cbnz	r4, 800b6ac <_malloc_r+0x88>
 800b65a:	4629      	mov	r1, r5
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff ffbf 	bl	800b5e0 <sbrk_aligned>
 800b662:	1c43      	adds	r3, r0, #1
 800b664:	4604      	mov	r4, r0
 800b666:	d158      	bne.n	800b71a <_malloc_r+0xf6>
 800b668:	f8d8 4000 	ldr.w	r4, [r8]
 800b66c:	4627      	mov	r7, r4
 800b66e:	2f00      	cmp	r7, #0
 800b670:	d143      	bne.n	800b6fa <_malloc_r+0xd6>
 800b672:	2c00      	cmp	r4, #0
 800b674:	d04b      	beq.n	800b70e <_malloc_r+0xea>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	4639      	mov	r1, r7
 800b67a:	4630      	mov	r0, r6
 800b67c:	eb04 0903 	add.w	r9, r4, r3
 800b680:	f000 fdfc 	bl	800c27c <_sbrk_r>
 800b684:	4581      	cmp	r9, r0
 800b686:	d142      	bne.n	800b70e <_malloc_r+0xea>
 800b688:	6821      	ldr	r1, [r4, #0]
 800b68a:	1a6d      	subs	r5, r5, r1
 800b68c:	4629      	mov	r1, r5
 800b68e:	4630      	mov	r0, r6
 800b690:	f7ff ffa6 	bl	800b5e0 <sbrk_aligned>
 800b694:	3001      	adds	r0, #1
 800b696:	d03a      	beq.n	800b70e <_malloc_r+0xea>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	442b      	add	r3, r5
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	bb62      	cbnz	r2, 800b700 <_malloc_r+0xdc>
 800b6a6:	f8c8 7000 	str.w	r7, [r8]
 800b6aa:	e00f      	b.n	800b6cc <_malloc_r+0xa8>
 800b6ac:	6822      	ldr	r2, [r4, #0]
 800b6ae:	1b52      	subs	r2, r2, r5
 800b6b0:	d420      	bmi.n	800b6f4 <_malloc_r+0xd0>
 800b6b2:	2a0b      	cmp	r2, #11
 800b6b4:	d917      	bls.n	800b6e6 <_malloc_r+0xc2>
 800b6b6:	1961      	adds	r1, r4, r5
 800b6b8:	42a3      	cmp	r3, r4
 800b6ba:	6025      	str	r5, [r4, #0]
 800b6bc:	bf18      	it	ne
 800b6be:	6059      	strne	r1, [r3, #4]
 800b6c0:	6863      	ldr	r3, [r4, #4]
 800b6c2:	bf08      	it	eq
 800b6c4:	f8c8 1000 	streq.w	r1, [r8]
 800b6c8:	5162      	str	r2, [r4, r5]
 800b6ca:	604b      	str	r3, [r1, #4]
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f000 f82f 	bl	800b730 <__malloc_unlock>
 800b6d2:	f104 000b 	add.w	r0, r4, #11
 800b6d6:	1d23      	adds	r3, r4, #4
 800b6d8:	f020 0007 	bic.w	r0, r0, #7
 800b6dc:	1ac2      	subs	r2, r0, r3
 800b6de:	bf1c      	itt	ne
 800b6e0:	1a1b      	subne	r3, r3, r0
 800b6e2:	50a3      	strne	r3, [r4, r2]
 800b6e4:	e7af      	b.n	800b646 <_malloc_r+0x22>
 800b6e6:	6862      	ldr	r2, [r4, #4]
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	bf0c      	ite	eq
 800b6ec:	f8c8 2000 	streq.w	r2, [r8]
 800b6f0:	605a      	strne	r2, [r3, #4]
 800b6f2:	e7eb      	b.n	800b6cc <_malloc_r+0xa8>
 800b6f4:	4623      	mov	r3, r4
 800b6f6:	6864      	ldr	r4, [r4, #4]
 800b6f8:	e7ae      	b.n	800b658 <_malloc_r+0x34>
 800b6fa:	463c      	mov	r4, r7
 800b6fc:	687f      	ldr	r7, [r7, #4]
 800b6fe:	e7b6      	b.n	800b66e <_malloc_r+0x4a>
 800b700:	461a      	mov	r2, r3
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	42a3      	cmp	r3, r4
 800b706:	d1fb      	bne.n	800b700 <_malloc_r+0xdc>
 800b708:	2300      	movs	r3, #0
 800b70a:	6053      	str	r3, [r2, #4]
 800b70c:	e7de      	b.n	800b6cc <_malloc_r+0xa8>
 800b70e:	230c      	movs	r3, #12
 800b710:	6033      	str	r3, [r6, #0]
 800b712:	4630      	mov	r0, r6
 800b714:	f000 f80c 	bl	800b730 <__malloc_unlock>
 800b718:	e794      	b.n	800b644 <_malloc_r+0x20>
 800b71a:	6005      	str	r5, [r0, #0]
 800b71c:	e7d6      	b.n	800b6cc <_malloc_r+0xa8>
 800b71e:	bf00      	nop
 800b720:	240012e0 	.word	0x240012e0

0800b724 <__malloc_lock>:
 800b724:	4801      	ldr	r0, [pc, #4]	@ (800b72c <__malloc_lock+0x8>)
 800b726:	f7ff b926 	b.w	800a976 <__retarget_lock_acquire_recursive>
 800b72a:	bf00      	nop
 800b72c:	240012d8 	.word	0x240012d8

0800b730 <__malloc_unlock>:
 800b730:	4801      	ldr	r0, [pc, #4]	@ (800b738 <__malloc_unlock+0x8>)
 800b732:	f7ff b921 	b.w	800a978 <__retarget_lock_release_recursive>
 800b736:	bf00      	nop
 800b738:	240012d8 	.word	0x240012d8

0800b73c <_Balloc>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	69c6      	ldr	r6, [r0, #28]
 800b740:	4604      	mov	r4, r0
 800b742:	460d      	mov	r5, r1
 800b744:	b976      	cbnz	r6, 800b764 <_Balloc+0x28>
 800b746:	2010      	movs	r0, #16
 800b748:	f7ff ff42 	bl	800b5d0 <malloc>
 800b74c:	4602      	mov	r2, r0
 800b74e:	61e0      	str	r0, [r4, #28]
 800b750:	b920      	cbnz	r0, 800b75c <_Balloc+0x20>
 800b752:	4b18      	ldr	r3, [pc, #96]	@ (800b7b4 <_Balloc+0x78>)
 800b754:	4818      	ldr	r0, [pc, #96]	@ (800b7b8 <_Balloc+0x7c>)
 800b756:	216b      	movs	r1, #107	@ 0x6b
 800b758:	f000 fdae 	bl	800c2b8 <__assert_func>
 800b75c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b760:	6006      	str	r6, [r0, #0]
 800b762:	60c6      	str	r6, [r0, #12]
 800b764:	69e6      	ldr	r6, [r4, #28]
 800b766:	68f3      	ldr	r3, [r6, #12]
 800b768:	b183      	cbz	r3, 800b78c <_Balloc+0x50>
 800b76a:	69e3      	ldr	r3, [r4, #28]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b772:	b9b8      	cbnz	r0, 800b7a4 <_Balloc+0x68>
 800b774:	2101      	movs	r1, #1
 800b776:	fa01 f605 	lsl.w	r6, r1, r5
 800b77a:	1d72      	adds	r2, r6, #5
 800b77c:	0092      	lsls	r2, r2, #2
 800b77e:	4620      	mov	r0, r4
 800b780:	f000 fdb8 	bl	800c2f4 <_calloc_r>
 800b784:	b160      	cbz	r0, 800b7a0 <_Balloc+0x64>
 800b786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b78a:	e00e      	b.n	800b7aa <_Balloc+0x6e>
 800b78c:	2221      	movs	r2, #33	@ 0x21
 800b78e:	2104      	movs	r1, #4
 800b790:	4620      	mov	r0, r4
 800b792:	f000 fdaf 	bl	800c2f4 <_calloc_r>
 800b796:	69e3      	ldr	r3, [r4, #28]
 800b798:	60f0      	str	r0, [r6, #12]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1e4      	bne.n	800b76a <_Balloc+0x2e>
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	6802      	ldr	r2, [r0, #0]
 800b7a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7b0:	e7f7      	b.n	800b7a2 <_Balloc+0x66>
 800b7b2:	bf00      	nop
 800b7b4:	0800eadd 	.word	0x0800eadd
 800b7b8:	0800eb5d 	.word	0x0800eb5d

0800b7bc <_Bfree>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	69c6      	ldr	r6, [r0, #28]
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	b976      	cbnz	r6, 800b7e4 <_Bfree+0x28>
 800b7c6:	2010      	movs	r0, #16
 800b7c8:	f7ff ff02 	bl	800b5d0 <malloc>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	61e8      	str	r0, [r5, #28]
 800b7d0:	b920      	cbnz	r0, 800b7dc <_Bfree+0x20>
 800b7d2:	4b09      	ldr	r3, [pc, #36]	@ (800b7f8 <_Bfree+0x3c>)
 800b7d4:	4809      	ldr	r0, [pc, #36]	@ (800b7fc <_Bfree+0x40>)
 800b7d6:	218f      	movs	r1, #143	@ 0x8f
 800b7d8:	f000 fd6e 	bl	800c2b8 <__assert_func>
 800b7dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7e0:	6006      	str	r6, [r0, #0]
 800b7e2:	60c6      	str	r6, [r0, #12]
 800b7e4:	b13c      	cbz	r4, 800b7f6 <_Bfree+0x3a>
 800b7e6:	69eb      	ldr	r3, [r5, #28]
 800b7e8:	6862      	ldr	r2, [r4, #4]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7f0:	6021      	str	r1, [r4, #0]
 800b7f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7f6:	bd70      	pop	{r4, r5, r6, pc}
 800b7f8:	0800eadd 	.word	0x0800eadd
 800b7fc:	0800eb5d 	.word	0x0800eb5d

0800b800 <__multadd>:
 800b800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b804:	690d      	ldr	r5, [r1, #16]
 800b806:	4607      	mov	r7, r0
 800b808:	460c      	mov	r4, r1
 800b80a:	461e      	mov	r6, r3
 800b80c:	f101 0c14 	add.w	ip, r1, #20
 800b810:	2000      	movs	r0, #0
 800b812:	f8dc 3000 	ldr.w	r3, [ip]
 800b816:	b299      	uxth	r1, r3
 800b818:	fb02 6101 	mla	r1, r2, r1, r6
 800b81c:	0c1e      	lsrs	r6, r3, #16
 800b81e:	0c0b      	lsrs	r3, r1, #16
 800b820:	fb02 3306 	mla	r3, r2, r6, r3
 800b824:	b289      	uxth	r1, r1
 800b826:	3001      	adds	r0, #1
 800b828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b82c:	4285      	cmp	r5, r0
 800b82e:	f84c 1b04 	str.w	r1, [ip], #4
 800b832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b836:	dcec      	bgt.n	800b812 <__multadd+0x12>
 800b838:	b30e      	cbz	r6, 800b87e <__multadd+0x7e>
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	42ab      	cmp	r3, r5
 800b83e:	dc19      	bgt.n	800b874 <__multadd+0x74>
 800b840:	6861      	ldr	r1, [r4, #4]
 800b842:	4638      	mov	r0, r7
 800b844:	3101      	adds	r1, #1
 800b846:	f7ff ff79 	bl	800b73c <_Balloc>
 800b84a:	4680      	mov	r8, r0
 800b84c:	b928      	cbnz	r0, 800b85a <__multadd+0x5a>
 800b84e:	4602      	mov	r2, r0
 800b850:	4b0c      	ldr	r3, [pc, #48]	@ (800b884 <__multadd+0x84>)
 800b852:	480d      	ldr	r0, [pc, #52]	@ (800b888 <__multadd+0x88>)
 800b854:	21ba      	movs	r1, #186	@ 0xba
 800b856:	f000 fd2f 	bl	800c2b8 <__assert_func>
 800b85a:	6922      	ldr	r2, [r4, #16]
 800b85c:	3202      	adds	r2, #2
 800b85e:	f104 010c 	add.w	r1, r4, #12
 800b862:	0092      	lsls	r2, r2, #2
 800b864:	300c      	adds	r0, #12
 800b866:	f000 fd19 	bl	800c29c <memcpy>
 800b86a:	4621      	mov	r1, r4
 800b86c:	4638      	mov	r0, r7
 800b86e:	f7ff ffa5 	bl	800b7bc <_Bfree>
 800b872:	4644      	mov	r4, r8
 800b874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b878:	3501      	adds	r5, #1
 800b87a:	615e      	str	r6, [r3, #20]
 800b87c:	6125      	str	r5, [r4, #16]
 800b87e:	4620      	mov	r0, r4
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	0800eb4c 	.word	0x0800eb4c
 800b888:	0800eb5d 	.word	0x0800eb5d

0800b88c <__hi0bits>:
 800b88c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b890:	4603      	mov	r3, r0
 800b892:	bf36      	itet	cc
 800b894:	0403      	lslcc	r3, r0, #16
 800b896:	2000      	movcs	r0, #0
 800b898:	2010      	movcc	r0, #16
 800b89a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b89e:	bf3c      	itt	cc
 800b8a0:	021b      	lslcc	r3, r3, #8
 800b8a2:	3008      	addcc	r0, #8
 800b8a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a8:	bf3c      	itt	cc
 800b8aa:	011b      	lslcc	r3, r3, #4
 800b8ac:	3004      	addcc	r0, #4
 800b8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8b2:	bf3c      	itt	cc
 800b8b4:	009b      	lslcc	r3, r3, #2
 800b8b6:	3002      	addcc	r0, #2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	db05      	blt.n	800b8c8 <__hi0bits+0x3c>
 800b8bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b8c0:	f100 0001 	add.w	r0, r0, #1
 800b8c4:	bf08      	it	eq
 800b8c6:	2020      	moveq	r0, #32
 800b8c8:	4770      	bx	lr

0800b8ca <__lo0bits>:
 800b8ca:	6803      	ldr	r3, [r0, #0]
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	f013 0007 	ands.w	r0, r3, #7
 800b8d2:	d00b      	beq.n	800b8ec <__lo0bits+0x22>
 800b8d4:	07d9      	lsls	r1, r3, #31
 800b8d6:	d421      	bmi.n	800b91c <__lo0bits+0x52>
 800b8d8:	0798      	lsls	r0, r3, #30
 800b8da:	bf49      	itett	mi
 800b8dc:	085b      	lsrmi	r3, r3, #1
 800b8de:	089b      	lsrpl	r3, r3, #2
 800b8e0:	2001      	movmi	r0, #1
 800b8e2:	6013      	strmi	r3, [r2, #0]
 800b8e4:	bf5c      	itt	pl
 800b8e6:	6013      	strpl	r3, [r2, #0]
 800b8e8:	2002      	movpl	r0, #2
 800b8ea:	4770      	bx	lr
 800b8ec:	b299      	uxth	r1, r3
 800b8ee:	b909      	cbnz	r1, 800b8f4 <__lo0bits+0x2a>
 800b8f0:	0c1b      	lsrs	r3, r3, #16
 800b8f2:	2010      	movs	r0, #16
 800b8f4:	b2d9      	uxtb	r1, r3
 800b8f6:	b909      	cbnz	r1, 800b8fc <__lo0bits+0x32>
 800b8f8:	3008      	adds	r0, #8
 800b8fa:	0a1b      	lsrs	r3, r3, #8
 800b8fc:	0719      	lsls	r1, r3, #28
 800b8fe:	bf04      	itt	eq
 800b900:	091b      	lsreq	r3, r3, #4
 800b902:	3004      	addeq	r0, #4
 800b904:	0799      	lsls	r1, r3, #30
 800b906:	bf04      	itt	eq
 800b908:	089b      	lsreq	r3, r3, #2
 800b90a:	3002      	addeq	r0, #2
 800b90c:	07d9      	lsls	r1, r3, #31
 800b90e:	d403      	bmi.n	800b918 <__lo0bits+0x4e>
 800b910:	085b      	lsrs	r3, r3, #1
 800b912:	f100 0001 	add.w	r0, r0, #1
 800b916:	d003      	beq.n	800b920 <__lo0bits+0x56>
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	4770      	bx	lr
 800b91c:	2000      	movs	r0, #0
 800b91e:	4770      	bx	lr
 800b920:	2020      	movs	r0, #32
 800b922:	4770      	bx	lr

0800b924 <__i2b>:
 800b924:	b510      	push	{r4, lr}
 800b926:	460c      	mov	r4, r1
 800b928:	2101      	movs	r1, #1
 800b92a:	f7ff ff07 	bl	800b73c <_Balloc>
 800b92e:	4602      	mov	r2, r0
 800b930:	b928      	cbnz	r0, 800b93e <__i2b+0x1a>
 800b932:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <__i2b+0x24>)
 800b934:	4805      	ldr	r0, [pc, #20]	@ (800b94c <__i2b+0x28>)
 800b936:	f240 1145 	movw	r1, #325	@ 0x145
 800b93a:	f000 fcbd 	bl	800c2b8 <__assert_func>
 800b93e:	2301      	movs	r3, #1
 800b940:	6144      	str	r4, [r0, #20]
 800b942:	6103      	str	r3, [r0, #16]
 800b944:	bd10      	pop	{r4, pc}
 800b946:	bf00      	nop
 800b948:	0800eb4c 	.word	0x0800eb4c
 800b94c:	0800eb5d 	.word	0x0800eb5d

0800b950 <__multiply>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	4614      	mov	r4, r2
 800b956:	690a      	ldr	r2, [r1, #16]
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	bfa8      	it	ge
 800b95e:	4623      	movge	r3, r4
 800b960:	460f      	mov	r7, r1
 800b962:	bfa4      	itt	ge
 800b964:	460c      	movge	r4, r1
 800b966:	461f      	movge	r7, r3
 800b968:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b96c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	6861      	ldr	r1, [r4, #4]
 800b974:	eb0a 0609 	add.w	r6, sl, r9
 800b978:	42b3      	cmp	r3, r6
 800b97a:	b085      	sub	sp, #20
 800b97c:	bfb8      	it	lt
 800b97e:	3101      	addlt	r1, #1
 800b980:	f7ff fedc 	bl	800b73c <_Balloc>
 800b984:	b930      	cbnz	r0, 800b994 <__multiply+0x44>
 800b986:	4602      	mov	r2, r0
 800b988:	4b44      	ldr	r3, [pc, #272]	@ (800ba9c <__multiply+0x14c>)
 800b98a:	4845      	ldr	r0, [pc, #276]	@ (800baa0 <__multiply+0x150>)
 800b98c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b990:	f000 fc92 	bl	800c2b8 <__assert_func>
 800b994:	f100 0514 	add.w	r5, r0, #20
 800b998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b99c:	462b      	mov	r3, r5
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4543      	cmp	r3, r8
 800b9a2:	d321      	bcc.n	800b9e8 <__multiply+0x98>
 800b9a4:	f107 0114 	add.w	r1, r7, #20
 800b9a8:	f104 0214 	add.w	r2, r4, #20
 800b9ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b9b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b9b4:	9302      	str	r3, [sp, #8]
 800b9b6:	1b13      	subs	r3, r2, r4
 800b9b8:	3b15      	subs	r3, #21
 800b9ba:	f023 0303 	bic.w	r3, r3, #3
 800b9be:	3304      	adds	r3, #4
 800b9c0:	f104 0715 	add.w	r7, r4, #21
 800b9c4:	42ba      	cmp	r2, r7
 800b9c6:	bf38      	it	cc
 800b9c8:	2304      	movcc	r3, #4
 800b9ca:	9301      	str	r3, [sp, #4]
 800b9cc:	9b02      	ldr	r3, [sp, #8]
 800b9ce:	9103      	str	r1, [sp, #12]
 800b9d0:	428b      	cmp	r3, r1
 800b9d2:	d80c      	bhi.n	800b9ee <__multiply+0x9e>
 800b9d4:	2e00      	cmp	r6, #0
 800b9d6:	dd03      	ble.n	800b9e0 <__multiply+0x90>
 800b9d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d05b      	beq.n	800ba98 <__multiply+0x148>
 800b9e0:	6106      	str	r6, [r0, #16]
 800b9e2:	b005      	add	sp, #20
 800b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e8:	f843 2b04 	str.w	r2, [r3], #4
 800b9ec:	e7d8      	b.n	800b9a0 <__multiply+0x50>
 800b9ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800b9f2:	f1ba 0f00 	cmp.w	sl, #0
 800b9f6:	d024      	beq.n	800ba42 <__multiply+0xf2>
 800b9f8:	f104 0e14 	add.w	lr, r4, #20
 800b9fc:	46a9      	mov	r9, r5
 800b9fe:	f04f 0c00 	mov.w	ip, #0
 800ba02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba06:	f8d9 3000 	ldr.w	r3, [r9]
 800ba0a:	fa1f fb87 	uxth.w	fp, r7
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba18:	f8d9 7000 	ldr.w	r7, [r9]
 800ba1c:	4463      	add	r3, ip
 800ba1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba22:	fb0a c70b 	mla	r7, sl, fp, ip
 800ba26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba30:	4572      	cmp	r2, lr
 800ba32:	f849 3b04 	str.w	r3, [r9], #4
 800ba36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba3a:	d8e2      	bhi.n	800ba02 <__multiply+0xb2>
 800ba3c:	9b01      	ldr	r3, [sp, #4]
 800ba3e:	f845 c003 	str.w	ip, [r5, r3]
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba48:	3104      	adds	r1, #4
 800ba4a:	f1b9 0f00 	cmp.w	r9, #0
 800ba4e:	d021      	beq.n	800ba94 <__multiply+0x144>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	f104 0c14 	add.w	ip, r4, #20
 800ba56:	46ae      	mov	lr, r5
 800ba58:	f04f 0a00 	mov.w	sl, #0
 800ba5c:	f8bc b000 	ldrh.w	fp, [ip]
 800ba60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ba64:	fb09 770b 	mla	r7, r9, fp, r7
 800ba68:	4457      	add	r7, sl
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba70:	f84e 3b04 	str.w	r3, [lr], #4
 800ba74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba7c:	f8be 3000 	ldrh.w	r3, [lr]
 800ba80:	fb09 330a 	mla	r3, r9, sl, r3
 800ba84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba88:	4562      	cmp	r2, ip
 800ba8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba8e:	d8e5      	bhi.n	800ba5c <__multiply+0x10c>
 800ba90:	9f01      	ldr	r7, [sp, #4]
 800ba92:	51eb      	str	r3, [r5, r7]
 800ba94:	3504      	adds	r5, #4
 800ba96:	e799      	b.n	800b9cc <__multiply+0x7c>
 800ba98:	3e01      	subs	r6, #1
 800ba9a:	e79b      	b.n	800b9d4 <__multiply+0x84>
 800ba9c:	0800eb4c 	.word	0x0800eb4c
 800baa0:	0800eb5d 	.word	0x0800eb5d

0800baa4 <__pow5mult>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	4615      	mov	r5, r2
 800baaa:	f012 0203 	ands.w	r2, r2, #3
 800baae:	4607      	mov	r7, r0
 800bab0:	460e      	mov	r6, r1
 800bab2:	d007      	beq.n	800bac4 <__pow5mult+0x20>
 800bab4:	4c25      	ldr	r4, [pc, #148]	@ (800bb4c <__pow5mult+0xa8>)
 800bab6:	3a01      	subs	r2, #1
 800bab8:	2300      	movs	r3, #0
 800baba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800babe:	f7ff fe9f 	bl	800b800 <__multadd>
 800bac2:	4606      	mov	r6, r0
 800bac4:	10ad      	asrs	r5, r5, #2
 800bac6:	d03d      	beq.n	800bb44 <__pow5mult+0xa0>
 800bac8:	69fc      	ldr	r4, [r7, #28]
 800baca:	b97c      	cbnz	r4, 800baec <__pow5mult+0x48>
 800bacc:	2010      	movs	r0, #16
 800bace:	f7ff fd7f 	bl	800b5d0 <malloc>
 800bad2:	4602      	mov	r2, r0
 800bad4:	61f8      	str	r0, [r7, #28]
 800bad6:	b928      	cbnz	r0, 800bae4 <__pow5mult+0x40>
 800bad8:	4b1d      	ldr	r3, [pc, #116]	@ (800bb50 <__pow5mult+0xac>)
 800bada:	481e      	ldr	r0, [pc, #120]	@ (800bb54 <__pow5mult+0xb0>)
 800badc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bae0:	f000 fbea 	bl	800c2b8 <__assert_func>
 800bae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bae8:	6004      	str	r4, [r0, #0]
 800baea:	60c4      	str	r4, [r0, #12]
 800baec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800baf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baf4:	b94c      	cbnz	r4, 800bb0a <__pow5mult+0x66>
 800baf6:	f240 2171 	movw	r1, #625	@ 0x271
 800bafa:	4638      	mov	r0, r7
 800bafc:	f7ff ff12 	bl	800b924 <__i2b>
 800bb00:	2300      	movs	r3, #0
 800bb02:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb06:	4604      	mov	r4, r0
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	f04f 0900 	mov.w	r9, #0
 800bb0e:	07eb      	lsls	r3, r5, #31
 800bb10:	d50a      	bpl.n	800bb28 <__pow5mult+0x84>
 800bb12:	4631      	mov	r1, r6
 800bb14:	4622      	mov	r2, r4
 800bb16:	4638      	mov	r0, r7
 800bb18:	f7ff ff1a 	bl	800b950 <__multiply>
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4680      	mov	r8, r0
 800bb20:	4638      	mov	r0, r7
 800bb22:	f7ff fe4b 	bl	800b7bc <_Bfree>
 800bb26:	4646      	mov	r6, r8
 800bb28:	106d      	asrs	r5, r5, #1
 800bb2a:	d00b      	beq.n	800bb44 <__pow5mult+0xa0>
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	b938      	cbnz	r0, 800bb40 <__pow5mult+0x9c>
 800bb30:	4622      	mov	r2, r4
 800bb32:	4621      	mov	r1, r4
 800bb34:	4638      	mov	r0, r7
 800bb36:	f7ff ff0b 	bl	800b950 <__multiply>
 800bb3a:	6020      	str	r0, [r4, #0]
 800bb3c:	f8c0 9000 	str.w	r9, [r0]
 800bb40:	4604      	mov	r4, r0
 800bb42:	e7e4      	b.n	800bb0e <__pow5mult+0x6a>
 800bb44:	4630      	mov	r0, r6
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	bf00      	nop
 800bb4c:	0800ebb8 	.word	0x0800ebb8
 800bb50:	0800eadd 	.word	0x0800eadd
 800bb54:	0800eb5d 	.word	0x0800eb5d

0800bb58 <__lshift>:
 800bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	6849      	ldr	r1, [r1, #4]
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb66:	68a3      	ldr	r3, [r4, #8]
 800bb68:	4607      	mov	r7, r0
 800bb6a:	4691      	mov	r9, r2
 800bb6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb70:	f108 0601 	add.w	r6, r8, #1
 800bb74:	42b3      	cmp	r3, r6
 800bb76:	db0b      	blt.n	800bb90 <__lshift+0x38>
 800bb78:	4638      	mov	r0, r7
 800bb7a:	f7ff fddf 	bl	800b73c <_Balloc>
 800bb7e:	4605      	mov	r5, r0
 800bb80:	b948      	cbnz	r0, 800bb96 <__lshift+0x3e>
 800bb82:	4602      	mov	r2, r0
 800bb84:	4b28      	ldr	r3, [pc, #160]	@ (800bc28 <__lshift+0xd0>)
 800bb86:	4829      	ldr	r0, [pc, #164]	@ (800bc2c <__lshift+0xd4>)
 800bb88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb8c:	f000 fb94 	bl	800c2b8 <__assert_func>
 800bb90:	3101      	adds	r1, #1
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	e7ee      	b.n	800bb74 <__lshift+0x1c>
 800bb96:	2300      	movs	r3, #0
 800bb98:	f100 0114 	add.w	r1, r0, #20
 800bb9c:	f100 0210 	add.w	r2, r0, #16
 800bba0:	4618      	mov	r0, r3
 800bba2:	4553      	cmp	r3, sl
 800bba4:	db33      	blt.n	800bc0e <__lshift+0xb6>
 800bba6:	6920      	ldr	r0, [r4, #16]
 800bba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbac:	f104 0314 	add.w	r3, r4, #20
 800bbb0:	f019 091f 	ands.w	r9, r9, #31
 800bbb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbbc:	d02b      	beq.n	800bc16 <__lshift+0xbe>
 800bbbe:	f1c9 0e20 	rsb	lr, r9, #32
 800bbc2:	468a      	mov	sl, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	fa00 f009 	lsl.w	r0, r0, r9
 800bbcc:	4310      	orrs	r0, r2
 800bbce:	f84a 0b04 	str.w	r0, [sl], #4
 800bbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd6:	459c      	cmp	ip, r3
 800bbd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbdc:	d8f3      	bhi.n	800bbc6 <__lshift+0x6e>
 800bbde:	ebac 0304 	sub.w	r3, ip, r4
 800bbe2:	3b15      	subs	r3, #21
 800bbe4:	f023 0303 	bic.w	r3, r3, #3
 800bbe8:	3304      	adds	r3, #4
 800bbea:	f104 0015 	add.w	r0, r4, #21
 800bbee:	4584      	cmp	ip, r0
 800bbf0:	bf38      	it	cc
 800bbf2:	2304      	movcc	r3, #4
 800bbf4:	50ca      	str	r2, [r1, r3]
 800bbf6:	b10a      	cbz	r2, 800bbfc <__lshift+0xa4>
 800bbf8:	f108 0602 	add.w	r6, r8, #2
 800bbfc:	3e01      	subs	r6, #1
 800bbfe:	4638      	mov	r0, r7
 800bc00:	612e      	str	r6, [r5, #16]
 800bc02:	4621      	mov	r1, r4
 800bc04:	f7ff fdda 	bl	800b7bc <_Bfree>
 800bc08:	4628      	mov	r0, r5
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc12:	3301      	adds	r3, #1
 800bc14:	e7c5      	b.n	800bba2 <__lshift+0x4a>
 800bc16:	3904      	subs	r1, #4
 800bc18:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc20:	459c      	cmp	ip, r3
 800bc22:	d8f9      	bhi.n	800bc18 <__lshift+0xc0>
 800bc24:	e7ea      	b.n	800bbfc <__lshift+0xa4>
 800bc26:	bf00      	nop
 800bc28:	0800eb4c 	.word	0x0800eb4c
 800bc2c:	0800eb5d 	.word	0x0800eb5d

0800bc30 <__mcmp>:
 800bc30:	690a      	ldr	r2, [r1, #16]
 800bc32:	4603      	mov	r3, r0
 800bc34:	6900      	ldr	r0, [r0, #16]
 800bc36:	1a80      	subs	r0, r0, r2
 800bc38:	b530      	push	{r4, r5, lr}
 800bc3a:	d10e      	bne.n	800bc5a <__mcmp+0x2a>
 800bc3c:	3314      	adds	r3, #20
 800bc3e:	3114      	adds	r1, #20
 800bc40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc50:	4295      	cmp	r5, r2
 800bc52:	d003      	beq.n	800bc5c <__mcmp+0x2c>
 800bc54:	d205      	bcs.n	800bc62 <__mcmp+0x32>
 800bc56:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5a:	bd30      	pop	{r4, r5, pc}
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	d3f3      	bcc.n	800bc48 <__mcmp+0x18>
 800bc60:	e7fb      	b.n	800bc5a <__mcmp+0x2a>
 800bc62:	2001      	movs	r0, #1
 800bc64:	e7f9      	b.n	800bc5a <__mcmp+0x2a>
	...

0800bc68 <__mdiff>:
 800bc68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	4689      	mov	r9, r1
 800bc6e:	4606      	mov	r6, r0
 800bc70:	4611      	mov	r1, r2
 800bc72:	4648      	mov	r0, r9
 800bc74:	4614      	mov	r4, r2
 800bc76:	f7ff ffdb 	bl	800bc30 <__mcmp>
 800bc7a:	1e05      	subs	r5, r0, #0
 800bc7c:	d112      	bne.n	800bca4 <__mdiff+0x3c>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff fd5b 	bl	800b73c <_Balloc>
 800bc86:	4602      	mov	r2, r0
 800bc88:	b928      	cbnz	r0, 800bc96 <__mdiff+0x2e>
 800bc8a:	4b3f      	ldr	r3, [pc, #252]	@ (800bd88 <__mdiff+0x120>)
 800bc8c:	f240 2137 	movw	r1, #567	@ 0x237
 800bc90:	483e      	ldr	r0, [pc, #248]	@ (800bd8c <__mdiff+0x124>)
 800bc92:	f000 fb11 	bl	800c2b8 <__assert_func>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	b003      	add	sp, #12
 800bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca4:	bfbc      	itt	lt
 800bca6:	464b      	movlt	r3, r9
 800bca8:	46a1      	movlt	r9, r4
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bcb0:	bfba      	itte	lt
 800bcb2:	461c      	movlt	r4, r3
 800bcb4:	2501      	movlt	r5, #1
 800bcb6:	2500      	movge	r5, #0
 800bcb8:	f7ff fd40 	bl	800b73c <_Balloc>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	b918      	cbnz	r0, 800bcc8 <__mdiff+0x60>
 800bcc0:	4b31      	ldr	r3, [pc, #196]	@ (800bd88 <__mdiff+0x120>)
 800bcc2:	f240 2145 	movw	r1, #581	@ 0x245
 800bcc6:	e7e3      	b.n	800bc90 <__mdiff+0x28>
 800bcc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bccc:	6926      	ldr	r6, [r4, #16]
 800bcce:	60c5      	str	r5, [r0, #12]
 800bcd0:	f109 0310 	add.w	r3, r9, #16
 800bcd4:	f109 0514 	add.w	r5, r9, #20
 800bcd8:	f104 0e14 	add.w	lr, r4, #20
 800bcdc:	f100 0b14 	add.w	fp, r0, #20
 800bce0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bce4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	46d9      	mov	r9, fp
 800bcec:	f04f 0c00 	mov.w	ip, #0
 800bcf0:	9b01      	ldr	r3, [sp, #4]
 800bcf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bcf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bcfa:	9301      	str	r3, [sp, #4]
 800bcfc:	fa1f f38a 	uxth.w	r3, sl
 800bd00:	4619      	mov	r1, r3
 800bd02:	b283      	uxth	r3, r0
 800bd04:	1acb      	subs	r3, r1, r3
 800bd06:	0c00      	lsrs	r0, r0, #16
 800bd08:	4463      	add	r3, ip
 800bd0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd18:	4576      	cmp	r6, lr
 800bd1a:	f849 3b04 	str.w	r3, [r9], #4
 800bd1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd22:	d8e5      	bhi.n	800bcf0 <__mdiff+0x88>
 800bd24:	1b33      	subs	r3, r6, r4
 800bd26:	3b15      	subs	r3, #21
 800bd28:	f023 0303 	bic.w	r3, r3, #3
 800bd2c:	3415      	adds	r4, #21
 800bd2e:	3304      	adds	r3, #4
 800bd30:	42a6      	cmp	r6, r4
 800bd32:	bf38      	it	cc
 800bd34:	2304      	movcc	r3, #4
 800bd36:	441d      	add	r5, r3
 800bd38:	445b      	add	r3, fp
 800bd3a:	461e      	mov	r6, r3
 800bd3c:	462c      	mov	r4, r5
 800bd3e:	4544      	cmp	r4, r8
 800bd40:	d30e      	bcc.n	800bd60 <__mdiff+0xf8>
 800bd42:	f108 0103 	add.w	r1, r8, #3
 800bd46:	1b49      	subs	r1, r1, r5
 800bd48:	f021 0103 	bic.w	r1, r1, #3
 800bd4c:	3d03      	subs	r5, #3
 800bd4e:	45a8      	cmp	r8, r5
 800bd50:	bf38      	it	cc
 800bd52:	2100      	movcc	r1, #0
 800bd54:	440b      	add	r3, r1
 800bd56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd5a:	b191      	cbz	r1, 800bd82 <__mdiff+0x11a>
 800bd5c:	6117      	str	r7, [r2, #16]
 800bd5e:	e79d      	b.n	800bc9c <__mdiff+0x34>
 800bd60:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd64:	46e6      	mov	lr, ip
 800bd66:	0c08      	lsrs	r0, r1, #16
 800bd68:	fa1c fc81 	uxtah	ip, ip, r1
 800bd6c:	4471      	add	r1, lr
 800bd6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd72:	b289      	uxth	r1, r1
 800bd74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd78:	f846 1b04 	str.w	r1, [r6], #4
 800bd7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd80:	e7dd      	b.n	800bd3e <__mdiff+0xd6>
 800bd82:	3f01      	subs	r7, #1
 800bd84:	e7e7      	b.n	800bd56 <__mdiff+0xee>
 800bd86:	bf00      	nop
 800bd88:	0800eb4c 	.word	0x0800eb4c
 800bd8c:	0800eb5d 	.word	0x0800eb5d

0800bd90 <__d2b>:
 800bd90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd94:	460f      	mov	r7, r1
 800bd96:	2101      	movs	r1, #1
 800bd98:	ec59 8b10 	vmov	r8, r9, d0
 800bd9c:	4616      	mov	r6, r2
 800bd9e:	f7ff fccd 	bl	800b73c <_Balloc>
 800bda2:	4604      	mov	r4, r0
 800bda4:	b930      	cbnz	r0, 800bdb4 <__d2b+0x24>
 800bda6:	4602      	mov	r2, r0
 800bda8:	4b23      	ldr	r3, [pc, #140]	@ (800be38 <__d2b+0xa8>)
 800bdaa:	4824      	ldr	r0, [pc, #144]	@ (800be3c <__d2b+0xac>)
 800bdac:	f240 310f 	movw	r1, #783	@ 0x30f
 800bdb0:	f000 fa82 	bl	800c2b8 <__assert_func>
 800bdb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bdb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdbc:	b10d      	cbz	r5, 800bdc2 <__d2b+0x32>
 800bdbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdc2:	9301      	str	r3, [sp, #4]
 800bdc4:	f1b8 0300 	subs.w	r3, r8, #0
 800bdc8:	d023      	beq.n	800be12 <__d2b+0x82>
 800bdca:	4668      	mov	r0, sp
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	f7ff fd7c 	bl	800b8ca <__lo0bits>
 800bdd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdd6:	b1d0      	cbz	r0, 800be0e <__d2b+0x7e>
 800bdd8:	f1c0 0320 	rsb	r3, r0, #32
 800bddc:	fa02 f303 	lsl.w	r3, r2, r3
 800bde0:	430b      	orrs	r3, r1
 800bde2:	40c2      	lsrs	r2, r0
 800bde4:	6163      	str	r3, [r4, #20]
 800bde6:	9201      	str	r2, [sp, #4]
 800bde8:	9b01      	ldr	r3, [sp, #4]
 800bdea:	61a3      	str	r3, [r4, #24]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bf0c      	ite	eq
 800bdf0:	2201      	moveq	r2, #1
 800bdf2:	2202      	movne	r2, #2
 800bdf4:	6122      	str	r2, [r4, #16]
 800bdf6:	b1a5      	cbz	r5, 800be22 <__d2b+0x92>
 800bdf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bdfc:	4405      	add	r5, r0
 800bdfe:	603d      	str	r5, [r7, #0]
 800be00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be04:	6030      	str	r0, [r6, #0]
 800be06:	4620      	mov	r0, r4
 800be08:	b003      	add	sp, #12
 800be0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be0e:	6161      	str	r1, [r4, #20]
 800be10:	e7ea      	b.n	800bde8 <__d2b+0x58>
 800be12:	a801      	add	r0, sp, #4
 800be14:	f7ff fd59 	bl	800b8ca <__lo0bits>
 800be18:	9b01      	ldr	r3, [sp, #4]
 800be1a:	6163      	str	r3, [r4, #20]
 800be1c:	3020      	adds	r0, #32
 800be1e:	2201      	movs	r2, #1
 800be20:	e7e8      	b.n	800bdf4 <__d2b+0x64>
 800be22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be2a:	6038      	str	r0, [r7, #0]
 800be2c:	6918      	ldr	r0, [r3, #16]
 800be2e:	f7ff fd2d 	bl	800b88c <__hi0bits>
 800be32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be36:	e7e5      	b.n	800be04 <__d2b+0x74>
 800be38:	0800eb4c 	.word	0x0800eb4c
 800be3c:	0800eb5d 	.word	0x0800eb5d

0800be40 <__ssputs_r>:
 800be40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be44:	688e      	ldr	r6, [r1, #8]
 800be46:	461f      	mov	r7, r3
 800be48:	42be      	cmp	r6, r7
 800be4a:	680b      	ldr	r3, [r1, #0]
 800be4c:	4682      	mov	sl, r0
 800be4e:	460c      	mov	r4, r1
 800be50:	4690      	mov	r8, r2
 800be52:	d82d      	bhi.n	800beb0 <__ssputs_r+0x70>
 800be54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be5c:	d026      	beq.n	800beac <__ssputs_r+0x6c>
 800be5e:	6965      	ldr	r5, [r4, #20]
 800be60:	6909      	ldr	r1, [r1, #16]
 800be62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be66:	eba3 0901 	sub.w	r9, r3, r1
 800be6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be6e:	1c7b      	adds	r3, r7, #1
 800be70:	444b      	add	r3, r9
 800be72:	106d      	asrs	r5, r5, #1
 800be74:	429d      	cmp	r5, r3
 800be76:	bf38      	it	cc
 800be78:	461d      	movcc	r5, r3
 800be7a:	0553      	lsls	r3, r2, #21
 800be7c:	d527      	bpl.n	800bece <__ssputs_r+0x8e>
 800be7e:	4629      	mov	r1, r5
 800be80:	f7ff fbd0 	bl	800b624 <_malloc_r>
 800be84:	4606      	mov	r6, r0
 800be86:	b360      	cbz	r0, 800bee2 <__ssputs_r+0xa2>
 800be88:	6921      	ldr	r1, [r4, #16]
 800be8a:	464a      	mov	r2, r9
 800be8c:	f000 fa06 	bl	800c29c <memcpy>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9a:	81a3      	strh	r3, [r4, #12]
 800be9c:	6126      	str	r6, [r4, #16]
 800be9e:	6165      	str	r5, [r4, #20]
 800bea0:	444e      	add	r6, r9
 800bea2:	eba5 0509 	sub.w	r5, r5, r9
 800bea6:	6026      	str	r6, [r4, #0]
 800bea8:	60a5      	str	r5, [r4, #8]
 800beaa:	463e      	mov	r6, r7
 800beac:	42be      	cmp	r6, r7
 800beae:	d900      	bls.n	800beb2 <__ssputs_r+0x72>
 800beb0:	463e      	mov	r6, r7
 800beb2:	6820      	ldr	r0, [r4, #0]
 800beb4:	4632      	mov	r2, r6
 800beb6:	4641      	mov	r1, r8
 800beb8:	f000 f9c6 	bl	800c248 <memmove>
 800bebc:	68a3      	ldr	r3, [r4, #8]
 800bebe:	1b9b      	subs	r3, r3, r6
 800bec0:	60a3      	str	r3, [r4, #8]
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	4433      	add	r3, r6
 800bec6:	6023      	str	r3, [r4, #0]
 800bec8:	2000      	movs	r0, #0
 800beca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bece:	462a      	mov	r2, r5
 800bed0:	f000 fa36 	bl	800c340 <_realloc_r>
 800bed4:	4606      	mov	r6, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d1e0      	bne.n	800be9c <__ssputs_r+0x5c>
 800beda:	6921      	ldr	r1, [r4, #16]
 800bedc:	4650      	mov	r0, sl
 800bede:	f7ff fb2d 	bl	800b53c <_free_r>
 800bee2:	230c      	movs	r3, #12
 800bee4:	f8ca 3000 	str.w	r3, [sl]
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beee:	81a3      	strh	r3, [r4, #12]
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	e7e9      	b.n	800beca <__ssputs_r+0x8a>
	...

0800bef8 <_svfiprintf_r>:
 800bef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	4698      	mov	r8, r3
 800befe:	898b      	ldrh	r3, [r1, #12]
 800bf00:	061b      	lsls	r3, r3, #24
 800bf02:	b09d      	sub	sp, #116	@ 0x74
 800bf04:	4607      	mov	r7, r0
 800bf06:	460d      	mov	r5, r1
 800bf08:	4614      	mov	r4, r2
 800bf0a:	d510      	bpl.n	800bf2e <_svfiprintf_r+0x36>
 800bf0c:	690b      	ldr	r3, [r1, #16]
 800bf0e:	b973      	cbnz	r3, 800bf2e <_svfiprintf_r+0x36>
 800bf10:	2140      	movs	r1, #64	@ 0x40
 800bf12:	f7ff fb87 	bl	800b624 <_malloc_r>
 800bf16:	6028      	str	r0, [r5, #0]
 800bf18:	6128      	str	r0, [r5, #16]
 800bf1a:	b930      	cbnz	r0, 800bf2a <_svfiprintf_r+0x32>
 800bf1c:	230c      	movs	r3, #12
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	f04f 30ff 	mov.w	r0, #4294967295
 800bf24:	b01d      	add	sp, #116	@ 0x74
 800bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2a:	2340      	movs	r3, #64	@ 0x40
 800bf2c:	616b      	str	r3, [r5, #20]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf32:	2320      	movs	r3, #32
 800bf34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf38:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf3c:	2330      	movs	r3, #48	@ 0x30
 800bf3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0dc <_svfiprintf_r+0x1e4>
 800bf42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf46:	f04f 0901 	mov.w	r9, #1
 800bf4a:	4623      	mov	r3, r4
 800bf4c:	469a      	mov	sl, r3
 800bf4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf52:	b10a      	cbz	r2, 800bf58 <_svfiprintf_r+0x60>
 800bf54:	2a25      	cmp	r2, #37	@ 0x25
 800bf56:	d1f9      	bne.n	800bf4c <_svfiprintf_r+0x54>
 800bf58:	ebba 0b04 	subs.w	fp, sl, r4
 800bf5c:	d00b      	beq.n	800bf76 <_svfiprintf_r+0x7e>
 800bf5e:	465b      	mov	r3, fp
 800bf60:	4622      	mov	r2, r4
 800bf62:	4629      	mov	r1, r5
 800bf64:	4638      	mov	r0, r7
 800bf66:	f7ff ff6b 	bl	800be40 <__ssputs_r>
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	f000 80a7 	beq.w	800c0be <_svfiprintf_r+0x1c6>
 800bf70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf72:	445a      	add	r2, fp
 800bf74:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf76:	f89a 3000 	ldrb.w	r3, [sl]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 809f 	beq.w	800c0be <_svfiprintf_r+0x1c6>
 800bf80:	2300      	movs	r3, #0
 800bf82:	f04f 32ff 	mov.w	r2, #4294967295
 800bf86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf8a:	f10a 0a01 	add.w	sl, sl, #1
 800bf8e:	9304      	str	r3, [sp, #16]
 800bf90:	9307      	str	r3, [sp, #28]
 800bf92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf96:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf98:	4654      	mov	r4, sl
 800bf9a:	2205      	movs	r2, #5
 800bf9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfa0:	484e      	ldr	r0, [pc, #312]	@ (800c0dc <_svfiprintf_r+0x1e4>)
 800bfa2:	f7f4 f99d 	bl	80002e0 <memchr>
 800bfa6:	9a04      	ldr	r2, [sp, #16]
 800bfa8:	b9d8      	cbnz	r0, 800bfe2 <_svfiprintf_r+0xea>
 800bfaa:	06d0      	lsls	r0, r2, #27
 800bfac:	bf44      	itt	mi
 800bfae:	2320      	movmi	r3, #32
 800bfb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfb4:	0711      	lsls	r1, r2, #28
 800bfb6:	bf44      	itt	mi
 800bfb8:	232b      	movmi	r3, #43	@ 0x2b
 800bfba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfbe:	f89a 3000 	ldrb.w	r3, [sl]
 800bfc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc4:	d015      	beq.n	800bff2 <_svfiprintf_r+0xfa>
 800bfc6:	9a07      	ldr	r2, [sp, #28]
 800bfc8:	4654      	mov	r4, sl
 800bfca:	2000      	movs	r0, #0
 800bfcc:	f04f 0c0a 	mov.w	ip, #10
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfd6:	3b30      	subs	r3, #48	@ 0x30
 800bfd8:	2b09      	cmp	r3, #9
 800bfda:	d94b      	bls.n	800c074 <_svfiprintf_r+0x17c>
 800bfdc:	b1b0      	cbz	r0, 800c00c <_svfiprintf_r+0x114>
 800bfde:	9207      	str	r2, [sp, #28]
 800bfe0:	e014      	b.n	800c00c <_svfiprintf_r+0x114>
 800bfe2:	eba0 0308 	sub.w	r3, r0, r8
 800bfe6:	fa09 f303 	lsl.w	r3, r9, r3
 800bfea:	4313      	orrs	r3, r2
 800bfec:	9304      	str	r3, [sp, #16]
 800bfee:	46a2      	mov	sl, r4
 800bff0:	e7d2      	b.n	800bf98 <_svfiprintf_r+0xa0>
 800bff2:	9b03      	ldr	r3, [sp, #12]
 800bff4:	1d19      	adds	r1, r3, #4
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	9103      	str	r1, [sp, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	bfbb      	ittet	lt
 800bffe:	425b      	neglt	r3, r3
 800c000:	f042 0202 	orrlt.w	r2, r2, #2
 800c004:	9307      	strge	r3, [sp, #28]
 800c006:	9307      	strlt	r3, [sp, #28]
 800c008:	bfb8      	it	lt
 800c00a:	9204      	strlt	r2, [sp, #16]
 800c00c:	7823      	ldrb	r3, [r4, #0]
 800c00e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c010:	d10a      	bne.n	800c028 <_svfiprintf_r+0x130>
 800c012:	7863      	ldrb	r3, [r4, #1]
 800c014:	2b2a      	cmp	r3, #42	@ 0x2a
 800c016:	d132      	bne.n	800c07e <_svfiprintf_r+0x186>
 800c018:	9b03      	ldr	r3, [sp, #12]
 800c01a:	1d1a      	adds	r2, r3, #4
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	9203      	str	r2, [sp, #12]
 800c020:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c024:	3402      	adds	r4, #2
 800c026:	9305      	str	r3, [sp, #20]
 800c028:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0ec <_svfiprintf_r+0x1f4>
 800c02c:	7821      	ldrb	r1, [r4, #0]
 800c02e:	2203      	movs	r2, #3
 800c030:	4650      	mov	r0, sl
 800c032:	f7f4 f955 	bl	80002e0 <memchr>
 800c036:	b138      	cbz	r0, 800c048 <_svfiprintf_r+0x150>
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	eba0 000a 	sub.w	r0, r0, sl
 800c03e:	2240      	movs	r2, #64	@ 0x40
 800c040:	4082      	lsls	r2, r0
 800c042:	4313      	orrs	r3, r2
 800c044:	3401      	adds	r4, #1
 800c046:	9304      	str	r3, [sp, #16]
 800c048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c04c:	4824      	ldr	r0, [pc, #144]	@ (800c0e0 <_svfiprintf_r+0x1e8>)
 800c04e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c052:	2206      	movs	r2, #6
 800c054:	f7f4 f944 	bl	80002e0 <memchr>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d036      	beq.n	800c0ca <_svfiprintf_r+0x1d2>
 800c05c:	4b21      	ldr	r3, [pc, #132]	@ (800c0e4 <_svfiprintf_r+0x1ec>)
 800c05e:	bb1b      	cbnz	r3, 800c0a8 <_svfiprintf_r+0x1b0>
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	3307      	adds	r3, #7
 800c064:	f023 0307 	bic.w	r3, r3, #7
 800c068:	3308      	adds	r3, #8
 800c06a:	9303      	str	r3, [sp, #12]
 800c06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06e:	4433      	add	r3, r6
 800c070:	9309      	str	r3, [sp, #36]	@ 0x24
 800c072:	e76a      	b.n	800bf4a <_svfiprintf_r+0x52>
 800c074:	fb0c 3202 	mla	r2, ip, r2, r3
 800c078:	460c      	mov	r4, r1
 800c07a:	2001      	movs	r0, #1
 800c07c:	e7a8      	b.n	800bfd0 <_svfiprintf_r+0xd8>
 800c07e:	2300      	movs	r3, #0
 800c080:	3401      	adds	r4, #1
 800c082:	9305      	str	r3, [sp, #20]
 800c084:	4619      	mov	r1, r3
 800c086:	f04f 0c0a 	mov.w	ip, #10
 800c08a:	4620      	mov	r0, r4
 800c08c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c090:	3a30      	subs	r2, #48	@ 0x30
 800c092:	2a09      	cmp	r2, #9
 800c094:	d903      	bls.n	800c09e <_svfiprintf_r+0x1a6>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d0c6      	beq.n	800c028 <_svfiprintf_r+0x130>
 800c09a:	9105      	str	r1, [sp, #20]
 800c09c:	e7c4      	b.n	800c028 <_svfiprintf_r+0x130>
 800c09e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e7f0      	b.n	800c08a <_svfiprintf_r+0x192>
 800c0a8:	ab03      	add	r3, sp, #12
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e8 <_svfiprintf_r+0x1f0>)
 800c0b0:	a904      	add	r1, sp, #16
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7fd ff00 	bl	8009eb8 <_printf_float>
 800c0b8:	1c42      	adds	r2, r0, #1
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	d1d6      	bne.n	800c06c <_svfiprintf_r+0x174>
 800c0be:	89ab      	ldrh	r3, [r5, #12]
 800c0c0:	065b      	lsls	r3, r3, #25
 800c0c2:	f53f af2d 	bmi.w	800bf20 <_svfiprintf_r+0x28>
 800c0c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0c8:	e72c      	b.n	800bf24 <_svfiprintf_r+0x2c>
 800c0ca:	ab03      	add	r3, sp, #12
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	462a      	mov	r2, r5
 800c0d0:	4b05      	ldr	r3, [pc, #20]	@ (800c0e8 <_svfiprintf_r+0x1f0>)
 800c0d2:	a904      	add	r1, sp, #16
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f7fe f977 	bl	800a3c8 <_printf_i>
 800c0da:	e7ed      	b.n	800c0b8 <_svfiprintf_r+0x1c0>
 800c0dc:	0800ecb8 	.word	0x0800ecb8
 800c0e0:	0800ecc2 	.word	0x0800ecc2
 800c0e4:	08009eb9 	.word	0x08009eb9
 800c0e8:	0800be41 	.word	0x0800be41
 800c0ec:	0800ecbe 	.word	0x0800ecbe

0800c0f0 <__sflush_r>:
 800c0f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f8:	0716      	lsls	r6, r2, #28
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	d454      	bmi.n	800c1aa <__sflush_r+0xba>
 800c100:	684b      	ldr	r3, [r1, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dc02      	bgt.n	800c10c <__sflush_r+0x1c>
 800c106:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dd48      	ble.n	800c19e <__sflush_r+0xae>
 800c10c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c10e:	2e00      	cmp	r6, #0
 800c110:	d045      	beq.n	800c19e <__sflush_r+0xae>
 800c112:	2300      	movs	r3, #0
 800c114:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c118:	682f      	ldr	r7, [r5, #0]
 800c11a:	6a21      	ldr	r1, [r4, #32]
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	d030      	beq.n	800c182 <__sflush_r+0x92>
 800c120:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	0759      	lsls	r1, r3, #29
 800c126:	d505      	bpl.n	800c134 <__sflush_r+0x44>
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	1ad2      	subs	r2, r2, r3
 800c12c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c12e:	b10b      	cbz	r3, 800c134 <__sflush_r+0x44>
 800c130:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c132:	1ad2      	subs	r2, r2, r3
 800c134:	2300      	movs	r3, #0
 800c136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c138:	6a21      	ldr	r1, [r4, #32]
 800c13a:	4628      	mov	r0, r5
 800c13c:	47b0      	blx	r6
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	d106      	bne.n	800c152 <__sflush_r+0x62>
 800c144:	6829      	ldr	r1, [r5, #0]
 800c146:	291d      	cmp	r1, #29
 800c148:	d82b      	bhi.n	800c1a2 <__sflush_r+0xb2>
 800c14a:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f4 <__sflush_r+0x104>)
 800c14c:	410a      	asrs	r2, r1
 800c14e:	07d6      	lsls	r6, r2, #31
 800c150:	d427      	bmi.n	800c1a2 <__sflush_r+0xb2>
 800c152:	2200      	movs	r2, #0
 800c154:	6062      	str	r2, [r4, #4]
 800c156:	04d9      	lsls	r1, r3, #19
 800c158:	6922      	ldr	r2, [r4, #16]
 800c15a:	6022      	str	r2, [r4, #0]
 800c15c:	d504      	bpl.n	800c168 <__sflush_r+0x78>
 800c15e:	1c42      	adds	r2, r0, #1
 800c160:	d101      	bne.n	800c166 <__sflush_r+0x76>
 800c162:	682b      	ldr	r3, [r5, #0]
 800c164:	b903      	cbnz	r3, 800c168 <__sflush_r+0x78>
 800c166:	6560      	str	r0, [r4, #84]	@ 0x54
 800c168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c16a:	602f      	str	r7, [r5, #0]
 800c16c:	b1b9      	cbz	r1, 800c19e <__sflush_r+0xae>
 800c16e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c172:	4299      	cmp	r1, r3
 800c174:	d002      	beq.n	800c17c <__sflush_r+0x8c>
 800c176:	4628      	mov	r0, r5
 800c178:	f7ff f9e0 	bl	800b53c <_free_r>
 800c17c:	2300      	movs	r3, #0
 800c17e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c180:	e00d      	b.n	800c19e <__sflush_r+0xae>
 800c182:	2301      	movs	r3, #1
 800c184:	4628      	mov	r0, r5
 800c186:	47b0      	blx	r6
 800c188:	4602      	mov	r2, r0
 800c18a:	1c50      	adds	r0, r2, #1
 800c18c:	d1c9      	bne.n	800c122 <__sflush_r+0x32>
 800c18e:	682b      	ldr	r3, [r5, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d0c6      	beq.n	800c122 <__sflush_r+0x32>
 800c194:	2b1d      	cmp	r3, #29
 800c196:	d001      	beq.n	800c19c <__sflush_r+0xac>
 800c198:	2b16      	cmp	r3, #22
 800c19a:	d11e      	bne.n	800c1da <__sflush_r+0xea>
 800c19c:	602f      	str	r7, [r5, #0]
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e022      	b.n	800c1e8 <__sflush_r+0xf8>
 800c1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1a6:	b21b      	sxth	r3, r3
 800c1a8:	e01b      	b.n	800c1e2 <__sflush_r+0xf2>
 800c1aa:	690f      	ldr	r7, [r1, #16]
 800c1ac:	2f00      	cmp	r7, #0
 800c1ae:	d0f6      	beq.n	800c19e <__sflush_r+0xae>
 800c1b0:	0793      	lsls	r3, r2, #30
 800c1b2:	680e      	ldr	r6, [r1, #0]
 800c1b4:	bf08      	it	eq
 800c1b6:	694b      	ldreq	r3, [r1, #20]
 800c1b8:	600f      	str	r7, [r1, #0]
 800c1ba:	bf18      	it	ne
 800c1bc:	2300      	movne	r3, #0
 800c1be:	eba6 0807 	sub.w	r8, r6, r7
 800c1c2:	608b      	str	r3, [r1, #8]
 800c1c4:	f1b8 0f00 	cmp.w	r8, #0
 800c1c8:	dde9      	ble.n	800c19e <__sflush_r+0xae>
 800c1ca:	6a21      	ldr	r1, [r4, #32]
 800c1cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1ce:	4643      	mov	r3, r8
 800c1d0:	463a      	mov	r2, r7
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	47b0      	blx	r6
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	dc08      	bgt.n	800c1ec <__sflush_r+0xfc>
 800c1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1e2:	81a3      	strh	r3, [r4, #12]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ec:	4407      	add	r7, r0
 800c1ee:	eba8 0800 	sub.w	r8, r8, r0
 800c1f2:	e7e7      	b.n	800c1c4 <__sflush_r+0xd4>
 800c1f4:	dfbffffe 	.word	0xdfbffffe

0800c1f8 <_fflush_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	690b      	ldr	r3, [r1, #16]
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	b913      	cbnz	r3, 800c208 <_fflush_r+0x10>
 800c202:	2500      	movs	r5, #0
 800c204:	4628      	mov	r0, r5
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	b118      	cbz	r0, 800c212 <_fflush_r+0x1a>
 800c20a:	6a03      	ldr	r3, [r0, #32]
 800c20c:	b90b      	cbnz	r3, 800c212 <_fflush_r+0x1a>
 800c20e:	f7fe fa87 	bl	800a720 <__sinit>
 800c212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0f3      	beq.n	800c202 <_fflush_r+0xa>
 800c21a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c21c:	07d0      	lsls	r0, r2, #31
 800c21e:	d404      	bmi.n	800c22a <_fflush_r+0x32>
 800c220:	0599      	lsls	r1, r3, #22
 800c222:	d402      	bmi.n	800c22a <_fflush_r+0x32>
 800c224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c226:	f7fe fba6 	bl	800a976 <__retarget_lock_acquire_recursive>
 800c22a:	4628      	mov	r0, r5
 800c22c:	4621      	mov	r1, r4
 800c22e:	f7ff ff5f 	bl	800c0f0 <__sflush_r>
 800c232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c234:	07da      	lsls	r2, r3, #31
 800c236:	4605      	mov	r5, r0
 800c238:	d4e4      	bmi.n	800c204 <_fflush_r+0xc>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	059b      	lsls	r3, r3, #22
 800c23e:	d4e1      	bmi.n	800c204 <_fflush_r+0xc>
 800c240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c242:	f7fe fb99 	bl	800a978 <__retarget_lock_release_recursive>
 800c246:	e7dd      	b.n	800c204 <_fflush_r+0xc>

0800c248 <memmove>:
 800c248:	4288      	cmp	r0, r1
 800c24a:	b510      	push	{r4, lr}
 800c24c:	eb01 0402 	add.w	r4, r1, r2
 800c250:	d902      	bls.n	800c258 <memmove+0x10>
 800c252:	4284      	cmp	r4, r0
 800c254:	4623      	mov	r3, r4
 800c256:	d807      	bhi.n	800c268 <memmove+0x20>
 800c258:	1e43      	subs	r3, r0, #1
 800c25a:	42a1      	cmp	r1, r4
 800c25c:	d008      	beq.n	800c270 <memmove+0x28>
 800c25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c266:	e7f8      	b.n	800c25a <memmove+0x12>
 800c268:	4402      	add	r2, r0
 800c26a:	4601      	mov	r1, r0
 800c26c:	428a      	cmp	r2, r1
 800c26e:	d100      	bne.n	800c272 <memmove+0x2a>
 800c270:	bd10      	pop	{r4, pc}
 800c272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c27a:	e7f7      	b.n	800c26c <memmove+0x24>

0800c27c <_sbrk_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d06      	ldr	r5, [pc, #24]	@ (800c298 <_sbrk_r+0x1c>)
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	4608      	mov	r0, r1
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	f7f7 fd16 	bl	8003cb8 <_sbrk>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_sbrk_r+0x1a>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_sbrk_r+0x1a>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	240012d4 	.word	0x240012d4

0800c29c <memcpy>:
 800c29c:	440a      	add	r2, r1
 800c29e:	4291      	cmp	r1, r2
 800c2a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2a4:	d100      	bne.n	800c2a8 <memcpy+0xc>
 800c2a6:	4770      	bx	lr
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2b2:	4291      	cmp	r1, r2
 800c2b4:	d1f9      	bne.n	800c2aa <memcpy+0xe>
 800c2b6:	bd10      	pop	{r4, pc}

0800c2b8 <__assert_func>:
 800c2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2ba:	4614      	mov	r4, r2
 800c2bc:	461a      	mov	r2, r3
 800c2be:	4b09      	ldr	r3, [pc, #36]	@ (800c2e4 <__assert_func+0x2c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	68d8      	ldr	r0, [r3, #12]
 800c2c6:	b954      	cbnz	r4, 800c2de <__assert_func+0x26>
 800c2c8:	4b07      	ldr	r3, [pc, #28]	@ (800c2e8 <__assert_func+0x30>)
 800c2ca:	461c      	mov	r4, r3
 800c2cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2d0:	9100      	str	r1, [sp, #0]
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	4905      	ldr	r1, [pc, #20]	@ (800c2ec <__assert_func+0x34>)
 800c2d6:	f000 f86f 	bl	800c3b8 <fiprintf>
 800c2da:	f000 f87f 	bl	800c3dc <abort>
 800c2de:	4b04      	ldr	r3, [pc, #16]	@ (800c2f0 <__assert_func+0x38>)
 800c2e0:	e7f4      	b.n	800c2cc <__assert_func+0x14>
 800c2e2:	bf00      	nop
 800c2e4:	24000070 	.word	0x24000070
 800c2e8:	0800ed0e 	.word	0x0800ed0e
 800c2ec:	0800ece0 	.word	0x0800ece0
 800c2f0:	0800ecd3 	.word	0x0800ecd3

0800c2f4 <_calloc_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	fba1 5402 	umull	r5, r4, r1, r2
 800c2fa:	b93c      	cbnz	r4, 800c30c <_calloc_r+0x18>
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7ff f991 	bl	800b624 <_malloc_r>
 800c302:	4606      	mov	r6, r0
 800c304:	b928      	cbnz	r0, 800c312 <_calloc_r+0x1e>
 800c306:	2600      	movs	r6, #0
 800c308:	4630      	mov	r0, r6
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	220c      	movs	r2, #12
 800c30e:	6002      	str	r2, [r0, #0]
 800c310:	e7f9      	b.n	800c306 <_calloc_r+0x12>
 800c312:	462a      	mov	r2, r5
 800c314:	4621      	mov	r1, r4
 800c316:	f7fe fab0 	bl	800a87a <memset>
 800c31a:	e7f5      	b.n	800c308 <_calloc_r+0x14>

0800c31c <__ascii_mbtowc>:
 800c31c:	b082      	sub	sp, #8
 800c31e:	b901      	cbnz	r1, 800c322 <__ascii_mbtowc+0x6>
 800c320:	a901      	add	r1, sp, #4
 800c322:	b142      	cbz	r2, 800c336 <__ascii_mbtowc+0x1a>
 800c324:	b14b      	cbz	r3, 800c33a <__ascii_mbtowc+0x1e>
 800c326:	7813      	ldrb	r3, [r2, #0]
 800c328:	600b      	str	r3, [r1, #0]
 800c32a:	7812      	ldrb	r2, [r2, #0]
 800c32c:	1e10      	subs	r0, r2, #0
 800c32e:	bf18      	it	ne
 800c330:	2001      	movne	r0, #1
 800c332:	b002      	add	sp, #8
 800c334:	4770      	bx	lr
 800c336:	4610      	mov	r0, r2
 800c338:	e7fb      	b.n	800c332 <__ascii_mbtowc+0x16>
 800c33a:	f06f 0001 	mvn.w	r0, #1
 800c33e:	e7f8      	b.n	800c332 <__ascii_mbtowc+0x16>

0800c340 <_realloc_r>:
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	4680      	mov	r8, r0
 800c346:	4615      	mov	r5, r2
 800c348:	460c      	mov	r4, r1
 800c34a:	b921      	cbnz	r1, 800c356 <_realloc_r+0x16>
 800c34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c350:	4611      	mov	r1, r2
 800c352:	f7ff b967 	b.w	800b624 <_malloc_r>
 800c356:	b92a      	cbnz	r2, 800c364 <_realloc_r+0x24>
 800c358:	f7ff f8f0 	bl	800b53c <_free_r>
 800c35c:	2400      	movs	r4, #0
 800c35e:	4620      	mov	r0, r4
 800c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c364:	f000 f841 	bl	800c3ea <_malloc_usable_size_r>
 800c368:	4285      	cmp	r5, r0
 800c36a:	4606      	mov	r6, r0
 800c36c:	d802      	bhi.n	800c374 <_realloc_r+0x34>
 800c36e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c372:	d8f4      	bhi.n	800c35e <_realloc_r+0x1e>
 800c374:	4629      	mov	r1, r5
 800c376:	4640      	mov	r0, r8
 800c378:	f7ff f954 	bl	800b624 <_malloc_r>
 800c37c:	4607      	mov	r7, r0
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0ec      	beq.n	800c35c <_realloc_r+0x1c>
 800c382:	42b5      	cmp	r5, r6
 800c384:	462a      	mov	r2, r5
 800c386:	4621      	mov	r1, r4
 800c388:	bf28      	it	cs
 800c38a:	4632      	movcs	r2, r6
 800c38c:	f7ff ff86 	bl	800c29c <memcpy>
 800c390:	4621      	mov	r1, r4
 800c392:	4640      	mov	r0, r8
 800c394:	f7ff f8d2 	bl	800b53c <_free_r>
 800c398:	463c      	mov	r4, r7
 800c39a:	e7e0      	b.n	800c35e <_realloc_r+0x1e>

0800c39c <__ascii_wctomb>:
 800c39c:	4603      	mov	r3, r0
 800c39e:	4608      	mov	r0, r1
 800c3a0:	b141      	cbz	r1, 800c3b4 <__ascii_wctomb+0x18>
 800c3a2:	2aff      	cmp	r2, #255	@ 0xff
 800c3a4:	d904      	bls.n	800c3b0 <__ascii_wctomb+0x14>
 800c3a6:	228a      	movs	r2, #138	@ 0x8a
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ae:	4770      	bx	lr
 800c3b0:	700a      	strb	r2, [r1, #0]
 800c3b2:	2001      	movs	r0, #1
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <fiprintf>:
 800c3b8:	b40e      	push	{r1, r2, r3}
 800c3ba:	b503      	push	{r0, r1, lr}
 800c3bc:	4601      	mov	r1, r0
 800c3be:	ab03      	add	r3, sp, #12
 800c3c0:	4805      	ldr	r0, [pc, #20]	@ (800c3d8 <fiprintf+0x20>)
 800c3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c6:	6800      	ldr	r0, [r0, #0]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	f000 f83f 	bl	800c44c <_vfiprintf_r>
 800c3ce:	b002      	add	sp, #8
 800c3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3d4:	b003      	add	sp, #12
 800c3d6:	4770      	bx	lr
 800c3d8:	24000070 	.word	0x24000070

0800c3dc <abort>:
 800c3dc:	b508      	push	{r3, lr}
 800c3de:	2006      	movs	r0, #6
 800c3e0:	f000 fa08 	bl	800c7f4 <raise>
 800c3e4:	2001      	movs	r0, #1
 800c3e6:	f7f7 fbee 	bl	8003bc6 <_exit>

0800c3ea <_malloc_usable_size_r>:
 800c3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ee:	1f18      	subs	r0, r3, #4
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	bfbc      	itt	lt
 800c3f4:	580b      	ldrlt	r3, [r1, r0]
 800c3f6:	18c0      	addlt	r0, r0, r3
 800c3f8:	4770      	bx	lr

0800c3fa <__sfputc_r>:
 800c3fa:	6893      	ldr	r3, [r2, #8]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	b410      	push	{r4}
 800c402:	6093      	str	r3, [r2, #8]
 800c404:	da08      	bge.n	800c418 <__sfputc_r+0x1e>
 800c406:	6994      	ldr	r4, [r2, #24]
 800c408:	42a3      	cmp	r3, r4
 800c40a:	db01      	blt.n	800c410 <__sfputc_r+0x16>
 800c40c:	290a      	cmp	r1, #10
 800c40e:	d103      	bne.n	800c418 <__sfputc_r+0x1e>
 800c410:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c414:	f000 b932 	b.w	800c67c <__swbuf_r>
 800c418:	6813      	ldr	r3, [r2, #0]
 800c41a:	1c58      	adds	r0, r3, #1
 800c41c:	6010      	str	r0, [r2, #0]
 800c41e:	7019      	strb	r1, [r3, #0]
 800c420:	4608      	mov	r0, r1
 800c422:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <__sfputs_r>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	4606      	mov	r6, r0
 800c42c:	460f      	mov	r7, r1
 800c42e:	4614      	mov	r4, r2
 800c430:	18d5      	adds	r5, r2, r3
 800c432:	42ac      	cmp	r4, r5
 800c434:	d101      	bne.n	800c43a <__sfputs_r+0x12>
 800c436:	2000      	movs	r0, #0
 800c438:	e007      	b.n	800c44a <__sfputs_r+0x22>
 800c43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43e:	463a      	mov	r2, r7
 800c440:	4630      	mov	r0, r6
 800c442:	f7ff ffda 	bl	800c3fa <__sfputc_r>
 800c446:	1c43      	adds	r3, r0, #1
 800c448:	d1f3      	bne.n	800c432 <__sfputs_r+0xa>
 800c44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c44c <_vfiprintf_r>:
 800c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	460d      	mov	r5, r1
 800c452:	b09d      	sub	sp, #116	@ 0x74
 800c454:	4614      	mov	r4, r2
 800c456:	4698      	mov	r8, r3
 800c458:	4606      	mov	r6, r0
 800c45a:	b118      	cbz	r0, 800c464 <_vfiprintf_r+0x18>
 800c45c:	6a03      	ldr	r3, [r0, #32]
 800c45e:	b90b      	cbnz	r3, 800c464 <_vfiprintf_r+0x18>
 800c460:	f7fe f95e 	bl	800a720 <__sinit>
 800c464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c466:	07d9      	lsls	r1, r3, #31
 800c468:	d405      	bmi.n	800c476 <_vfiprintf_r+0x2a>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	059a      	lsls	r2, r3, #22
 800c46e:	d402      	bmi.n	800c476 <_vfiprintf_r+0x2a>
 800c470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c472:	f7fe fa80 	bl	800a976 <__retarget_lock_acquire_recursive>
 800c476:	89ab      	ldrh	r3, [r5, #12]
 800c478:	071b      	lsls	r3, r3, #28
 800c47a:	d501      	bpl.n	800c480 <_vfiprintf_r+0x34>
 800c47c:	692b      	ldr	r3, [r5, #16]
 800c47e:	b99b      	cbnz	r3, 800c4a8 <_vfiprintf_r+0x5c>
 800c480:	4629      	mov	r1, r5
 800c482:	4630      	mov	r0, r6
 800c484:	f000 f938 	bl	800c6f8 <__swsetup_r>
 800c488:	b170      	cbz	r0, 800c4a8 <_vfiprintf_r+0x5c>
 800c48a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c48c:	07dc      	lsls	r4, r3, #31
 800c48e:	d504      	bpl.n	800c49a <_vfiprintf_r+0x4e>
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	b01d      	add	sp, #116	@ 0x74
 800c496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49a:	89ab      	ldrh	r3, [r5, #12]
 800c49c:	0598      	lsls	r0, r3, #22
 800c49e:	d4f7      	bmi.n	800c490 <_vfiprintf_r+0x44>
 800c4a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4a2:	f7fe fa69 	bl	800a978 <__retarget_lock_release_recursive>
 800c4a6:	e7f3      	b.n	800c490 <_vfiprintf_r+0x44>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ac:	2320      	movs	r3, #32
 800c4ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b6:	2330      	movs	r3, #48	@ 0x30
 800c4b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c668 <_vfiprintf_r+0x21c>
 800c4bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4c0:	f04f 0901 	mov.w	r9, #1
 800c4c4:	4623      	mov	r3, r4
 800c4c6:	469a      	mov	sl, r3
 800c4c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4cc:	b10a      	cbz	r2, 800c4d2 <_vfiprintf_r+0x86>
 800c4ce:	2a25      	cmp	r2, #37	@ 0x25
 800c4d0:	d1f9      	bne.n	800c4c6 <_vfiprintf_r+0x7a>
 800c4d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d6:	d00b      	beq.n	800c4f0 <_vfiprintf_r+0xa4>
 800c4d8:	465b      	mov	r3, fp
 800c4da:	4622      	mov	r2, r4
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7ff ffa2 	bl	800c428 <__sfputs_r>
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	f000 80a7 	beq.w	800c638 <_vfiprintf_r+0x1ec>
 800c4ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4ec:	445a      	add	r2, fp
 800c4ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 809f 	beq.w	800c638 <_vfiprintf_r+0x1ec>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c504:	f10a 0a01 	add.w	sl, sl, #1
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	9307      	str	r3, [sp, #28]
 800c50c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c510:	931a      	str	r3, [sp, #104]	@ 0x68
 800c512:	4654      	mov	r4, sl
 800c514:	2205      	movs	r2, #5
 800c516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c51a:	4853      	ldr	r0, [pc, #332]	@ (800c668 <_vfiprintf_r+0x21c>)
 800c51c:	f7f3 fee0 	bl	80002e0 <memchr>
 800c520:	9a04      	ldr	r2, [sp, #16]
 800c522:	b9d8      	cbnz	r0, 800c55c <_vfiprintf_r+0x110>
 800c524:	06d1      	lsls	r1, r2, #27
 800c526:	bf44      	itt	mi
 800c528:	2320      	movmi	r3, #32
 800c52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c52e:	0713      	lsls	r3, r2, #28
 800c530:	bf44      	itt	mi
 800c532:	232b      	movmi	r3, #43	@ 0x2b
 800c534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c538:	f89a 3000 	ldrb.w	r3, [sl]
 800c53c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c53e:	d015      	beq.n	800c56c <_vfiprintf_r+0x120>
 800c540:	9a07      	ldr	r2, [sp, #28]
 800c542:	4654      	mov	r4, sl
 800c544:	2000      	movs	r0, #0
 800c546:	f04f 0c0a 	mov.w	ip, #10
 800c54a:	4621      	mov	r1, r4
 800c54c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c550:	3b30      	subs	r3, #48	@ 0x30
 800c552:	2b09      	cmp	r3, #9
 800c554:	d94b      	bls.n	800c5ee <_vfiprintf_r+0x1a2>
 800c556:	b1b0      	cbz	r0, 800c586 <_vfiprintf_r+0x13a>
 800c558:	9207      	str	r2, [sp, #28]
 800c55a:	e014      	b.n	800c586 <_vfiprintf_r+0x13a>
 800c55c:	eba0 0308 	sub.w	r3, r0, r8
 800c560:	fa09 f303 	lsl.w	r3, r9, r3
 800c564:	4313      	orrs	r3, r2
 800c566:	9304      	str	r3, [sp, #16]
 800c568:	46a2      	mov	sl, r4
 800c56a:	e7d2      	b.n	800c512 <_vfiprintf_r+0xc6>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	1d19      	adds	r1, r3, #4
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	9103      	str	r1, [sp, #12]
 800c574:	2b00      	cmp	r3, #0
 800c576:	bfbb      	ittet	lt
 800c578:	425b      	neglt	r3, r3
 800c57a:	f042 0202 	orrlt.w	r2, r2, #2
 800c57e:	9307      	strge	r3, [sp, #28]
 800c580:	9307      	strlt	r3, [sp, #28]
 800c582:	bfb8      	it	lt
 800c584:	9204      	strlt	r2, [sp, #16]
 800c586:	7823      	ldrb	r3, [r4, #0]
 800c588:	2b2e      	cmp	r3, #46	@ 0x2e
 800c58a:	d10a      	bne.n	800c5a2 <_vfiprintf_r+0x156>
 800c58c:	7863      	ldrb	r3, [r4, #1]
 800c58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c590:	d132      	bne.n	800c5f8 <_vfiprintf_r+0x1ac>
 800c592:	9b03      	ldr	r3, [sp, #12]
 800c594:	1d1a      	adds	r2, r3, #4
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	9203      	str	r2, [sp, #12]
 800c59a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c59e:	3402      	adds	r4, #2
 800c5a0:	9305      	str	r3, [sp, #20]
 800c5a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c678 <_vfiprintf_r+0x22c>
 800c5a6:	7821      	ldrb	r1, [r4, #0]
 800c5a8:	2203      	movs	r2, #3
 800c5aa:	4650      	mov	r0, sl
 800c5ac:	f7f3 fe98 	bl	80002e0 <memchr>
 800c5b0:	b138      	cbz	r0, 800c5c2 <_vfiprintf_r+0x176>
 800c5b2:	9b04      	ldr	r3, [sp, #16]
 800c5b4:	eba0 000a 	sub.w	r0, r0, sl
 800c5b8:	2240      	movs	r2, #64	@ 0x40
 800c5ba:	4082      	lsls	r2, r0
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	3401      	adds	r4, #1
 800c5c0:	9304      	str	r3, [sp, #16]
 800c5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c6:	4829      	ldr	r0, [pc, #164]	@ (800c66c <_vfiprintf_r+0x220>)
 800c5c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5cc:	2206      	movs	r2, #6
 800c5ce:	f7f3 fe87 	bl	80002e0 <memchr>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d03f      	beq.n	800c656 <_vfiprintf_r+0x20a>
 800c5d6:	4b26      	ldr	r3, [pc, #152]	@ (800c670 <_vfiprintf_r+0x224>)
 800c5d8:	bb1b      	cbnz	r3, 800c622 <_vfiprintf_r+0x1d6>
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	3307      	adds	r3, #7
 800c5de:	f023 0307 	bic.w	r3, r3, #7
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	9303      	str	r3, [sp, #12]
 800c5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e8:	443b      	add	r3, r7
 800c5ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ec:	e76a      	b.n	800c4c4 <_vfiprintf_r+0x78>
 800c5ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	e7a8      	b.n	800c54a <_vfiprintf_r+0xfe>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	3401      	adds	r4, #1
 800c5fc:	9305      	str	r3, [sp, #20]
 800c5fe:	4619      	mov	r1, r3
 800c600:	f04f 0c0a 	mov.w	ip, #10
 800c604:	4620      	mov	r0, r4
 800c606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c60a:	3a30      	subs	r2, #48	@ 0x30
 800c60c:	2a09      	cmp	r2, #9
 800c60e:	d903      	bls.n	800c618 <_vfiprintf_r+0x1cc>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d0c6      	beq.n	800c5a2 <_vfiprintf_r+0x156>
 800c614:	9105      	str	r1, [sp, #20]
 800c616:	e7c4      	b.n	800c5a2 <_vfiprintf_r+0x156>
 800c618:	fb0c 2101 	mla	r1, ip, r1, r2
 800c61c:	4604      	mov	r4, r0
 800c61e:	2301      	movs	r3, #1
 800c620:	e7f0      	b.n	800c604 <_vfiprintf_r+0x1b8>
 800c622:	ab03      	add	r3, sp, #12
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	462a      	mov	r2, r5
 800c628:	4b12      	ldr	r3, [pc, #72]	@ (800c674 <_vfiprintf_r+0x228>)
 800c62a:	a904      	add	r1, sp, #16
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7fd fc43 	bl	8009eb8 <_printf_float>
 800c632:	4607      	mov	r7, r0
 800c634:	1c78      	adds	r0, r7, #1
 800c636:	d1d6      	bne.n	800c5e6 <_vfiprintf_r+0x19a>
 800c638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c63a:	07d9      	lsls	r1, r3, #31
 800c63c:	d405      	bmi.n	800c64a <_vfiprintf_r+0x1fe>
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	059a      	lsls	r2, r3, #22
 800c642:	d402      	bmi.n	800c64a <_vfiprintf_r+0x1fe>
 800c644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c646:	f7fe f997 	bl	800a978 <__retarget_lock_release_recursive>
 800c64a:	89ab      	ldrh	r3, [r5, #12]
 800c64c:	065b      	lsls	r3, r3, #25
 800c64e:	f53f af1f 	bmi.w	800c490 <_vfiprintf_r+0x44>
 800c652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c654:	e71e      	b.n	800c494 <_vfiprintf_r+0x48>
 800c656:	ab03      	add	r3, sp, #12
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	462a      	mov	r2, r5
 800c65c:	4b05      	ldr	r3, [pc, #20]	@ (800c674 <_vfiprintf_r+0x228>)
 800c65e:	a904      	add	r1, sp, #16
 800c660:	4630      	mov	r0, r6
 800c662:	f7fd feb1 	bl	800a3c8 <_printf_i>
 800c666:	e7e4      	b.n	800c632 <_vfiprintf_r+0x1e6>
 800c668:	0800ecb8 	.word	0x0800ecb8
 800c66c:	0800ecc2 	.word	0x0800ecc2
 800c670:	08009eb9 	.word	0x08009eb9
 800c674:	0800c429 	.word	0x0800c429
 800c678:	0800ecbe 	.word	0x0800ecbe

0800c67c <__swbuf_r>:
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	460e      	mov	r6, r1
 800c680:	4614      	mov	r4, r2
 800c682:	4605      	mov	r5, r0
 800c684:	b118      	cbz	r0, 800c68e <__swbuf_r+0x12>
 800c686:	6a03      	ldr	r3, [r0, #32]
 800c688:	b90b      	cbnz	r3, 800c68e <__swbuf_r+0x12>
 800c68a:	f7fe f849 	bl	800a720 <__sinit>
 800c68e:	69a3      	ldr	r3, [r4, #24]
 800c690:	60a3      	str	r3, [r4, #8]
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	071a      	lsls	r2, r3, #28
 800c696:	d501      	bpl.n	800c69c <__swbuf_r+0x20>
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	b943      	cbnz	r3, 800c6ae <__swbuf_r+0x32>
 800c69c:	4621      	mov	r1, r4
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f82a 	bl	800c6f8 <__swsetup_r>
 800c6a4:	b118      	cbz	r0, 800c6ae <__swbuf_r+0x32>
 800c6a6:	f04f 37ff 	mov.w	r7, #4294967295
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	6922      	ldr	r2, [r4, #16]
 800c6b2:	1a98      	subs	r0, r3, r2
 800c6b4:	6963      	ldr	r3, [r4, #20]
 800c6b6:	b2f6      	uxtb	r6, r6
 800c6b8:	4283      	cmp	r3, r0
 800c6ba:	4637      	mov	r7, r6
 800c6bc:	dc05      	bgt.n	800c6ca <__swbuf_r+0x4e>
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f7ff fd99 	bl	800c1f8 <_fflush_r>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1ed      	bne.n	800c6a6 <__swbuf_r+0x2a>
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	60a3      	str	r3, [r4, #8]
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	6022      	str	r2, [r4, #0]
 800c6d6:	701e      	strb	r6, [r3, #0]
 800c6d8:	6962      	ldr	r2, [r4, #20]
 800c6da:	1c43      	adds	r3, r0, #1
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d004      	beq.n	800c6ea <__swbuf_r+0x6e>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	07db      	lsls	r3, r3, #31
 800c6e4:	d5e1      	bpl.n	800c6aa <__swbuf_r+0x2e>
 800c6e6:	2e0a      	cmp	r6, #10
 800c6e8:	d1df      	bne.n	800c6aa <__swbuf_r+0x2e>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7ff fd83 	bl	800c1f8 <_fflush_r>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d0d9      	beq.n	800c6aa <__swbuf_r+0x2e>
 800c6f6:	e7d6      	b.n	800c6a6 <__swbuf_r+0x2a>

0800c6f8 <__swsetup_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4b29      	ldr	r3, [pc, #164]	@ (800c7a0 <__swsetup_r+0xa8>)
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	460c      	mov	r4, r1
 800c702:	b118      	cbz	r0, 800c70c <__swsetup_r+0x14>
 800c704:	6a03      	ldr	r3, [r0, #32]
 800c706:	b90b      	cbnz	r3, 800c70c <__swsetup_r+0x14>
 800c708:	f7fe f80a 	bl	800a720 <__sinit>
 800c70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c710:	0719      	lsls	r1, r3, #28
 800c712:	d422      	bmi.n	800c75a <__swsetup_r+0x62>
 800c714:	06da      	lsls	r2, r3, #27
 800c716:	d407      	bmi.n	800c728 <__swsetup_r+0x30>
 800c718:	2209      	movs	r2, #9
 800c71a:	602a      	str	r2, [r5, #0]
 800c71c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c720:	81a3      	strh	r3, [r4, #12]
 800c722:	f04f 30ff 	mov.w	r0, #4294967295
 800c726:	e033      	b.n	800c790 <__swsetup_r+0x98>
 800c728:	0758      	lsls	r0, r3, #29
 800c72a:	d512      	bpl.n	800c752 <__swsetup_r+0x5a>
 800c72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c72e:	b141      	cbz	r1, 800c742 <__swsetup_r+0x4a>
 800c730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c734:	4299      	cmp	r1, r3
 800c736:	d002      	beq.n	800c73e <__swsetup_r+0x46>
 800c738:	4628      	mov	r0, r5
 800c73a:	f7fe feff 	bl	800b53c <_free_r>
 800c73e:	2300      	movs	r3, #0
 800c740:	6363      	str	r3, [r4, #52]	@ 0x34
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	2300      	movs	r3, #0
 800c74c:	6063      	str	r3, [r4, #4]
 800c74e:	6923      	ldr	r3, [r4, #16]
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	f043 0308 	orr.w	r3, r3, #8
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	b94b      	cbnz	r3, 800c772 <__swsetup_r+0x7a>
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c768:	d003      	beq.n	800c772 <__swsetup_r+0x7a>
 800c76a:	4621      	mov	r1, r4
 800c76c:	4628      	mov	r0, r5
 800c76e:	f000 f883 	bl	800c878 <__smakebuf_r>
 800c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c776:	f013 0201 	ands.w	r2, r3, #1
 800c77a:	d00a      	beq.n	800c792 <__swsetup_r+0x9a>
 800c77c:	2200      	movs	r2, #0
 800c77e:	60a2      	str	r2, [r4, #8]
 800c780:	6962      	ldr	r2, [r4, #20]
 800c782:	4252      	negs	r2, r2
 800c784:	61a2      	str	r2, [r4, #24]
 800c786:	6922      	ldr	r2, [r4, #16]
 800c788:	b942      	cbnz	r2, 800c79c <__swsetup_r+0xa4>
 800c78a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c78e:	d1c5      	bne.n	800c71c <__swsetup_r+0x24>
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	0799      	lsls	r1, r3, #30
 800c794:	bf58      	it	pl
 800c796:	6962      	ldrpl	r2, [r4, #20]
 800c798:	60a2      	str	r2, [r4, #8]
 800c79a:	e7f4      	b.n	800c786 <__swsetup_r+0x8e>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e7f7      	b.n	800c790 <__swsetup_r+0x98>
 800c7a0:	24000070 	.word	0x24000070

0800c7a4 <_raise_r>:
 800c7a4:	291f      	cmp	r1, #31
 800c7a6:	b538      	push	{r3, r4, r5, lr}
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	d904      	bls.n	800c7b8 <_raise_r+0x14>
 800c7ae:	2316      	movs	r3, #22
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7ba:	b112      	cbz	r2, 800c7c2 <_raise_r+0x1e>
 800c7bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7c0:	b94b      	cbnz	r3, 800c7d6 <_raise_r+0x32>
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f000 f830 	bl	800c828 <_getpid_r>
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7d2:	f000 b817 	b.w	800c804 <_kill_r>
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d00a      	beq.n	800c7f0 <_raise_r+0x4c>
 800c7da:	1c59      	adds	r1, r3, #1
 800c7dc:	d103      	bne.n	800c7e6 <_raise_r+0x42>
 800c7de:	2316      	movs	r3, #22
 800c7e0:	6003      	str	r3, [r0, #0]
 800c7e2:	2001      	movs	r0, #1
 800c7e4:	e7e7      	b.n	800c7b6 <_raise_r+0x12>
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4798      	blx	r3
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	e7e0      	b.n	800c7b6 <_raise_r+0x12>

0800c7f4 <raise>:
 800c7f4:	4b02      	ldr	r3, [pc, #8]	@ (800c800 <raise+0xc>)
 800c7f6:	4601      	mov	r1, r0
 800c7f8:	6818      	ldr	r0, [r3, #0]
 800c7fa:	f7ff bfd3 	b.w	800c7a4 <_raise_r>
 800c7fe:	bf00      	nop
 800c800:	24000070 	.word	0x24000070

0800c804 <_kill_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d07      	ldr	r5, [pc, #28]	@ (800c824 <_kill_r+0x20>)
 800c808:	2300      	movs	r3, #0
 800c80a:	4604      	mov	r4, r0
 800c80c:	4608      	mov	r0, r1
 800c80e:	4611      	mov	r1, r2
 800c810:	602b      	str	r3, [r5, #0]
 800c812:	f7f7 f9c8 	bl	8003ba6 <_kill>
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	d102      	bne.n	800c820 <_kill_r+0x1c>
 800c81a:	682b      	ldr	r3, [r5, #0]
 800c81c:	b103      	cbz	r3, 800c820 <_kill_r+0x1c>
 800c81e:	6023      	str	r3, [r4, #0]
 800c820:	bd38      	pop	{r3, r4, r5, pc}
 800c822:	bf00      	nop
 800c824:	240012d4 	.word	0x240012d4

0800c828 <_getpid_r>:
 800c828:	f7f7 b9b5 	b.w	8003b96 <_getpid>

0800c82c <__swhatbuf_r>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	460c      	mov	r4, r1
 800c830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c834:	2900      	cmp	r1, #0
 800c836:	b096      	sub	sp, #88	@ 0x58
 800c838:	4615      	mov	r5, r2
 800c83a:	461e      	mov	r6, r3
 800c83c:	da0d      	bge.n	800c85a <__swhatbuf_r+0x2e>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c844:	f04f 0100 	mov.w	r1, #0
 800c848:	bf14      	ite	ne
 800c84a:	2340      	movne	r3, #64	@ 0x40
 800c84c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c850:	2000      	movs	r0, #0
 800c852:	6031      	str	r1, [r6, #0]
 800c854:	602b      	str	r3, [r5, #0]
 800c856:	b016      	add	sp, #88	@ 0x58
 800c858:	bd70      	pop	{r4, r5, r6, pc}
 800c85a:	466a      	mov	r2, sp
 800c85c:	f000 f848 	bl	800c8f0 <_fstat_r>
 800c860:	2800      	cmp	r0, #0
 800c862:	dbec      	blt.n	800c83e <__swhatbuf_r+0x12>
 800c864:	9901      	ldr	r1, [sp, #4]
 800c866:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c86a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c86e:	4259      	negs	r1, r3
 800c870:	4159      	adcs	r1, r3
 800c872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c876:	e7eb      	b.n	800c850 <__swhatbuf_r+0x24>

0800c878 <__smakebuf_r>:
 800c878:	898b      	ldrh	r3, [r1, #12]
 800c87a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c87c:	079d      	lsls	r5, r3, #30
 800c87e:	4606      	mov	r6, r0
 800c880:	460c      	mov	r4, r1
 800c882:	d507      	bpl.n	800c894 <__smakebuf_r+0x1c>
 800c884:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	6123      	str	r3, [r4, #16]
 800c88c:	2301      	movs	r3, #1
 800c88e:	6163      	str	r3, [r4, #20]
 800c890:	b003      	add	sp, #12
 800c892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c894:	ab01      	add	r3, sp, #4
 800c896:	466a      	mov	r2, sp
 800c898:	f7ff ffc8 	bl	800c82c <__swhatbuf_r>
 800c89c:	9f00      	ldr	r7, [sp, #0]
 800c89e:	4605      	mov	r5, r0
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f7fe febe 	bl	800b624 <_malloc_r>
 800c8a8:	b948      	cbnz	r0, 800c8be <__smakebuf_r+0x46>
 800c8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ae:	059a      	lsls	r2, r3, #22
 800c8b0:	d4ee      	bmi.n	800c890 <__smakebuf_r+0x18>
 800c8b2:	f023 0303 	bic.w	r3, r3, #3
 800c8b6:	f043 0302 	orr.w	r3, r3, #2
 800c8ba:	81a3      	strh	r3, [r4, #12]
 800c8bc:	e7e2      	b.n	800c884 <__smakebuf_r+0xc>
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	6020      	str	r0, [r4, #0]
 800c8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8ce:	b15b      	cbz	r3, 800c8e8 <__smakebuf_r+0x70>
 800c8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f000 f81d 	bl	800c914 <_isatty_r>
 800c8da:	b128      	cbz	r0, 800c8e8 <__smakebuf_r+0x70>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	f023 0303 	bic.w	r3, r3, #3
 800c8e2:	f043 0301 	orr.w	r3, r3, #1
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	431d      	orrs	r5, r3
 800c8ec:	81a5      	strh	r5, [r4, #12]
 800c8ee:	e7cf      	b.n	800c890 <__smakebuf_r+0x18>

0800c8f0 <_fstat_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4d07      	ldr	r5, [pc, #28]	@ (800c910 <_fstat_r+0x20>)
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	602b      	str	r3, [r5, #0]
 800c8fe:	f7f7 f9b2 	bl	8003c66 <_fstat>
 800c902:	1c43      	adds	r3, r0, #1
 800c904:	d102      	bne.n	800c90c <_fstat_r+0x1c>
 800c906:	682b      	ldr	r3, [r5, #0]
 800c908:	b103      	cbz	r3, 800c90c <_fstat_r+0x1c>
 800c90a:	6023      	str	r3, [r4, #0]
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
 800c90e:	bf00      	nop
 800c910:	240012d4 	.word	0x240012d4

0800c914 <_isatty_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d06      	ldr	r5, [pc, #24]	@ (800c930 <_isatty_r+0x1c>)
 800c918:	2300      	movs	r3, #0
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	602b      	str	r3, [r5, #0]
 800c920:	f7f7 f9b1 	bl	8003c86 <_isatty>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d102      	bne.n	800c92e <_isatty_r+0x1a>
 800c928:	682b      	ldr	r3, [r5, #0]
 800c92a:	b103      	cbz	r3, 800c92e <_isatty_r+0x1a>
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	bd38      	pop	{r3, r4, r5, pc}
 800c930:	240012d4 	.word	0x240012d4

0800c934 <_init>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	bf00      	nop
 800c938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93a:	bc08      	pop	{r3}
 800c93c:	469e      	mov	lr, r3
 800c93e:	4770      	bx	lr

0800c940 <_fini>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	bf00      	nop
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr
